/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.36
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package libtisch;

public class dequeBasicBlob {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected dequeBasicBlob(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(dequeBasicBlob obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if(swigCPtr != 0 && swigCMemOwn) {
      swigCMemOwn = false;
      libtischJNI.delete_dequeBasicBlob(swigCPtr);
    }
    swigCPtr = 0;
  }

  public dequeBasicBlob() {
    this(libtischJNI.new_dequeBasicBlob__SWIG_0(), true);
  }

  public dequeBasicBlob(long size, BasicBlob value) {
    this(libtischJNI.new_dequeBasicBlob__SWIG_1(size, BasicBlob.getCPtr(value), value), true);
  }

  public dequeBasicBlob(long size) {
    this(libtischJNI.new_dequeBasicBlob__SWIG_2(size), true);
  }

  public dequeBasicBlob(dequeBasicBlob arg0) {
    this(libtischJNI.new_dequeBasicBlob__SWIG_3(dequeBasicBlob.getCPtr(arg0), arg0), true);
  }

  public void assign(long n, BasicBlob value) {
    libtischJNI.dequeBasicBlob_assign(swigCPtr, this, n, BasicBlob.getCPtr(value), value);
  }

  public void swap(dequeBasicBlob x) {
    libtischJNI.dequeBasicBlob_swap(swigCPtr, this, dequeBasicBlob.getCPtr(x), x);
  }

  public long size() {
    return libtischJNI.dequeBasicBlob_size(swigCPtr, this);
  }

  public long max_size() {
    return libtischJNI.dequeBasicBlob_max_size(swigCPtr, this);
  }

  public void resize(long n, BasicBlob c) {
    libtischJNI.dequeBasicBlob_resize__SWIG_0(swigCPtr, this, n, BasicBlob.getCPtr(c), c);
  }

  public void resize(long n) {
    libtischJNI.dequeBasicBlob_resize__SWIG_1(swigCPtr, this, n);
  }

  public boolean empty() {
    return libtischJNI.dequeBasicBlob_empty(swigCPtr, this);
  }

  public BasicBlob front() {
    return new BasicBlob(libtischJNI.dequeBasicBlob_front(swigCPtr, this), false);
  }

  public BasicBlob back() {
    return new BasicBlob(libtischJNI.dequeBasicBlob_back(swigCPtr, this), false);
  }

  public void push_front(BasicBlob x) {
    libtischJNI.dequeBasicBlob_push_front(swigCPtr, this, BasicBlob.getCPtr(x), x);
  }

  public void push_back(BasicBlob x) {
    libtischJNI.dequeBasicBlob_push_back(swigCPtr, this, BasicBlob.getCPtr(x), x);
  }

  public void pop_front() {
    libtischJNI.dequeBasicBlob_pop_front(swigCPtr, this);
  }

  public void pop_back() {
    libtischJNI.dequeBasicBlob_pop_back(swigCPtr, this);
  }

  public void clear() {
    libtischJNI.dequeBasicBlob_clear(swigCPtr, this);
  }

  public BasicBlob getitem(int i) {
    return new BasicBlob(libtischJNI.dequeBasicBlob_getitem(swigCPtr, this, i), false);
  }

  public void setitem(int i, BasicBlob x) {
    libtischJNI.dequeBasicBlob_setitem(swigCPtr, this, i, BasicBlob.getCPtr(x), x);
  }

  public void delitem(int i) {
    libtischJNI.dequeBasicBlob_delitem(swigCPtr, this, i);
  }

  public dequeBasicBlob getslice(int i, int j) {
    return new dequeBasicBlob(libtischJNI.dequeBasicBlob_getslice(swigCPtr, this, i, j), true);
  }

  public void setslice(int i, int j, dequeBasicBlob v) {
    libtischJNI.dequeBasicBlob_setslice(swigCPtr, this, i, j, dequeBasicBlob.getCPtr(v), v);
  }

  public void delslice(int i, int j) {
    libtischJNI.dequeBasicBlob_delslice(swigCPtr, this, i, j);
  }

}
