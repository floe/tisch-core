/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.36
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class libtisch {
  public static SWIGTYPE_p_p_char inputname {
    set {
      libtischPINVOKE.inputname_set(SWIGTYPE_p_p_char.getCPtr(value));
    } 
    get {
      IntPtr cPtr = libtischPINVOKE.inputname_get();
      SWIGTYPE_p_p_char ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_p_char(cPtr, false);
      return ret;
    } 
  }

  public static SWIGTYPE_p_std__mapT_std__string_FeatureBase_pfpFfF_t g_factory() {
    SWIGTYPE_p_std__mapT_std__string_FeatureBase_pfpFfF_t ret = new SWIGTYPE_p_std__mapT_std__string_FeatureBase_pfpFfF_t(libtischPINVOKE.g_factory(), false);
    return ret;
  }

  public static SWIGTYPE_p_std__istream read_from(SWIGTYPE_p_std__istream s, Dimensions d) {
    SWIGTYPE_p_std__istream ret = new SWIGTYPE_p_std__istream(libtischPINVOKE.read_from__SWIG_5(SWIGTYPE_p_std__istream.getCPtr(s), Dimensions.getCPtr(d)), false);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_std__ostream write_to(SWIGTYPE_p_std__ostream s, Dimensions d) {
    SWIGTYPE_p_std__ostream ret = new SWIGTYPE_p_std__ostream(libtischPINVOKE.write_to__SWIG_6(SWIGTYPE_p_std__ostream.getCPtr(s), Dimensions.getCPtr(d)), false);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_GLdouble g_proj {
    set {
      libtischPINVOKE.g_proj_set(SWIGTYPE_p_GLdouble.getCPtr(value));
    } 
    get {
      IntPtr cPtr = libtischPINVOKE.g_proj_get();
      SWIGTYPE_p_GLdouble ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_GLdouble(cPtr, false);
      return ret;
    } 
  }

  public static SWIGTYPE_p_GLint g_view {
    set {
      libtischPINVOKE.g_view_set(SWIGTYPE_p_GLint.getCPtr(value));
    } 
    get {
      IntPtr cPtr = libtischPINVOKE.g_view_get();
      SWIGTYPE_p_GLint ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_GLint(cPtr, false);
      return ret;
    } 
  }

  public static SWIGTYPE_p_std__setT_Widget_p_t g_widgets {
    set {
      libtischPINVOKE.g_widgets_set(SWIGTYPE_p_std__setT_Widget_p_t.getCPtr(value));
    } 
    get {
      IntPtr cPtr = libtischPINVOKE.g_widgets_get();
      SWIGTYPE_p_std__setT_Widget_p_t ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_std__setT_Widget_p_t(cPtr, false);
      return ret;
    } 
  }

  public static readonly int GESTURE_FLAGS_STICKY = libtischPINVOKE.GESTURE_FLAGS_STICKY_get();
  public static readonly int GESTURE_FLAGS_ONESHOT = libtischPINVOKE.GESTURE_FLAGS_ONESHOT_get();
  public static readonly int GESTURE_FLAGS_DEFAULT = libtischPINVOKE.GESTURE_FLAGS_DEFAULT_get();
  public static readonly int GL_GLEXT_VERSION = libtischPINVOKE.GL_GLEXT_VERSION_get();
  public static readonly int GL_UNSIGNED_BYTE_3_3_2 = libtischPINVOKE.GL_UNSIGNED_BYTE_3_3_2_get();
  public static readonly int GL_UNSIGNED_SHORT_4_4_4_4 = libtischPINVOKE.GL_UNSIGNED_SHORT_4_4_4_4_get();
  public static readonly int GL_UNSIGNED_SHORT_5_5_5_1 = libtischPINVOKE.GL_UNSIGNED_SHORT_5_5_5_1_get();
  public static readonly int GL_UNSIGNED_INT_8_8_8_8 = libtischPINVOKE.GL_UNSIGNED_INT_8_8_8_8_get();
  public static readonly int GL_UNSIGNED_INT_10_10_10_2 = libtischPINVOKE.GL_UNSIGNED_INT_10_10_10_2_get();
  public static readonly int GL_TEXTURE_BINDING_3D = libtischPINVOKE.GL_TEXTURE_BINDING_3D_get();
  public static readonly int GL_PACK_SKIP_IMAGES = libtischPINVOKE.GL_PACK_SKIP_IMAGES_get();
  public static readonly int GL_PACK_IMAGE_HEIGHT = libtischPINVOKE.GL_PACK_IMAGE_HEIGHT_get();
  public static readonly int GL_UNPACK_SKIP_IMAGES = libtischPINVOKE.GL_UNPACK_SKIP_IMAGES_get();
  public static readonly int GL_UNPACK_IMAGE_HEIGHT = libtischPINVOKE.GL_UNPACK_IMAGE_HEIGHT_get();
  public static readonly int GL_TEXTURE_3D = libtischPINVOKE.GL_TEXTURE_3D_get();
  public static readonly int GL_PROXY_TEXTURE_3D = libtischPINVOKE.GL_PROXY_TEXTURE_3D_get();
  public static readonly int GL_TEXTURE_DEPTH = libtischPINVOKE.GL_TEXTURE_DEPTH_get();
  public static readonly int GL_TEXTURE_WRAP_R = libtischPINVOKE.GL_TEXTURE_WRAP_R_get();
  public static readonly int GL_MAX_3D_TEXTURE_SIZE = libtischPINVOKE.GL_MAX_3D_TEXTURE_SIZE_get();
  public static readonly int GL_UNSIGNED_BYTE_2_3_3_REV = libtischPINVOKE.GL_UNSIGNED_BYTE_2_3_3_REV_get();
  public static readonly int GL_UNSIGNED_SHORT_5_6_5 = libtischPINVOKE.GL_UNSIGNED_SHORT_5_6_5_get();
  public static readonly int GL_UNSIGNED_SHORT_5_6_5_REV = libtischPINVOKE.GL_UNSIGNED_SHORT_5_6_5_REV_get();
  public static readonly int GL_UNSIGNED_SHORT_4_4_4_4_REV = libtischPINVOKE.GL_UNSIGNED_SHORT_4_4_4_4_REV_get();
  public static readonly int GL_UNSIGNED_SHORT_1_5_5_5_REV = libtischPINVOKE.GL_UNSIGNED_SHORT_1_5_5_5_REV_get();
  public static readonly int GL_UNSIGNED_INT_8_8_8_8_REV = libtischPINVOKE.GL_UNSIGNED_INT_8_8_8_8_REV_get();
  public static readonly int GL_UNSIGNED_INT_2_10_10_10_REV = libtischPINVOKE.GL_UNSIGNED_INT_2_10_10_10_REV_get();
  public static readonly int GL_BGR = libtischPINVOKE.GL_BGR_get();
  public static readonly int GL_BGRA = libtischPINVOKE.GL_BGRA_get();
  public static readonly int GL_MAX_ELEMENTS_VERTICES = libtischPINVOKE.GL_MAX_ELEMENTS_VERTICES_get();
  public static readonly int GL_MAX_ELEMENTS_INDICES = libtischPINVOKE.GL_MAX_ELEMENTS_INDICES_get();
  public static readonly int GL_CLAMP_TO_EDGE = libtischPINVOKE.GL_CLAMP_TO_EDGE_get();
  public static readonly int GL_TEXTURE_MIN_LOD = libtischPINVOKE.GL_TEXTURE_MIN_LOD_get();
  public static readonly int GL_TEXTURE_MAX_LOD = libtischPINVOKE.GL_TEXTURE_MAX_LOD_get();
  public static readonly int GL_TEXTURE_BASE_LEVEL = libtischPINVOKE.GL_TEXTURE_BASE_LEVEL_get();
  public static readonly int GL_TEXTURE_MAX_LEVEL = libtischPINVOKE.GL_TEXTURE_MAX_LEVEL_get();
  public static readonly int GL_SMOOTH_POINT_SIZE_RANGE = libtischPINVOKE.GL_SMOOTH_POINT_SIZE_RANGE_get();
  public static readonly int GL_SMOOTH_POINT_SIZE_GRANULARITY = libtischPINVOKE.GL_SMOOTH_POINT_SIZE_GRANULARITY_get();
  public static readonly int GL_SMOOTH_LINE_WIDTH_RANGE = libtischPINVOKE.GL_SMOOTH_LINE_WIDTH_RANGE_get();
  public static readonly int GL_SMOOTH_LINE_WIDTH_GRANULARITY = libtischPINVOKE.GL_SMOOTH_LINE_WIDTH_GRANULARITY_get();
  public static readonly int GL_ALIASED_LINE_WIDTH_RANGE = libtischPINVOKE.GL_ALIASED_LINE_WIDTH_RANGE_get();
  public static readonly int GL_RESCALE_NORMAL = libtischPINVOKE.GL_RESCALE_NORMAL_get();
  public static readonly int GL_LIGHT_MODEL_COLOR_CONTROL = libtischPINVOKE.GL_LIGHT_MODEL_COLOR_CONTROL_get();
  public static readonly int GL_SINGLE_COLOR = libtischPINVOKE.GL_SINGLE_COLOR_get();
  public static readonly int GL_SEPARATE_SPECULAR_COLOR = libtischPINVOKE.GL_SEPARATE_SPECULAR_COLOR_get();
  public static readonly int GL_ALIASED_POINT_SIZE_RANGE = libtischPINVOKE.GL_ALIASED_POINT_SIZE_RANGE_get();
  public static readonly int GL_CONSTANT_COLOR = libtischPINVOKE.GL_CONSTANT_COLOR_get();
  public static readonly int GL_ONE_MINUS_CONSTANT_COLOR = libtischPINVOKE.GL_ONE_MINUS_CONSTANT_COLOR_get();
  public static readonly int GL_CONSTANT_ALPHA = libtischPINVOKE.GL_CONSTANT_ALPHA_get();
  public static readonly int GL_ONE_MINUS_CONSTANT_ALPHA = libtischPINVOKE.GL_ONE_MINUS_CONSTANT_ALPHA_get();
  public static readonly int GL_BLEND_COLOR = libtischPINVOKE.GL_BLEND_COLOR_get();
  public static readonly int GL_FUNC_ADD = libtischPINVOKE.GL_FUNC_ADD_get();
  public static readonly int GL_MIN = libtischPINVOKE.GL_MIN_get();
  public static readonly int GL_MAX = libtischPINVOKE.GL_MAX_get();
  public static readonly int GL_BLEND_EQUATION = libtischPINVOKE.GL_BLEND_EQUATION_get();
  public static readonly int GL_FUNC_SUBTRACT = libtischPINVOKE.GL_FUNC_SUBTRACT_get();
  public static readonly int GL_FUNC_REVERSE_SUBTRACT = libtischPINVOKE.GL_FUNC_REVERSE_SUBTRACT_get();
  public static readonly int GL_CONVOLUTION_1D = libtischPINVOKE.GL_CONVOLUTION_1D_get();
  public static readonly int GL_CONVOLUTION_2D = libtischPINVOKE.GL_CONVOLUTION_2D_get();
  public static readonly int GL_SEPARABLE_2D = libtischPINVOKE.GL_SEPARABLE_2D_get();
  public static readonly int GL_CONVOLUTION_BORDER_MODE = libtischPINVOKE.GL_CONVOLUTION_BORDER_MODE_get();
  public static readonly int GL_CONVOLUTION_FILTER_SCALE = libtischPINVOKE.GL_CONVOLUTION_FILTER_SCALE_get();
  public static readonly int GL_CONVOLUTION_FILTER_BIAS = libtischPINVOKE.GL_CONVOLUTION_FILTER_BIAS_get();
  public static readonly int GL_REDUCE = libtischPINVOKE.GL_REDUCE_get();
  public static readonly int GL_CONVOLUTION_FORMAT = libtischPINVOKE.GL_CONVOLUTION_FORMAT_get();
  public static readonly int GL_CONVOLUTION_WIDTH = libtischPINVOKE.GL_CONVOLUTION_WIDTH_get();
  public static readonly int GL_CONVOLUTION_HEIGHT = libtischPINVOKE.GL_CONVOLUTION_HEIGHT_get();
  public static readonly int GL_MAX_CONVOLUTION_WIDTH = libtischPINVOKE.GL_MAX_CONVOLUTION_WIDTH_get();
  public static readonly int GL_MAX_CONVOLUTION_HEIGHT = libtischPINVOKE.GL_MAX_CONVOLUTION_HEIGHT_get();
  public static readonly int GL_POST_CONVOLUTION_RED_SCALE = libtischPINVOKE.GL_POST_CONVOLUTION_RED_SCALE_get();
  public static readonly int GL_POST_CONVOLUTION_GREEN_SCALE = libtischPINVOKE.GL_POST_CONVOLUTION_GREEN_SCALE_get();
  public static readonly int GL_POST_CONVOLUTION_BLUE_SCALE = libtischPINVOKE.GL_POST_CONVOLUTION_BLUE_SCALE_get();
  public static readonly int GL_POST_CONVOLUTION_ALPHA_SCALE = libtischPINVOKE.GL_POST_CONVOLUTION_ALPHA_SCALE_get();
  public static readonly int GL_POST_CONVOLUTION_RED_BIAS = libtischPINVOKE.GL_POST_CONVOLUTION_RED_BIAS_get();
  public static readonly int GL_POST_CONVOLUTION_GREEN_BIAS = libtischPINVOKE.GL_POST_CONVOLUTION_GREEN_BIAS_get();
  public static readonly int GL_POST_CONVOLUTION_BLUE_BIAS = libtischPINVOKE.GL_POST_CONVOLUTION_BLUE_BIAS_get();
  public static readonly int GL_POST_CONVOLUTION_ALPHA_BIAS = libtischPINVOKE.GL_POST_CONVOLUTION_ALPHA_BIAS_get();
  public static readonly int GL_HISTOGRAM = libtischPINVOKE.GL_HISTOGRAM_get();
  public static readonly int GL_PROXY_HISTOGRAM = libtischPINVOKE.GL_PROXY_HISTOGRAM_get();
  public static readonly int GL_HISTOGRAM_WIDTH = libtischPINVOKE.GL_HISTOGRAM_WIDTH_get();
  public static readonly int GL_HISTOGRAM_FORMAT = libtischPINVOKE.GL_HISTOGRAM_FORMAT_get();
  public static readonly int GL_HISTOGRAM_RED_SIZE = libtischPINVOKE.GL_HISTOGRAM_RED_SIZE_get();
  public static readonly int GL_HISTOGRAM_GREEN_SIZE = libtischPINVOKE.GL_HISTOGRAM_GREEN_SIZE_get();
  public static readonly int GL_HISTOGRAM_BLUE_SIZE = libtischPINVOKE.GL_HISTOGRAM_BLUE_SIZE_get();
  public static readonly int GL_HISTOGRAM_ALPHA_SIZE = libtischPINVOKE.GL_HISTOGRAM_ALPHA_SIZE_get();
  public static readonly int GL_HISTOGRAM_LUMINANCE_SIZE = libtischPINVOKE.GL_HISTOGRAM_LUMINANCE_SIZE_get();
  public static readonly int GL_HISTOGRAM_SINK = libtischPINVOKE.GL_HISTOGRAM_SINK_get();
  public static readonly int GL_MINMAX = libtischPINVOKE.GL_MINMAX_get();
  public static readonly int GL_MINMAX_FORMAT = libtischPINVOKE.GL_MINMAX_FORMAT_get();
  public static readonly int GL_MINMAX_SINK = libtischPINVOKE.GL_MINMAX_SINK_get();
  public static readonly int GL_TABLE_TOO_LARGE = libtischPINVOKE.GL_TABLE_TOO_LARGE_get();
  public static readonly int GL_COLOR_MATRIX = libtischPINVOKE.GL_COLOR_MATRIX_get();
  public static readonly int GL_COLOR_MATRIX_STACK_DEPTH = libtischPINVOKE.GL_COLOR_MATRIX_STACK_DEPTH_get();
  public static readonly int GL_MAX_COLOR_MATRIX_STACK_DEPTH = libtischPINVOKE.GL_MAX_COLOR_MATRIX_STACK_DEPTH_get();
  public static readonly int GL_POST_COLOR_MATRIX_RED_SCALE = libtischPINVOKE.GL_POST_COLOR_MATRIX_RED_SCALE_get();
  public static readonly int GL_POST_COLOR_MATRIX_GREEN_SCALE = libtischPINVOKE.GL_POST_COLOR_MATRIX_GREEN_SCALE_get();
  public static readonly int GL_POST_COLOR_MATRIX_BLUE_SCALE = libtischPINVOKE.GL_POST_COLOR_MATRIX_BLUE_SCALE_get();
  public static readonly int GL_POST_COLOR_MATRIX_ALPHA_SCALE = libtischPINVOKE.GL_POST_COLOR_MATRIX_ALPHA_SCALE_get();
  public static readonly int GL_POST_COLOR_MATRIX_RED_BIAS = libtischPINVOKE.GL_POST_COLOR_MATRIX_RED_BIAS_get();
  public static readonly int GL_POST_COLOR_MATRIX_GREEN_BIAS = libtischPINVOKE.GL_POST_COLOR_MATRIX_GREEN_BIAS_get();
  public static readonly int GL_POST_COLOR_MATRIX_BLUE_BIAS = libtischPINVOKE.GL_POST_COLOR_MATRIX_BLUE_BIAS_get();
  public static readonly int GL_POST_COLOR_MATRIX_ALPHA_BIAS = libtischPINVOKE.GL_POST_COLOR_MATRIX_ALPHA_BIAS_get();
  public static readonly int GL_COLOR_TABLE = libtischPINVOKE.GL_COLOR_TABLE_get();
  public static readonly int GL_POST_CONVOLUTION_COLOR_TABLE = libtischPINVOKE.GL_POST_CONVOLUTION_COLOR_TABLE_get();
  public static readonly int GL_POST_COLOR_MATRIX_COLOR_TABLE = libtischPINVOKE.GL_POST_COLOR_MATRIX_COLOR_TABLE_get();
  public static readonly int GL_PROXY_COLOR_TABLE = libtischPINVOKE.GL_PROXY_COLOR_TABLE_get();
  public static readonly int GL_PROXY_POST_CONVOLUTION_COLOR_TABLE = libtischPINVOKE.GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_get();
  public static readonly int GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE = libtischPINVOKE.GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_get();
  public static readonly int GL_COLOR_TABLE_SCALE = libtischPINVOKE.GL_COLOR_TABLE_SCALE_get();
  public static readonly int GL_COLOR_TABLE_BIAS = libtischPINVOKE.GL_COLOR_TABLE_BIAS_get();
  public static readonly int GL_COLOR_TABLE_FORMAT = libtischPINVOKE.GL_COLOR_TABLE_FORMAT_get();
  public static readonly int GL_COLOR_TABLE_WIDTH = libtischPINVOKE.GL_COLOR_TABLE_WIDTH_get();
  public static readonly int GL_COLOR_TABLE_RED_SIZE = libtischPINVOKE.GL_COLOR_TABLE_RED_SIZE_get();
  public static readonly int GL_COLOR_TABLE_GREEN_SIZE = libtischPINVOKE.GL_COLOR_TABLE_GREEN_SIZE_get();
  public static readonly int GL_COLOR_TABLE_BLUE_SIZE = libtischPINVOKE.GL_COLOR_TABLE_BLUE_SIZE_get();
  public static readonly int GL_COLOR_TABLE_ALPHA_SIZE = libtischPINVOKE.GL_COLOR_TABLE_ALPHA_SIZE_get();
  public static readonly int GL_COLOR_TABLE_LUMINANCE_SIZE = libtischPINVOKE.GL_COLOR_TABLE_LUMINANCE_SIZE_get();
  public static readonly int GL_COLOR_TABLE_INTENSITY_SIZE = libtischPINVOKE.GL_COLOR_TABLE_INTENSITY_SIZE_get();
  public static readonly int GL_CONSTANT_BORDER = libtischPINVOKE.GL_CONSTANT_BORDER_get();
  public static readonly int GL_REPLICATE_BORDER = libtischPINVOKE.GL_REPLICATE_BORDER_get();
  public static readonly int GL_CONVOLUTION_BORDER_COLOR = libtischPINVOKE.GL_CONVOLUTION_BORDER_COLOR_get();
  public static readonly int GL_TEXTURE0 = libtischPINVOKE.GL_TEXTURE0_get();
  public static readonly int GL_TEXTURE1 = libtischPINVOKE.GL_TEXTURE1_get();
  public static readonly int GL_TEXTURE2 = libtischPINVOKE.GL_TEXTURE2_get();
  public static readonly int GL_TEXTURE3 = libtischPINVOKE.GL_TEXTURE3_get();
  public static readonly int GL_TEXTURE4 = libtischPINVOKE.GL_TEXTURE4_get();
  public static readonly int GL_TEXTURE5 = libtischPINVOKE.GL_TEXTURE5_get();
  public static readonly int GL_TEXTURE6 = libtischPINVOKE.GL_TEXTURE6_get();
  public static readonly int GL_TEXTURE7 = libtischPINVOKE.GL_TEXTURE7_get();
  public static readonly int GL_TEXTURE8 = libtischPINVOKE.GL_TEXTURE8_get();
  public static readonly int GL_TEXTURE9 = libtischPINVOKE.GL_TEXTURE9_get();
  public static readonly int GL_TEXTURE10 = libtischPINVOKE.GL_TEXTURE10_get();
  public static readonly int GL_TEXTURE11 = libtischPINVOKE.GL_TEXTURE11_get();
  public static readonly int GL_TEXTURE12 = libtischPINVOKE.GL_TEXTURE12_get();
  public static readonly int GL_TEXTURE13 = libtischPINVOKE.GL_TEXTURE13_get();
  public static readonly int GL_TEXTURE14 = libtischPINVOKE.GL_TEXTURE14_get();
  public static readonly int GL_TEXTURE15 = libtischPINVOKE.GL_TEXTURE15_get();
  public static readonly int GL_TEXTURE16 = libtischPINVOKE.GL_TEXTURE16_get();
  public static readonly int GL_TEXTURE17 = libtischPINVOKE.GL_TEXTURE17_get();
  public static readonly int GL_TEXTURE18 = libtischPINVOKE.GL_TEXTURE18_get();
  public static readonly int GL_TEXTURE19 = libtischPINVOKE.GL_TEXTURE19_get();
  public static readonly int GL_TEXTURE20 = libtischPINVOKE.GL_TEXTURE20_get();
  public static readonly int GL_TEXTURE21 = libtischPINVOKE.GL_TEXTURE21_get();
  public static readonly int GL_TEXTURE22 = libtischPINVOKE.GL_TEXTURE22_get();
  public static readonly int GL_TEXTURE23 = libtischPINVOKE.GL_TEXTURE23_get();
  public static readonly int GL_TEXTURE24 = libtischPINVOKE.GL_TEXTURE24_get();
  public static readonly int GL_TEXTURE25 = libtischPINVOKE.GL_TEXTURE25_get();
  public static readonly int GL_TEXTURE26 = libtischPINVOKE.GL_TEXTURE26_get();
  public static readonly int GL_TEXTURE27 = libtischPINVOKE.GL_TEXTURE27_get();
  public static readonly int GL_TEXTURE28 = libtischPINVOKE.GL_TEXTURE28_get();
  public static readonly int GL_TEXTURE29 = libtischPINVOKE.GL_TEXTURE29_get();
  public static readonly int GL_TEXTURE30 = libtischPINVOKE.GL_TEXTURE30_get();
  public static readonly int GL_TEXTURE31 = libtischPINVOKE.GL_TEXTURE31_get();
  public static readonly int GL_ACTIVE_TEXTURE = libtischPINVOKE.GL_ACTIVE_TEXTURE_get();
  public static readonly int GL_MULTISAMPLE = libtischPINVOKE.GL_MULTISAMPLE_get();
  public static readonly int GL_SAMPLE_ALPHA_TO_COVERAGE = libtischPINVOKE.GL_SAMPLE_ALPHA_TO_COVERAGE_get();
  public static readonly int GL_SAMPLE_ALPHA_TO_ONE = libtischPINVOKE.GL_SAMPLE_ALPHA_TO_ONE_get();
  public static readonly int GL_SAMPLE_COVERAGE = libtischPINVOKE.GL_SAMPLE_COVERAGE_get();
  public static readonly int GL_SAMPLE_BUFFERS = libtischPINVOKE.GL_SAMPLE_BUFFERS_get();
  public static readonly int GL_SAMPLES = libtischPINVOKE.GL_SAMPLES_get();
  public static readonly int GL_SAMPLE_COVERAGE_VALUE = libtischPINVOKE.GL_SAMPLE_COVERAGE_VALUE_get();
  public static readonly int GL_SAMPLE_COVERAGE_INVERT = libtischPINVOKE.GL_SAMPLE_COVERAGE_INVERT_get();
  public static readonly int GL_TEXTURE_CUBE_MAP = libtischPINVOKE.GL_TEXTURE_CUBE_MAP_get();
  public static readonly int GL_TEXTURE_BINDING_CUBE_MAP = libtischPINVOKE.GL_TEXTURE_BINDING_CUBE_MAP_get();
  public static readonly int GL_TEXTURE_CUBE_MAP_POSITIVE_X = libtischPINVOKE.GL_TEXTURE_CUBE_MAP_POSITIVE_X_get();
  public static readonly int GL_TEXTURE_CUBE_MAP_NEGATIVE_X = libtischPINVOKE.GL_TEXTURE_CUBE_MAP_NEGATIVE_X_get();
  public static readonly int GL_TEXTURE_CUBE_MAP_POSITIVE_Y = libtischPINVOKE.GL_TEXTURE_CUBE_MAP_POSITIVE_Y_get();
  public static readonly int GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = libtischPINVOKE.GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_get();
  public static readonly int GL_TEXTURE_CUBE_MAP_POSITIVE_Z = libtischPINVOKE.GL_TEXTURE_CUBE_MAP_POSITIVE_Z_get();
  public static readonly int GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = libtischPINVOKE.GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_get();
  public static readonly int GL_PROXY_TEXTURE_CUBE_MAP = libtischPINVOKE.GL_PROXY_TEXTURE_CUBE_MAP_get();
  public static readonly int GL_MAX_CUBE_MAP_TEXTURE_SIZE = libtischPINVOKE.GL_MAX_CUBE_MAP_TEXTURE_SIZE_get();
  public static readonly int GL_COMPRESSED_RGB = libtischPINVOKE.GL_COMPRESSED_RGB_get();
  public static readonly int GL_COMPRESSED_RGBA = libtischPINVOKE.GL_COMPRESSED_RGBA_get();
  public static readonly int GL_TEXTURE_COMPRESSION_HINT = libtischPINVOKE.GL_TEXTURE_COMPRESSION_HINT_get();
  public static readonly int GL_TEXTURE_COMPRESSED_IMAGE_SIZE = libtischPINVOKE.GL_TEXTURE_COMPRESSED_IMAGE_SIZE_get();
  public static readonly int GL_TEXTURE_COMPRESSED = libtischPINVOKE.GL_TEXTURE_COMPRESSED_get();
  public static readonly int GL_NUM_COMPRESSED_TEXTURE_FORMATS = libtischPINVOKE.GL_NUM_COMPRESSED_TEXTURE_FORMATS_get();
  public static readonly int GL_COMPRESSED_TEXTURE_FORMATS = libtischPINVOKE.GL_COMPRESSED_TEXTURE_FORMATS_get();
  public static readonly int GL_CLAMP_TO_BORDER = libtischPINVOKE.GL_CLAMP_TO_BORDER_get();
  public static readonly int GL_CLIENT_ACTIVE_TEXTURE = libtischPINVOKE.GL_CLIENT_ACTIVE_TEXTURE_get();
  public static readonly int GL_MAX_TEXTURE_UNITS = libtischPINVOKE.GL_MAX_TEXTURE_UNITS_get();
  public static readonly int GL_TRANSPOSE_MODELVIEW_MATRIX = libtischPINVOKE.GL_TRANSPOSE_MODELVIEW_MATRIX_get();
  public static readonly int GL_TRANSPOSE_PROJECTION_MATRIX = libtischPINVOKE.GL_TRANSPOSE_PROJECTION_MATRIX_get();
  public static readonly int GL_TRANSPOSE_TEXTURE_MATRIX = libtischPINVOKE.GL_TRANSPOSE_TEXTURE_MATRIX_get();
  public static readonly int GL_TRANSPOSE_COLOR_MATRIX = libtischPINVOKE.GL_TRANSPOSE_COLOR_MATRIX_get();
  public static readonly int GL_MULTISAMPLE_BIT = libtischPINVOKE.GL_MULTISAMPLE_BIT_get();
  public static readonly int GL_NORMAL_MAP = libtischPINVOKE.GL_NORMAL_MAP_get();
  public static readonly int GL_REFLECTION_MAP = libtischPINVOKE.GL_REFLECTION_MAP_get();
  public static readonly int GL_COMPRESSED_ALPHA = libtischPINVOKE.GL_COMPRESSED_ALPHA_get();
  public static readonly int GL_COMPRESSED_LUMINANCE = libtischPINVOKE.GL_COMPRESSED_LUMINANCE_get();
  public static readonly int GL_COMPRESSED_LUMINANCE_ALPHA = libtischPINVOKE.GL_COMPRESSED_LUMINANCE_ALPHA_get();
  public static readonly int GL_COMPRESSED_INTENSITY = libtischPINVOKE.GL_COMPRESSED_INTENSITY_get();
  public static readonly int GL_COMBINE = libtischPINVOKE.GL_COMBINE_get();
  public static readonly int GL_COMBINE_RGB = libtischPINVOKE.GL_COMBINE_RGB_get();
  public static readonly int GL_COMBINE_ALPHA = libtischPINVOKE.GL_COMBINE_ALPHA_get();
  public static readonly int GL_SOURCE0_RGB = libtischPINVOKE.GL_SOURCE0_RGB_get();
  public static readonly int GL_SOURCE1_RGB = libtischPINVOKE.GL_SOURCE1_RGB_get();
  public static readonly int GL_SOURCE2_RGB = libtischPINVOKE.GL_SOURCE2_RGB_get();
  public static readonly int GL_SOURCE0_ALPHA = libtischPINVOKE.GL_SOURCE0_ALPHA_get();
  public static readonly int GL_SOURCE1_ALPHA = libtischPINVOKE.GL_SOURCE1_ALPHA_get();
  public static readonly int GL_SOURCE2_ALPHA = libtischPINVOKE.GL_SOURCE2_ALPHA_get();
  public static readonly int GL_OPERAND0_RGB = libtischPINVOKE.GL_OPERAND0_RGB_get();
  public static readonly int GL_OPERAND1_RGB = libtischPINVOKE.GL_OPERAND1_RGB_get();
  public static readonly int GL_OPERAND2_RGB = libtischPINVOKE.GL_OPERAND2_RGB_get();
  public static readonly int GL_OPERAND0_ALPHA = libtischPINVOKE.GL_OPERAND0_ALPHA_get();
  public static readonly int GL_OPERAND1_ALPHA = libtischPINVOKE.GL_OPERAND1_ALPHA_get();
  public static readonly int GL_OPERAND2_ALPHA = libtischPINVOKE.GL_OPERAND2_ALPHA_get();
  public static readonly int GL_RGB_SCALE = libtischPINVOKE.GL_RGB_SCALE_get();
  public static readonly int GL_ADD_SIGNED = libtischPINVOKE.GL_ADD_SIGNED_get();
  public static readonly int GL_INTERPOLATE = libtischPINVOKE.GL_INTERPOLATE_get();
  public static readonly int GL_SUBTRACT = libtischPINVOKE.GL_SUBTRACT_get();
  public static readonly int GL_CONSTANT = libtischPINVOKE.GL_CONSTANT_get();
  public static readonly int GL_PRIMARY_COLOR = libtischPINVOKE.GL_PRIMARY_COLOR_get();
  public static readonly int GL_PREVIOUS = libtischPINVOKE.GL_PREVIOUS_get();
  public static readonly int GL_DOT3_RGB = libtischPINVOKE.GL_DOT3_RGB_get();
  public static readonly int GL_DOT3_RGBA = libtischPINVOKE.GL_DOT3_RGBA_get();
  public static readonly int GL_BLEND_DST_RGB = libtischPINVOKE.GL_BLEND_DST_RGB_get();
  public static readonly int GL_BLEND_SRC_RGB = libtischPINVOKE.GL_BLEND_SRC_RGB_get();
  public static readonly int GL_BLEND_DST_ALPHA = libtischPINVOKE.GL_BLEND_DST_ALPHA_get();
  public static readonly int GL_BLEND_SRC_ALPHA = libtischPINVOKE.GL_BLEND_SRC_ALPHA_get();
  public static readonly int GL_POINT_FADE_THRESHOLD_SIZE = libtischPINVOKE.GL_POINT_FADE_THRESHOLD_SIZE_get();
  public static readonly int GL_DEPTH_COMPONENT16 = libtischPINVOKE.GL_DEPTH_COMPONENT16_get();
  public static readonly int GL_DEPTH_COMPONENT24 = libtischPINVOKE.GL_DEPTH_COMPONENT24_get();
  public static readonly int GL_DEPTH_COMPONENT32 = libtischPINVOKE.GL_DEPTH_COMPONENT32_get();
  public static readonly int GL_MIRRORED_REPEAT = libtischPINVOKE.GL_MIRRORED_REPEAT_get();
  public static readonly int GL_MAX_TEXTURE_LOD_BIAS = libtischPINVOKE.GL_MAX_TEXTURE_LOD_BIAS_get();
  public static readonly int GL_TEXTURE_LOD_BIAS = libtischPINVOKE.GL_TEXTURE_LOD_BIAS_get();
  public static readonly int GL_INCR_WRAP = libtischPINVOKE.GL_INCR_WRAP_get();
  public static readonly int GL_DECR_WRAP = libtischPINVOKE.GL_DECR_WRAP_get();
  public static readonly int GL_TEXTURE_DEPTH_SIZE = libtischPINVOKE.GL_TEXTURE_DEPTH_SIZE_get();
  public static readonly int GL_TEXTURE_COMPARE_MODE = libtischPINVOKE.GL_TEXTURE_COMPARE_MODE_get();
  public static readonly int GL_TEXTURE_COMPARE_FUNC = libtischPINVOKE.GL_TEXTURE_COMPARE_FUNC_get();
  public static readonly int GL_POINT_SIZE_MIN = libtischPINVOKE.GL_POINT_SIZE_MIN_get();
  public static readonly int GL_POINT_SIZE_MAX = libtischPINVOKE.GL_POINT_SIZE_MAX_get();
  public static readonly int GL_POINT_DISTANCE_ATTENUATION = libtischPINVOKE.GL_POINT_DISTANCE_ATTENUATION_get();
  public static readonly int GL_GENERATE_MIPMAP = libtischPINVOKE.GL_GENERATE_MIPMAP_get();
  public static readonly int GL_GENERATE_MIPMAP_HINT = libtischPINVOKE.GL_GENERATE_MIPMAP_HINT_get();
  public static readonly int GL_FOG_COORDINATE_SOURCE = libtischPINVOKE.GL_FOG_COORDINATE_SOURCE_get();
  public static readonly int GL_FOG_COORDINATE = libtischPINVOKE.GL_FOG_COORDINATE_get();
  public static readonly int GL_FRAGMENT_DEPTH = libtischPINVOKE.GL_FRAGMENT_DEPTH_get();
  public static readonly int GL_CURRENT_FOG_COORDINATE = libtischPINVOKE.GL_CURRENT_FOG_COORDINATE_get();
  public static readonly int GL_FOG_COORDINATE_ARRAY_TYPE = libtischPINVOKE.GL_FOG_COORDINATE_ARRAY_TYPE_get();
  public static readonly int GL_FOG_COORDINATE_ARRAY_STRIDE = libtischPINVOKE.GL_FOG_COORDINATE_ARRAY_STRIDE_get();
  public static readonly int GL_FOG_COORDINATE_ARRAY_POINTER = libtischPINVOKE.GL_FOG_COORDINATE_ARRAY_POINTER_get();
  public static readonly int GL_FOG_COORDINATE_ARRAY = libtischPINVOKE.GL_FOG_COORDINATE_ARRAY_get();
  public static readonly int GL_COLOR_SUM = libtischPINVOKE.GL_COLOR_SUM_get();
  public static readonly int GL_CURRENT_SECONDARY_COLOR = libtischPINVOKE.GL_CURRENT_SECONDARY_COLOR_get();
  public static readonly int GL_SECONDARY_COLOR_ARRAY_SIZE = libtischPINVOKE.GL_SECONDARY_COLOR_ARRAY_SIZE_get();
  public static readonly int GL_SECONDARY_COLOR_ARRAY_TYPE = libtischPINVOKE.GL_SECONDARY_COLOR_ARRAY_TYPE_get();
  public static readonly int GL_SECONDARY_COLOR_ARRAY_STRIDE = libtischPINVOKE.GL_SECONDARY_COLOR_ARRAY_STRIDE_get();
  public static readonly int GL_SECONDARY_COLOR_ARRAY_POINTER = libtischPINVOKE.GL_SECONDARY_COLOR_ARRAY_POINTER_get();
  public static readonly int GL_SECONDARY_COLOR_ARRAY = libtischPINVOKE.GL_SECONDARY_COLOR_ARRAY_get();
  public static readonly int GL_TEXTURE_FILTER_CONTROL = libtischPINVOKE.GL_TEXTURE_FILTER_CONTROL_get();
  public static readonly int GL_DEPTH_TEXTURE_MODE = libtischPINVOKE.GL_DEPTH_TEXTURE_MODE_get();
  public static readonly int GL_COMPARE_R_TO_TEXTURE = libtischPINVOKE.GL_COMPARE_R_TO_TEXTURE_get();
  public static readonly int GL_BUFFER_SIZE = libtischPINVOKE.GL_BUFFER_SIZE_get();
  public static readonly int GL_BUFFER_USAGE = libtischPINVOKE.GL_BUFFER_USAGE_get();
  public static readonly int GL_QUERY_COUNTER_BITS = libtischPINVOKE.GL_QUERY_COUNTER_BITS_get();
  public static readonly int GL_CURRENT_QUERY = libtischPINVOKE.GL_CURRENT_QUERY_get();
  public static readonly int GL_QUERY_RESULT = libtischPINVOKE.GL_QUERY_RESULT_get();
  public static readonly int GL_QUERY_RESULT_AVAILABLE = libtischPINVOKE.GL_QUERY_RESULT_AVAILABLE_get();
  public static readonly int GL_ARRAY_BUFFER = libtischPINVOKE.GL_ARRAY_BUFFER_get();
  public static readonly int GL_ELEMENT_ARRAY_BUFFER = libtischPINVOKE.GL_ELEMENT_ARRAY_BUFFER_get();
  public static readonly int GL_ARRAY_BUFFER_BINDING = libtischPINVOKE.GL_ARRAY_BUFFER_BINDING_get();
  public static readonly int GL_ELEMENT_ARRAY_BUFFER_BINDING = libtischPINVOKE.GL_ELEMENT_ARRAY_BUFFER_BINDING_get();
  public static readonly int GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = libtischPINVOKE.GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_get();
  public static readonly int GL_READ_ONLY = libtischPINVOKE.GL_READ_ONLY_get();
  public static readonly int GL_WRITE_ONLY = libtischPINVOKE.GL_WRITE_ONLY_get();
  public static readonly int GL_READ_WRITE = libtischPINVOKE.GL_READ_WRITE_get();
  public static readonly int GL_BUFFER_ACCESS = libtischPINVOKE.GL_BUFFER_ACCESS_get();
  public static readonly int GL_BUFFER_MAPPED = libtischPINVOKE.GL_BUFFER_MAPPED_get();
  public static readonly int GL_BUFFER_MAP_POINTER = libtischPINVOKE.GL_BUFFER_MAP_POINTER_get();
  public static readonly int GL_STREAM_DRAW = libtischPINVOKE.GL_STREAM_DRAW_get();
  public static readonly int GL_STREAM_READ = libtischPINVOKE.GL_STREAM_READ_get();
  public static readonly int GL_STREAM_COPY = libtischPINVOKE.GL_STREAM_COPY_get();
  public static readonly int GL_STATIC_DRAW = libtischPINVOKE.GL_STATIC_DRAW_get();
  public static readonly int GL_STATIC_READ = libtischPINVOKE.GL_STATIC_READ_get();
  public static readonly int GL_STATIC_COPY = libtischPINVOKE.GL_STATIC_COPY_get();
  public static readonly int GL_DYNAMIC_DRAW = libtischPINVOKE.GL_DYNAMIC_DRAW_get();
  public static readonly int GL_DYNAMIC_READ = libtischPINVOKE.GL_DYNAMIC_READ_get();
  public static readonly int GL_DYNAMIC_COPY = libtischPINVOKE.GL_DYNAMIC_COPY_get();
  public static readonly int GL_SAMPLES_PASSED = libtischPINVOKE.GL_SAMPLES_PASSED_get();
  public static readonly int GL_VERTEX_ARRAY_BUFFER_BINDING = libtischPINVOKE.GL_VERTEX_ARRAY_BUFFER_BINDING_get();
  public static readonly int GL_NORMAL_ARRAY_BUFFER_BINDING = libtischPINVOKE.GL_NORMAL_ARRAY_BUFFER_BINDING_get();
  public static readonly int GL_COLOR_ARRAY_BUFFER_BINDING = libtischPINVOKE.GL_COLOR_ARRAY_BUFFER_BINDING_get();
  public static readonly int GL_INDEX_ARRAY_BUFFER_BINDING = libtischPINVOKE.GL_INDEX_ARRAY_BUFFER_BINDING_get();
  public static readonly int GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING = libtischPINVOKE.GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_get();
  public static readonly int GL_EDGE_FLAG_ARRAY_BUFFER_BINDING = libtischPINVOKE.GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_get();
  public static readonly int GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING = libtischPINVOKE.GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_get();
  public static readonly int GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING = libtischPINVOKE.GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_get();
  public static readonly int GL_WEIGHT_ARRAY_BUFFER_BINDING = libtischPINVOKE.GL_WEIGHT_ARRAY_BUFFER_BINDING_get();
  public static readonly int GL_FOG_COORD_SRC = libtischPINVOKE.GL_FOG_COORD_SRC_get();
  public static readonly int GL_FOG_COORD = libtischPINVOKE.GL_FOG_COORD_get();
  public static readonly int GL_CURRENT_FOG_COORD = libtischPINVOKE.GL_CURRENT_FOG_COORD_get();
  public static readonly int GL_FOG_COORD_ARRAY_TYPE = libtischPINVOKE.GL_FOG_COORD_ARRAY_TYPE_get();
  public static readonly int GL_FOG_COORD_ARRAY_STRIDE = libtischPINVOKE.GL_FOG_COORD_ARRAY_STRIDE_get();
  public static readonly int GL_FOG_COORD_ARRAY_POINTER = libtischPINVOKE.GL_FOG_COORD_ARRAY_POINTER_get();
  public static readonly int GL_FOG_COORD_ARRAY = libtischPINVOKE.GL_FOG_COORD_ARRAY_get();
  public static readonly int GL_FOG_COORD_ARRAY_BUFFER_BINDING = libtischPINVOKE.GL_FOG_COORD_ARRAY_BUFFER_BINDING_get();
  public static readonly int GL_SRC0_RGB = libtischPINVOKE.GL_SRC0_RGB_get();
  public static readonly int GL_SRC1_RGB = libtischPINVOKE.GL_SRC1_RGB_get();
  public static readonly int GL_SRC2_RGB = libtischPINVOKE.GL_SRC2_RGB_get();
  public static readonly int GL_SRC0_ALPHA = libtischPINVOKE.GL_SRC0_ALPHA_get();
  public static readonly int GL_SRC1_ALPHA = libtischPINVOKE.GL_SRC1_ALPHA_get();
  public static readonly int GL_SRC2_ALPHA = libtischPINVOKE.GL_SRC2_ALPHA_get();
  public static readonly int GL_BLEND_EQUATION_RGB = libtischPINVOKE.GL_BLEND_EQUATION_RGB_get();
  public static readonly int GL_VERTEX_ATTRIB_ARRAY_ENABLED = libtischPINVOKE.GL_VERTEX_ATTRIB_ARRAY_ENABLED_get();
  public static readonly int GL_VERTEX_ATTRIB_ARRAY_SIZE = libtischPINVOKE.GL_VERTEX_ATTRIB_ARRAY_SIZE_get();
  public static readonly int GL_VERTEX_ATTRIB_ARRAY_STRIDE = libtischPINVOKE.GL_VERTEX_ATTRIB_ARRAY_STRIDE_get();
  public static readonly int GL_VERTEX_ATTRIB_ARRAY_TYPE = libtischPINVOKE.GL_VERTEX_ATTRIB_ARRAY_TYPE_get();
  public static readonly int GL_CURRENT_VERTEX_ATTRIB = libtischPINVOKE.GL_CURRENT_VERTEX_ATTRIB_get();
  public static readonly int GL_VERTEX_PROGRAM_POINT_SIZE = libtischPINVOKE.GL_VERTEX_PROGRAM_POINT_SIZE_get();
  public static readonly int GL_VERTEX_ATTRIB_ARRAY_POINTER = libtischPINVOKE.GL_VERTEX_ATTRIB_ARRAY_POINTER_get();
  public static readonly int GL_STENCIL_BACK_FUNC = libtischPINVOKE.GL_STENCIL_BACK_FUNC_get();
  public static readonly int GL_STENCIL_BACK_FAIL = libtischPINVOKE.GL_STENCIL_BACK_FAIL_get();
  public static readonly int GL_STENCIL_BACK_PASS_DEPTH_FAIL = libtischPINVOKE.GL_STENCIL_BACK_PASS_DEPTH_FAIL_get();
  public static readonly int GL_STENCIL_BACK_PASS_DEPTH_PASS = libtischPINVOKE.GL_STENCIL_BACK_PASS_DEPTH_PASS_get();
  public static readonly int GL_MAX_DRAW_BUFFERS = libtischPINVOKE.GL_MAX_DRAW_BUFFERS_get();
  public static readonly int GL_DRAW_BUFFER0 = libtischPINVOKE.GL_DRAW_BUFFER0_get();
  public static readonly int GL_DRAW_BUFFER1 = libtischPINVOKE.GL_DRAW_BUFFER1_get();
  public static readonly int GL_DRAW_BUFFER2 = libtischPINVOKE.GL_DRAW_BUFFER2_get();
  public static readonly int GL_DRAW_BUFFER3 = libtischPINVOKE.GL_DRAW_BUFFER3_get();
  public static readonly int GL_DRAW_BUFFER4 = libtischPINVOKE.GL_DRAW_BUFFER4_get();
  public static readonly int GL_DRAW_BUFFER5 = libtischPINVOKE.GL_DRAW_BUFFER5_get();
  public static readonly int GL_DRAW_BUFFER6 = libtischPINVOKE.GL_DRAW_BUFFER6_get();
  public static readonly int GL_DRAW_BUFFER7 = libtischPINVOKE.GL_DRAW_BUFFER7_get();
  public static readonly int GL_DRAW_BUFFER8 = libtischPINVOKE.GL_DRAW_BUFFER8_get();
  public static readonly int GL_DRAW_BUFFER9 = libtischPINVOKE.GL_DRAW_BUFFER9_get();
  public static readonly int GL_DRAW_BUFFER10 = libtischPINVOKE.GL_DRAW_BUFFER10_get();
  public static readonly int GL_DRAW_BUFFER11 = libtischPINVOKE.GL_DRAW_BUFFER11_get();
  public static readonly int GL_DRAW_BUFFER12 = libtischPINVOKE.GL_DRAW_BUFFER12_get();
  public static readonly int GL_DRAW_BUFFER13 = libtischPINVOKE.GL_DRAW_BUFFER13_get();
  public static readonly int GL_DRAW_BUFFER14 = libtischPINVOKE.GL_DRAW_BUFFER14_get();
  public static readonly int GL_DRAW_BUFFER15 = libtischPINVOKE.GL_DRAW_BUFFER15_get();
  public static readonly int GL_BLEND_EQUATION_ALPHA = libtischPINVOKE.GL_BLEND_EQUATION_ALPHA_get();
  public static readonly int GL_MAX_VERTEX_ATTRIBS = libtischPINVOKE.GL_MAX_VERTEX_ATTRIBS_get();
  public static readonly int GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = libtischPINVOKE.GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_get();
  public static readonly int GL_MAX_TEXTURE_IMAGE_UNITS = libtischPINVOKE.GL_MAX_TEXTURE_IMAGE_UNITS_get();
  public static readonly int GL_FRAGMENT_SHADER = libtischPINVOKE.GL_FRAGMENT_SHADER_get();
  public static readonly int GL_VERTEX_SHADER = libtischPINVOKE.GL_VERTEX_SHADER_get();
  public static readonly int GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = libtischPINVOKE.GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_get();
  public static readonly int GL_MAX_VERTEX_UNIFORM_COMPONENTS = libtischPINVOKE.GL_MAX_VERTEX_UNIFORM_COMPONENTS_get();
  public static readonly int GL_MAX_VARYING_FLOATS = libtischPINVOKE.GL_MAX_VARYING_FLOATS_get();
  public static readonly int GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = libtischPINVOKE.GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_get();
  public static readonly int GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = libtischPINVOKE.GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_get();
  public static readonly int GL_SHADER_TYPE = libtischPINVOKE.GL_SHADER_TYPE_get();
  public static readonly int GL_FLOAT_VEC2 = libtischPINVOKE.GL_FLOAT_VEC2_get();
  public static readonly int GL_FLOAT_VEC3 = libtischPINVOKE.GL_FLOAT_VEC3_get();
  public static readonly int GL_FLOAT_VEC4 = libtischPINVOKE.GL_FLOAT_VEC4_get();
  public static readonly int GL_INT_VEC2 = libtischPINVOKE.GL_INT_VEC2_get();
  public static readonly int GL_INT_VEC3 = libtischPINVOKE.GL_INT_VEC3_get();
  public static readonly int GL_INT_VEC4 = libtischPINVOKE.GL_INT_VEC4_get();
  public static readonly int GL_BOOL = libtischPINVOKE.GL_BOOL_get();
  public static readonly int GL_BOOL_VEC2 = libtischPINVOKE.GL_BOOL_VEC2_get();
  public static readonly int GL_BOOL_VEC3 = libtischPINVOKE.GL_BOOL_VEC3_get();
  public static readonly int GL_BOOL_VEC4 = libtischPINVOKE.GL_BOOL_VEC4_get();
  public static readonly int GL_FLOAT_MAT2 = libtischPINVOKE.GL_FLOAT_MAT2_get();
  public static readonly int GL_FLOAT_MAT3 = libtischPINVOKE.GL_FLOAT_MAT3_get();
  public static readonly int GL_FLOAT_MAT4 = libtischPINVOKE.GL_FLOAT_MAT4_get();
  public static readonly int GL_SAMPLER_1D = libtischPINVOKE.GL_SAMPLER_1D_get();
  public static readonly int GL_SAMPLER_2D = libtischPINVOKE.GL_SAMPLER_2D_get();
  public static readonly int GL_SAMPLER_3D = libtischPINVOKE.GL_SAMPLER_3D_get();
  public static readonly int GL_SAMPLER_CUBE = libtischPINVOKE.GL_SAMPLER_CUBE_get();
  public static readonly int GL_SAMPLER_1D_SHADOW = libtischPINVOKE.GL_SAMPLER_1D_SHADOW_get();
  public static readonly int GL_SAMPLER_2D_SHADOW = libtischPINVOKE.GL_SAMPLER_2D_SHADOW_get();
  public static readonly int GL_DELETE_STATUS = libtischPINVOKE.GL_DELETE_STATUS_get();
  public static readonly int GL_COMPILE_STATUS = libtischPINVOKE.GL_COMPILE_STATUS_get();
  public static readonly int GL_LINK_STATUS = libtischPINVOKE.GL_LINK_STATUS_get();
  public static readonly int GL_VALIDATE_STATUS = libtischPINVOKE.GL_VALIDATE_STATUS_get();
  public static readonly int GL_INFO_LOG_LENGTH = libtischPINVOKE.GL_INFO_LOG_LENGTH_get();
  public static readonly int GL_ATTACHED_SHADERS = libtischPINVOKE.GL_ATTACHED_SHADERS_get();
  public static readonly int GL_ACTIVE_UNIFORMS = libtischPINVOKE.GL_ACTIVE_UNIFORMS_get();
  public static readonly int GL_ACTIVE_UNIFORM_MAX_LENGTH = libtischPINVOKE.GL_ACTIVE_UNIFORM_MAX_LENGTH_get();
  public static readonly int GL_SHADER_SOURCE_LENGTH = libtischPINVOKE.GL_SHADER_SOURCE_LENGTH_get();
  public static readonly int GL_ACTIVE_ATTRIBUTES = libtischPINVOKE.GL_ACTIVE_ATTRIBUTES_get();
  public static readonly int GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = libtischPINVOKE.GL_ACTIVE_ATTRIBUTE_MAX_LENGTH_get();
  public static readonly int GL_FRAGMENT_SHADER_DERIVATIVE_HINT = libtischPINVOKE.GL_FRAGMENT_SHADER_DERIVATIVE_HINT_get();
  public static readonly int GL_SHADING_LANGUAGE_VERSION = libtischPINVOKE.GL_SHADING_LANGUAGE_VERSION_get();
  public static readonly int GL_CURRENT_PROGRAM = libtischPINVOKE.GL_CURRENT_PROGRAM_get();
  public static readonly int GL_POINT_SPRITE_COORD_ORIGIN = libtischPINVOKE.GL_POINT_SPRITE_COORD_ORIGIN_get();
  public static readonly int GL_LOWER_LEFT = libtischPINVOKE.GL_LOWER_LEFT_get();
  public static readonly int GL_UPPER_LEFT = libtischPINVOKE.GL_UPPER_LEFT_get();
  public static readonly int GL_STENCIL_BACK_REF = libtischPINVOKE.GL_STENCIL_BACK_REF_get();
  public static readonly int GL_STENCIL_BACK_VALUE_MASK = libtischPINVOKE.GL_STENCIL_BACK_VALUE_MASK_get();
  public static readonly int GL_STENCIL_BACK_WRITEMASK = libtischPINVOKE.GL_STENCIL_BACK_WRITEMASK_get();
  public static readonly int GL_VERTEX_PROGRAM_TWO_SIDE = libtischPINVOKE.GL_VERTEX_PROGRAM_TWO_SIDE_get();
  public static readonly int GL_POINT_SPRITE = libtischPINVOKE.GL_POINT_SPRITE_get();
  public static readonly int GL_COORD_REPLACE = libtischPINVOKE.GL_COORD_REPLACE_get();
  public static readonly int GL_MAX_TEXTURE_COORDS = libtischPINVOKE.GL_MAX_TEXTURE_COORDS_get();
  public static readonly int GL_PIXEL_PACK_BUFFER = libtischPINVOKE.GL_PIXEL_PACK_BUFFER_get();
  public static readonly int GL_PIXEL_UNPACK_BUFFER = libtischPINVOKE.GL_PIXEL_UNPACK_BUFFER_get();
  public static readonly int GL_PIXEL_PACK_BUFFER_BINDING = libtischPINVOKE.GL_PIXEL_PACK_BUFFER_BINDING_get();
  public static readonly int GL_PIXEL_UNPACK_BUFFER_BINDING = libtischPINVOKE.GL_PIXEL_UNPACK_BUFFER_BINDING_get();
  public static readonly int GL_FLOAT_MAT2x3 = libtischPINVOKE.GL_FLOAT_MAT2x3_get();
  public static readonly int GL_FLOAT_MAT2x4 = libtischPINVOKE.GL_FLOAT_MAT2x4_get();
  public static readonly int GL_FLOAT_MAT3x2 = libtischPINVOKE.GL_FLOAT_MAT3x2_get();
  public static readonly int GL_FLOAT_MAT3x4 = libtischPINVOKE.GL_FLOAT_MAT3x4_get();
  public static readonly int GL_FLOAT_MAT4x2 = libtischPINVOKE.GL_FLOAT_MAT4x2_get();
  public static readonly int GL_FLOAT_MAT4x3 = libtischPINVOKE.GL_FLOAT_MAT4x3_get();
  public static readonly int GL_SRGB = libtischPINVOKE.GL_SRGB_get();
  public static readonly int GL_SRGB8 = libtischPINVOKE.GL_SRGB8_get();
  public static readonly int GL_SRGB_ALPHA = libtischPINVOKE.GL_SRGB_ALPHA_get();
  public static readonly int GL_SRGB8_ALPHA8 = libtischPINVOKE.GL_SRGB8_ALPHA8_get();
  public static readonly int GL_COMPRESSED_SRGB = libtischPINVOKE.GL_COMPRESSED_SRGB_get();
  public static readonly int GL_COMPRESSED_SRGB_ALPHA = libtischPINVOKE.GL_COMPRESSED_SRGB_ALPHA_get();
  public static readonly int GL_CURRENT_RASTER_SECONDARY_COLOR = libtischPINVOKE.GL_CURRENT_RASTER_SECONDARY_COLOR_get();
  public static readonly int GL_SLUMINANCE_ALPHA = libtischPINVOKE.GL_SLUMINANCE_ALPHA_get();
  public static readonly int GL_SLUMINANCE8_ALPHA8 = libtischPINVOKE.GL_SLUMINANCE8_ALPHA8_get();
  public static readonly int GL_SLUMINANCE = libtischPINVOKE.GL_SLUMINANCE_get();
  public static readonly int GL_SLUMINANCE8 = libtischPINVOKE.GL_SLUMINANCE8_get();
  public static readonly int GL_COMPRESSED_SLUMINANCE = libtischPINVOKE.GL_COMPRESSED_SLUMINANCE_get();
  public static readonly int GL_COMPRESSED_SLUMINANCE_ALPHA = libtischPINVOKE.GL_COMPRESSED_SLUMINANCE_ALPHA_get();
  public static readonly int GL_COMPARE_REF_TO_TEXTURE = libtischPINVOKE.GL_COMPARE_REF_TO_TEXTURE_get();
  public static readonly int GL_CLIP_DISTANCE0 = libtischPINVOKE.GL_CLIP_DISTANCE0_get();
  public static readonly int GL_CLIP_DISTANCE1 = libtischPINVOKE.GL_CLIP_DISTANCE1_get();
  public static readonly int GL_CLIP_DISTANCE2 = libtischPINVOKE.GL_CLIP_DISTANCE2_get();
  public static readonly int GL_CLIP_DISTANCE3 = libtischPINVOKE.GL_CLIP_DISTANCE3_get();
  public static readonly int GL_CLIP_DISTANCE4 = libtischPINVOKE.GL_CLIP_DISTANCE4_get();
  public static readonly int GL_CLIP_DISTANCE5 = libtischPINVOKE.GL_CLIP_DISTANCE5_get();
  public static readonly int GL_CLIP_DISTANCE6 = libtischPINVOKE.GL_CLIP_DISTANCE6_get();
  public static readonly int GL_CLIP_DISTANCE7 = libtischPINVOKE.GL_CLIP_DISTANCE7_get();
  public static readonly int GL_MAX_CLIP_DISTANCES = libtischPINVOKE.GL_MAX_CLIP_DISTANCES_get();
  public static readonly int GL_MAJOR_VERSION = libtischPINVOKE.GL_MAJOR_VERSION_get();
  public static readonly int GL_MINOR_VERSION = libtischPINVOKE.GL_MINOR_VERSION_get();
  public static readonly int GL_NUM_EXTENSIONS = libtischPINVOKE.GL_NUM_EXTENSIONS_get();
  public static readonly int GL_CONTEXT_FLAGS = libtischPINVOKE.GL_CONTEXT_FLAGS_get();
  public static readonly int GL_DEPTH_BUFFER = libtischPINVOKE.GL_DEPTH_BUFFER_get();
  public static readonly int GL_STENCIL_BUFFER = libtischPINVOKE.GL_STENCIL_BUFFER_get();
  public static readonly int GL_COMPRESSED_RED = libtischPINVOKE.GL_COMPRESSED_RED_get();
  public static readonly int GL_COMPRESSED_RG = libtischPINVOKE.GL_COMPRESSED_RG_get();
  public static readonly int GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = libtischPINVOKE.GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT_get();
  public static readonly int GL_RGBA32F = libtischPINVOKE.GL_RGBA32F_get();
  public static readonly int GL_RGB32F = libtischPINVOKE.GL_RGB32F_get();
  public static readonly int GL_RGBA16F = libtischPINVOKE.GL_RGBA16F_get();
  public static readonly int GL_RGB16F = libtischPINVOKE.GL_RGB16F_get();
  public static readonly int GL_VERTEX_ATTRIB_ARRAY_INTEGER = libtischPINVOKE.GL_VERTEX_ATTRIB_ARRAY_INTEGER_get();
  public static readonly int GL_MAX_ARRAY_TEXTURE_LAYERS = libtischPINVOKE.GL_MAX_ARRAY_TEXTURE_LAYERS_get();
  public static readonly int GL_MIN_PROGRAM_TEXEL_OFFSET = libtischPINVOKE.GL_MIN_PROGRAM_TEXEL_OFFSET_get();
  public static readonly int GL_MAX_PROGRAM_TEXEL_OFFSET = libtischPINVOKE.GL_MAX_PROGRAM_TEXEL_OFFSET_get();
  public static readonly int GL_CLAMP_READ_COLOR = libtischPINVOKE.GL_CLAMP_READ_COLOR_get();
  public static readonly int GL_FIXED_ONLY = libtischPINVOKE.GL_FIXED_ONLY_get();
  public static readonly int GL_MAX_VARYING_COMPONENTS = libtischPINVOKE.GL_MAX_VARYING_COMPONENTS_get();
  public static readonly int GL_TEXTURE_1D_ARRAY = libtischPINVOKE.GL_TEXTURE_1D_ARRAY_get();
  public static readonly int GL_PROXY_TEXTURE_1D_ARRAY = libtischPINVOKE.GL_PROXY_TEXTURE_1D_ARRAY_get();
  public static readonly int GL_TEXTURE_2D_ARRAY = libtischPINVOKE.GL_TEXTURE_2D_ARRAY_get();
  public static readonly int GL_PROXY_TEXTURE_2D_ARRAY = libtischPINVOKE.GL_PROXY_TEXTURE_2D_ARRAY_get();
  public static readonly int GL_TEXTURE_BINDING_1D_ARRAY = libtischPINVOKE.GL_TEXTURE_BINDING_1D_ARRAY_get();
  public static readonly int GL_TEXTURE_BINDING_2D_ARRAY = libtischPINVOKE.GL_TEXTURE_BINDING_2D_ARRAY_get();
  public static readonly int GL_R11F_G11F_B10F = libtischPINVOKE.GL_R11F_G11F_B10F_get();
  public static readonly int GL_UNSIGNED_INT_10F_11F_11F_REV = libtischPINVOKE.GL_UNSIGNED_INT_10F_11F_11F_REV_get();
  public static readonly int GL_RGB9_E5 = libtischPINVOKE.GL_RGB9_E5_get();
  public static readonly int GL_UNSIGNED_INT_5_9_9_9_REV = libtischPINVOKE.GL_UNSIGNED_INT_5_9_9_9_REV_get();
  public static readonly int GL_TEXTURE_SHARED_SIZE = libtischPINVOKE.GL_TEXTURE_SHARED_SIZE_get();
  public static readonly int GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = libtischPINVOKE.GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_get();
  public static readonly int GL_TRANSFORM_FEEDBACK_BUFFER_MODE = libtischPINVOKE.GL_TRANSFORM_FEEDBACK_BUFFER_MODE_get();
  public static readonly int GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = libtischPINVOKE.GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_get();
  public static readonly int GL_TRANSFORM_FEEDBACK_VARYINGS = libtischPINVOKE.GL_TRANSFORM_FEEDBACK_VARYINGS_get();
  public static readonly int GL_TRANSFORM_FEEDBACK_BUFFER_START = libtischPINVOKE.GL_TRANSFORM_FEEDBACK_BUFFER_START_get();
  public static readonly int GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = libtischPINVOKE.GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_get();
  public static readonly int GL_PRIMITIVES_GENERATED = libtischPINVOKE.GL_PRIMITIVES_GENERATED_get();
  public static readonly int GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = libtischPINVOKE.GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_get();
  public static readonly int GL_RASTERIZER_DISCARD = libtischPINVOKE.GL_RASTERIZER_DISCARD_get();
  public static readonly int GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = libtischPINVOKE.GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_get();
  public static readonly int GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = libtischPINVOKE.GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_get();
  public static readonly int GL_INTERLEAVED_ATTRIBS = libtischPINVOKE.GL_INTERLEAVED_ATTRIBS_get();
  public static readonly int GL_SEPARATE_ATTRIBS = libtischPINVOKE.GL_SEPARATE_ATTRIBS_get();
  public static readonly int GL_TRANSFORM_FEEDBACK_BUFFER = libtischPINVOKE.GL_TRANSFORM_FEEDBACK_BUFFER_get();
  public static readonly int GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = libtischPINVOKE.GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_get();
  public static readonly int GL_RGBA32UI = libtischPINVOKE.GL_RGBA32UI_get();
  public static readonly int GL_RGB32UI = libtischPINVOKE.GL_RGB32UI_get();
  public static readonly int GL_RGBA16UI = libtischPINVOKE.GL_RGBA16UI_get();
  public static readonly int GL_RGB16UI = libtischPINVOKE.GL_RGB16UI_get();
  public static readonly int GL_RGBA8UI = libtischPINVOKE.GL_RGBA8UI_get();
  public static readonly int GL_RGB8UI = libtischPINVOKE.GL_RGB8UI_get();
  public static readonly int GL_RGBA32I = libtischPINVOKE.GL_RGBA32I_get();
  public static readonly int GL_RGB32I = libtischPINVOKE.GL_RGB32I_get();
  public static readonly int GL_RGBA16I = libtischPINVOKE.GL_RGBA16I_get();
  public static readonly int GL_RGB16I = libtischPINVOKE.GL_RGB16I_get();
  public static readonly int GL_RGBA8I = libtischPINVOKE.GL_RGBA8I_get();
  public static readonly int GL_RGB8I = libtischPINVOKE.GL_RGB8I_get();
  public static readonly int GL_RED_INTEGER = libtischPINVOKE.GL_RED_INTEGER_get();
  public static readonly int GL_GREEN_INTEGER = libtischPINVOKE.GL_GREEN_INTEGER_get();
  public static readonly int GL_BLUE_INTEGER = libtischPINVOKE.GL_BLUE_INTEGER_get();
  public static readonly int GL_RGB_INTEGER = libtischPINVOKE.GL_RGB_INTEGER_get();
  public static readonly int GL_RGBA_INTEGER = libtischPINVOKE.GL_RGBA_INTEGER_get();
  public static readonly int GL_BGR_INTEGER = libtischPINVOKE.GL_BGR_INTEGER_get();
  public static readonly int GL_BGRA_INTEGER = libtischPINVOKE.GL_BGRA_INTEGER_get();
  public static readonly int GL_SAMPLER_1D_ARRAY = libtischPINVOKE.GL_SAMPLER_1D_ARRAY_get();
  public static readonly int GL_SAMPLER_2D_ARRAY = libtischPINVOKE.GL_SAMPLER_2D_ARRAY_get();
  public static readonly int GL_SAMPLER_1D_ARRAY_SHADOW = libtischPINVOKE.GL_SAMPLER_1D_ARRAY_SHADOW_get();
  public static readonly int GL_SAMPLER_2D_ARRAY_SHADOW = libtischPINVOKE.GL_SAMPLER_2D_ARRAY_SHADOW_get();
  public static readonly int GL_SAMPLER_CUBE_SHADOW = libtischPINVOKE.GL_SAMPLER_CUBE_SHADOW_get();
  public static readonly int GL_UNSIGNED_INT_VEC2 = libtischPINVOKE.GL_UNSIGNED_INT_VEC2_get();
  public static readonly int GL_UNSIGNED_INT_VEC3 = libtischPINVOKE.GL_UNSIGNED_INT_VEC3_get();
  public static readonly int GL_UNSIGNED_INT_VEC4 = libtischPINVOKE.GL_UNSIGNED_INT_VEC4_get();
  public static readonly int GL_INT_SAMPLER_1D = libtischPINVOKE.GL_INT_SAMPLER_1D_get();
  public static readonly int GL_INT_SAMPLER_2D = libtischPINVOKE.GL_INT_SAMPLER_2D_get();
  public static readonly int GL_INT_SAMPLER_3D = libtischPINVOKE.GL_INT_SAMPLER_3D_get();
  public static readonly int GL_INT_SAMPLER_CUBE = libtischPINVOKE.GL_INT_SAMPLER_CUBE_get();
  public static readonly int GL_INT_SAMPLER_1D_ARRAY = libtischPINVOKE.GL_INT_SAMPLER_1D_ARRAY_get();
  public static readonly int GL_INT_SAMPLER_2D_ARRAY = libtischPINVOKE.GL_INT_SAMPLER_2D_ARRAY_get();
  public static readonly int GL_UNSIGNED_INT_SAMPLER_1D = libtischPINVOKE.GL_UNSIGNED_INT_SAMPLER_1D_get();
  public static readonly int GL_UNSIGNED_INT_SAMPLER_2D = libtischPINVOKE.GL_UNSIGNED_INT_SAMPLER_2D_get();
  public static readonly int GL_UNSIGNED_INT_SAMPLER_3D = libtischPINVOKE.GL_UNSIGNED_INT_SAMPLER_3D_get();
  public static readonly int GL_UNSIGNED_INT_SAMPLER_CUBE = libtischPINVOKE.GL_UNSIGNED_INT_SAMPLER_CUBE_get();
  public static readonly int GL_UNSIGNED_INT_SAMPLER_1D_ARRAY = libtischPINVOKE.GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_get();
  public static readonly int GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = libtischPINVOKE.GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_get();
  public static readonly int GL_QUERY_WAIT = libtischPINVOKE.GL_QUERY_WAIT_get();
  public static readonly int GL_QUERY_NO_WAIT = libtischPINVOKE.GL_QUERY_NO_WAIT_get();
  public static readonly int GL_QUERY_BY_REGION_WAIT = libtischPINVOKE.GL_QUERY_BY_REGION_WAIT_get();
  public static readonly int GL_QUERY_BY_REGION_NO_WAIT = libtischPINVOKE.GL_QUERY_BY_REGION_NO_WAIT_get();
  public static readonly int GL_BUFFER_ACCESS_FLAGS = libtischPINVOKE.GL_BUFFER_ACCESS_FLAGS_get();
  public static readonly int GL_BUFFER_MAP_LENGTH = libtischPINVOKE.GL_BUFFER_MAP_LENGTH_get();
  public static readonly int GL_BUFFER_MAP_OFFSET = libtischPINVOKE.GL_BUFFER_MAP_OFFSET_get();
  public static readonly int GL_CLAMP_VERTEX_COLOR = libtischPINVOKE.GL_CLAMP_VERTEX_COLOR_get();
  public static readonly int GL_CLAMP_FRAGMENT_COLOR = libtischPINVOKE.GL_CLAMP_FRAGMENT_COLOR_get();
  public static readonly int GL_ALPHA_INTEGER = libtischPINVOKE.GL_ALPHA_INTEGER_get();
  public static readonly int GL_SAMPLER_2D_RECT = libtischPINVOKE.GL_SAMPLER_2D_RECT_get();
  public static readonly int GL_SAMPLER_2D_RECT_SHADOW = libtischPINVOKE.GL_SAMPLER_2D_RECT_SHADOW_get();
  public static readonly int GL_SAMPLER_BUFFER = libtischPINVOKE.GL_SAMPLER_BUFFER_get();
  public static readonly int GL_INT_SAMPLER_2D_RECT = libtischPINVOKE.GL_INT_SAMPLER_2D_RECT_get();
  public static readonly int GL_INT_SAMPLER_BUFFER = libtischPINVOKE.GL_INT_SAMPLER_BUFFER_get();
  public static readonly int GL_UNSIGNED_INT_SAMPLER_2D_RECT = libtischPINVOKE.GL_UNSIGNED_INT_SAMPLER_2D_RECT_get();
  public static readonly int GL_UNSIGNED_INT_SAMPLER_BUFFER = libtischPINVOKE.GL_UNSIGNED_INT_SAMPLER_BUFFER_get();
  public static readonly int GL_TEXTURE_BUFFER = libtischPINVOKE.GL_TEXTURE_BUFFER_get();
  public static readonly int GL_MAX_TEXTURE_BUFFER_SIZE = libtischPINVOKE.GL_MAX_TEXTURE_BUFFER_SIZE_get();
  public static readonly int GL_TEXTURE_BINDING_BUFFER = libtischPINVOKE.GL_TEXTURE_BINDING_BUFFER_get();
  public static readonly int GL_TEXTURE_BUFFER_DATA_STORE_BINDING = libtischPINVOKE.GL_TEXTURE_BUFFER_DATA_STORE_BINDING_get();
  public static readonly int GL_TEXTURE_BUFFER_FORMAT = libtischPINVOKE.GL_TEXTURE_BUFFER_FORMAT_get();
  public static readonly int GL_TEXTURE_RECTANGLE = libtischPINVOKE.GL_TEXTURE_RECTANGLE_get();
  public static readonly int GL_TEXTURE_BINDING_RECTANGLE = libtischPINVOKE.GL_TEXTURE_BINDING_RECTANGLE_get();
  public static readonly int GL_PROXY_TEXTURE_RECTANGLE = libtischPINVOKE.GL_PROXY_TEXTURE_RECTANGLE_get();
  public static readonly int GL_MAX_RECTANGLE_TEXTURE_SIZE = libtischPINVOKE.GL_MAX_RECTANGLE_TEXTURE_SIZE_get();
  public static readonly int GL_RED_SNORM = libtischPINVOKE.GL_RED_SNORM_get();
  public static readonly int GL_RG_SNORM = libtischPINVOKE.GL_RG_SNORM_get();
  public static readonly int GL_RGB_SNORM = libtischPINVOKE.GL_RGB_SNORM_get();
  public static readonly int GL_RGBA_SNORM = libtischPINVOKE.GL_RGBA_SNORM_get();
  public static readonly int GL_R8_SNORM = libtischPINVOKE.GL_R8_SNORM_get();
  public static readonly int GL_RG8_SNORM = libtischPINVOKE.GL_RG8_SNORM_get();
  public static readonly int GL_RGB8_SNORM = libtischPINVOKE.GL_RGB8_SNORM_get();
  public static readonly int GL_RGBA8_SNORM = libtischPINVOKE.GL_RGBA8_SNORM_get();
  public static readonly int GL_R16_SNORM = libtischPINVOKE.GL_R16_SNORM_get();
  public static readonly int GL_RG16_SNORM = libtischPINVOKE.GL_RG16_SNORM_get();
  public static readonly int GL_RGB16_SNORM = libtischPINVOKE.GL_RGB16_SNORM_get();
  public static readonly int GL_RGBA16_SNORM = libtischPINVOKE.GL_RGBA16_SNORM_get();
  public static readonly int GL_SIGNED_NORMALIZED = libtischPINVOKE.GL_SIGNED_NORMALIZED_get();
  public static readonly int GL_PRIMITIVE_RESTART = libtischPINVOKE.GL_PRIMITIVE_RESTART_get();
  public static readonly int GL_PRIMITIVE_RESTART_INDEX = libtischPINVOKE.GL_PRIMITIVE_RESTART_INDEX_get();
  public static readonly int GL_CONTEXT_CORE_PROFILE_BIT = libtischPINVOKE.GL_CONTEXT_CORE_PROFILE_BIT_get();
  public static readonly int GL_CONTEXT_COMPATIBILITY_PROFILE_BIT = libtischPINVOKE.GL_CONTEXT_COMPATIBILITY_PROFILE_BIT_get();
  public static readonly int GL_LINES_ADJACENCY = libtischPINVOKE.GL_LINES_ADJACENCY_get();
  public static readonly int GL_LINE_STRIP_ADJACENCY = libtischPINVOKE.GL_LINE_STRIP_ADJACENCY_get();
  public static readonly int GL_TRIANGLES_ADJACENCY = libtischPINVOKE.GL_TRIANGLES_ADJACENCY_get();
  public static readonly int GL_TRIANGLE_STRIP_ADJACENCY = libtischPINVOKE.GL_TRIANGLE_STRIP_ADJACENCY_get();
  public static readonly int GL_PROGRAM_POINT_SIZE = libtischPINVOKE.GL_PROGRAM_POINT_SIZE_get();
  public static readonly int GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = libtischPINVOKE.GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_get();
  public static readonly int GL_FRAMEBUFFER_ATTACHMENT_LAYERED = libtischPINVOKE.GL_FRAMEBUFFER_ATTACHMENT_LAYERED_get();
  public static readonly int GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = libtischPINVOKE.GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_get();
  public static readonly int GL_GEOMETRY_SHADER = libtischPINVOKE.GL_GEOMETRY_SHADER_get();
  public static readonly int GL_GEOMETRY_VERTICES_OUT = libtischPINVOKE.GL_GEOMETRY_VERTICES_OUT_get();
  public static readonly int GL_GEOMETRY_INPUT_TYPE = libtischPINVOKE.GL_GEOMETRY_INPUT_TYPE_get();
  public static readonly int GL_GEOMETRY_OUTPUT_TYPE = libtischPINVOKE.GL_GEOMETRY_OUTPUT_TYPE_get();
  public static readonly int GL_MAX_GEOMETRY_UNIFORM_COMPONENTS = libtischPINVOKE.GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_get();
  public static readonly int GL_MAX_GEOMETRY_OUTPUT_VERTICES = libtischPINVOKE.GL_MAX_GEOMETRY_OUTPUT_VERTICES_get();
  public static readonly int GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = libtischPINVOKE.GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_get();
  public static readonly int GL_MAX_VERTEX_OUTPUT_COMPONENTS = libtischPINVOKE.GL_MAX_VERTEX_OUTPUT_COMPONENTS_get();
  public static readonly int GL_MAX_GEOMETRY_INPUT_COMPONENTS = libtischPINVOKE.GL_MAX_GEOMETRY_INPUT_COMPONENTS_get();
  public static readonly int GL_MAX_GEOMETRY_OUTPUT_COMPONENTS = libtischPINVOKE.GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_get();
  public static readonly int GL_MAX_FRAGMENT_INPUT_COMPONENTS = libtischPINVOKE.GL_MAX_FRAGMENT_INPUT_COMPONENTS_get();
  public static readonly int GL_CONTEXT_PROFILE_MASK = libtischPINVOKE.GL_CONTEXT_PROFILE_MASK_get();
  public static readonly int GL_TEXTURE0_ARB = libtischPINVOKE.GL_TEXTURE0_ARB_get();
  public static readonly int GL_TEXTURE1_ARB = libtischPINVOKE.GL_TEXTURE1_ARB_get();
  public static readonly int GL_TEXTURE2_ARB = libtischPINVOKE.GL_TEXTURE2_ARB_get();
  public static readonly int GL_TEXTURE3_ARB = libtischPINVOKE.GL_TEXTURE3_ARB_get();
  public static readonly int GL_TEXTURE4_ARB = libtischPINVOKE.GL_TEXTURE4_ARB_get();
  public static readonly int GL_TEXTURE5_ARB = libtischPINVOKE.GL_TEXTURE5_ARB_get();
  public static readonly int GL_TEXTURE6_ARB = libtischPINVOKE.GL_TEXTURE6_ARB_get();
  public static readonly int GL_TEXTURE7_ARB = libtischPINVOKE.GL_TEXTURE7_ARB_get();
  public static readonly int GL_TEXTURE8_ARB = libtischPINVOKE.GL_TEXTURE8_ARB_get();
  public static readonly int GL_TEXTURE9_ARB = libtischPINVOKE.GL_TEXTURE9_ARB_get();
  public static readonly int GL_TEXTURE10_ARB = libtischPINVOKE.GL_TEXTURE10_ARB_get();
  public static readonly int GL_TEXTURE11_ARB = libtischPINVOKE.GL_TEXTURE11_ARB_get();
  public static readonly int GL_TEXTURE12_ARB = libtischPINVOKE.GL_TEXTURE12_ARB_get();
  public static readonly int GL_TEXTURE13_ARB = libtischPINVOKE.GL_TEXTURE13_ARB_get();
  public static readonly int GL_TEXTURE14_ARB = libtischPINVOKE.GL_TEXTURE14_ARB_get();
  public static readonly int GL_TEXTURE15_ARB = libtischPINVOKE.GL_TEXTURE15_ARB_get();
  public static readonly int GL_TEXTURE16_ARB = libtischPINVOKE.GL_TEXTURE16_ARB_get();
  public static readonly int GL_TEXTURE17_ARB = libtischPINVOKE.GL_TEXTURE17_ARB_get();
  public static readonly int GL_TEXTURE18_ARB = libtischPINVOKE.GL_TEXTURE18_ARB_get();
  public static readonly int GL_TEXTURE19_ARB = libtischPINVOKE.GL_TEXTURE19_ARB_get();
  public static readonly int GL_TEXTURE20_ARB = libtischPINVOKE.GL_TEXTURE20_ARB_get();
  public static readonly int GL_TEXTURE21_ARB = libtischPINVOKE.GL_TEXTURE21_ARB_get();
  public static readonly int GL_TEXTURE22_ARB = libtischPINVOKE.GL_TEXTURE22_ARB_get();
  public static readonly int GL_TEXTURE23_ARB = libtischPINVOKE.GL_TEXTURE23_ARB_get();
  public static readonly int GL_TEXTURE24_ARB = libtischPINVOKE.GL_TEXTURE24_ARB_get();
  public static readonly int GL_TEXTURE25_ARB = libtischPINVOKE.GL_TEXTURE25_ARB_get();
  public static readonly int GL_TEXTURE26_ARB = libtischPINVOKE.GL_TEXTURE26_ARB_get();
  public static readonly int GL_TEXTURE27_ARB = libtischPINVOKE.GL_TEXTURE27_ARB_get();
  public static readonly int GL_TEXTURE28_ARB = libtischPINVOKE.GL_TEXTURE28_ARB_get();
  public static readonly int GL_TEXTURE29_ARB = libtischPINVOKE.GL_TEXTURE29_ARB_get();
  public static readonly int GL_TEXTURE30_ARB = libtischPINVOKE.GL_TEXTURE30_ARB_get();
  public static readonly int GL_TEXTURE31_ARB = libtischPINVOKE.GL_TEXTURE31_ARB_get();
  public static readonly int GL_ACTIVE_TEXTURE_ARB = libtischPINVOKE.GL_ACTIVE_TEXTURE_ARB_get();
  public static readonly int GL_CLIENT_ACTIVE_TEXTURE_ARB = libtischPINVOKE.GL_CLIENT_ACTIVE_TEXTURE_ARB_get();
  public static readonly int GL_MAX_TEXTURE_UNITS_ARB = libtischPINVOKE.GL_MAX_TEXTURE_UNITS_ARB_get();
  public static readonly int GL_TRANSPOSE_MODELVIEW_MATRIX_ARB = libtischPINVOKE.GL_TRANSPOSE_MODELVIEW_MATRIX_ARB_get();
  public static readonly int GL_TRANSPOSE_PROJECTION_MATRIX_ARB = libtischPINVOKE.GL_TRANSPOSE_PROJECTION_MATRIX_ARB_get();
  public static readonly int GL_TRANSPOSE_TEXTURE_MATRIX_ARB = libtischPINVOKE.GL_TRANSPOSE_TEXTURE_MATRIX_ARB_get();
  public static readonly int GL_TRANSPOSE_COLOR_MATRIX_ARB = libtischPINVOKE.GL_TRANSPOSE_COLOR_MATRIX_ARB_get();
  public static readonly int GL_MULTISAMPLE_ARB = libtischPINVOKE.GL_MULTISAMPLE_ARB_get();
  public static readonly int GL_SAMPLE_ALPHA_TO_COVERAGE_ARB = libtischPINVOKE.GL_SAMPLE_ALPHA_TO_COVERAGE_ARB_get();
  public static readonly int GL_SAMPLE_ALPHA_TO_ONE_ARB = libtischPINVOKE.GL_SAMPLE_ALPHA_TO_ONE_ARB_get();
  public static readonly int GL_SAMPLE_COVERAGE_ARB = libtischPINVOKE.GL_SAMPLE_COVERAGE_ARB_get();
  public static readonly int GL_SAMPLE_BUFFERS_ARB = libtischPINVOKE.GL_SAMPLE_BUFFERS_ARB_get();
  public static readonly int GL_SAMPLES_ARB = libtischPINVOKE.GL_SAMPLES_ARB_get();
  public static readonly int GL_SAMPLE_COVERAGE_VALUE_ARB = libtischPINVOKE.GL_SAMPLE_COVERAGE_VALUE_ARB_get();
  public static readonly int GL_SAMPLE_COVERAGE_INVERT_ARB = libtischPINVOKE.GL_SAMPLE_COVERAGE_INVERT_ARB_get();
  public static readonly int GL_MULTISAMPLE_BIT_ARB = libtischPINVOKE.GL_MULTISAMPLE_BIT_ARB_get();
  public static readonly int GL_NORMAL_MAP_ARB = libtischPINVOKE.GL_NORMAL_MAP_ARB_get();
  public static readonly int GL_REFLECTION_MAP_ARB = libtischPINVOKE.GL_REFLECTION_MAP_ARB_get();
  public static readonly int GL_TEXTURE_CUBE_MAP_ARB = libtischPINVOKE.GL_TEXTURE_CUBE_MAP_ARB_get();
  public static readonly int GL_TEXTURE_BINDING_CUBE_MAP_ARB = libtischPINVOKE.GL_TEXTURE_BINDING_CUBE_MAP_ARB_get();
  public static readonly int GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB = libtischPINVOKE.GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB_get();
  public static readonly int GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB = libtischPINVOKE.GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB_get();
  public static readonly int GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB = libtischPINVOKE.GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB_get();
  public static readonly int GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB = libtischPINVOKE.GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB_get();
  public static readonly int GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB = libtischPINVOKE.GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB_get();
  public static readonly int GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB = libtischPINVOKE.GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB_get();
  public static readonly int GL_PROXY_TEXTURE_CUBE_MAP_ARB = libtischPINVOKE.GL_PROXY_TEXTURE_CUBE_MAP_ARB_get();
  public static readonly int GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB = libtischPINVOKE.GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB_get();
  public static readonly int GL_COMPRESSED_ALPHA_ARB = libtischPINVOKE.GL_COMPRESSED_ALPHA_ARB_get();
  public static readonly int GL_COMPRESSED_LUMINANCE_ARB = libtischPINVOKE.GL_COMPRESSED_LUMINANCE_ARB_get();
  public static readonly int GL_COMPRESSED_LUMINANCE_ALPHA_ARB = libtischPINVOKE.GL_COMPRESSED_LUMINANCE_ALPHA_ARB_get();
  public static readonly int GL_COMPRESSED_INTENSITY_ARB = libtischPINVOKE.GL_COMPRESSED_INTENSITY_ARB_get();
  public static readonly int GL_COMPRESSED_RGB_ARB = libtischPINVOKE.GL_COMPRESSED_RGB_ARB_get();
  public static readonly int GL_COMPRESSED_RGBA_ARB = libtischPINVOKE.GL_COMPRESSED_RGBA_ARB_get();
  public static readonly int GL_TEXTURE_COMPRESSION_HINT_ARB = libtischPINVOKE.GL_TEXTURE_COMPRESSION_HINT_ARB_get();
  public static readonly int GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB = libtischPINVOKE.GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB_get();
  public static readonly int GL_TEXTURE_COMPRESSED_ARB = libtischPINVOKE.GL_TEXTURE_COMPRESSED_ARB_get();
  public static readonly int GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB = libtischPINVOKE.GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB_get();
  public static readonly int GL_COMPRESSED_TEXTURE_FORMATS_ARB = libtischPINVOKE.GL_COMPRESSED_TEXTURE_FORMATS_ARB_get();
  public static readonly int GL_CLAMP_TO_BORDER_ARB = libtischPINVOKE.GL_CLAMP_TO_BORDER_ARB_get();
  public static readonly int GL_POINT_SIZE_MIN_ARB = libtischPINVOKE.GL_POINT_SIZE_MIN_ARB_get();
  public static readonly int GL_POINT_SIZE_MAX_ARB = libtischPINVOKE.GL_POINT_SIZE_MAX_ARB_get();
  public static readonly int GL_POINT_FADE_THRESHOLD_SIZE_ARB = libtischPINVOKE.GL_POINT_FADE_THRESHOLD_SIZE_ARB_get();
  public static readonly int GL_POINT_DISTANCE_ATTENUATION_ARB = libtischPINVOKE.GL_POINT_DISTANCE_ATTENUATION_ARB_get();
  public static readonly int GL_MAX_VERTEX_UNITS_ARB = libtischPINVOKE.GL_MAX_VERTEX_UNITS_ARB_get();
  public static readonly int GL_ACTIVE_VERTEX_UNITS_ARB = libtischPINVOKE.GL_ACTIVE_VERTEX_UNITS_ARB_get();
  public static readonly int GL_WEIGHT_SUM_UNITY_ARB = libtischPINVOKE.GL_WEIGHT_SUM_UNITY_ARB_get();
  public static readonly int GL_VERTEX_BLEND_ARB = libtischPINVOKE.GL_VERTEX_BLEND_ARB_get();
  public static readonly int GL_CURRENT_WEIGHT_ARB = libtischPINVOKE.GL_CURRENT_WEIGHT_ARB_get();
  public static readonly int GL_WEIGHT_ARRAY_TYPE_ARB = libtischPINVOKE.GL_WEIGHT_ARRAY_TYPE_ARB_get();
  public static readonly int GL_WEIGHT_ARRAY_STRIDE_ARB = libtischPINVOKE.GL_WEIGHT_ARRAY_STRIDE_ARB_get();
  public static readonly int GL_WEIGHT_ARRAY_SIZE_ARB = libtischPINVOKE.GL_WEIGHT_ARRAY_SIZE_ARB_get();
  public static readonly int GL_WEIGHT_ARRAY_POINTER_ARB = libtischPINVOKE.GL_WEIGHT_ARRAY_POINTER_ARB_get();
  public static readonly int GL_WEIGHT_ARRAY_ARB = libtischPINVOKE.GL_WEIGHT_ARRAY_ARB_get();
  public static readonly int GL_MODELVIEW0_ARB = libtischPINVOKE.GL_MODELVIEW0_ARB_get();
  public static readonly int GL_MODELVIEW1_ARB = libtischPINVOKE.GL_MODELVIEW1_ARB_get();
  public static readonly int GL_MODELVIEW2_ARB = libtischPINVOKE.GL_MODELVIEW2_ARB_get();
  public static readonly int GL_MODELVIEW3_ARB = libtischPINVOKE.GL_MODELVIEW3_ARB_get();
  public static readonly int GL_MODELVIEW4_ARB = libtischPINVOKE.GL_MODELVIEW4_ARB_get();
  public static readonly int GL_MODELVIEW5_ARB = libtischPINVOKE.GL_MODELVIEW5_ARB_get();
  public static readonly int GL_MODELVIEW6_ARB = libtischPINVOKE.GL_MODELVIEW6_ARB_get();
  public static readonly int GL_MODELVIEW7_ARB = libtischPINVOKE.GL_MODELVIEW7_ARB_get();
  public static readonly int GL_MODELVIEW8_ARB = libtischPINVOKE.GL_MODELVIEW8_ARB_get();
  public static readonly int GL_MODELVIEW9_ARB = libtischPINVOKE.GL_MODELVIEW9_ARB_get();
  public static readonly int GL_MODELVIEW10_ARB = libtischPINVOKE.GL_MODELVIEW10_ARB_get();
  public static readonly int GL_MODELVIEW11_ARB = libtischPINVOKE.GL_MODELVIEW11_ARB_get();
  public static readonly int GL_MODELVIEW12_ARB = libtischPINVOKE.GL_MODELVIEW12_ARB_get();
  public static readonly int GL_MODELVIEW13_ARB = libtischPINVOKE.GL_MODELVIEW13_ARB_get();
  public static readonly int GL_MODELVIEW14_ARB = libtischPINVOKE.GL_MODELVIEW14_ARB_get();
  public static readonly int GL_MODELVIEW15_ARB = libtischPINVOKE.GL_MODELVIEW15_ARB_get();
  public static readonly int GL_MODELVIEW16_ARB = libtischPINVOKE.GL_MODELVIEW16_ARB_get();
  public static readonly int GL_MODELVIEW17_ARB = libtischPINVOKE.GL_MODELVIEW17_ARB_get();
  public static readonly int GL_MODELVIEW18_ARB = libtischPINVOKE.GL_MODELVIEW18_ARB_get();
  public static readonly int GL_MODELVIEW19_ARB = libtischPINVOKE.GL_MODELVIEW19_ARB_get();
  public static readonly int GL_MODELVIEW20_ARB = libtischPINVOKE.GL_MODELVIEW20_ARB_get();
  public static readonly int GL_MODELVIEW21_ARB = libtischPINVOKE.GL_MODELVIEW21_ARB_get();
  public static readonly int GL_MODELVIEW22_ARB = libtischPINVOKE.GL_MODELVIEW22_ARB_get();
  public static readonly int GL_MODELVIEW23_ARB = libtischPINVOKE.GL_MODELVIEW23_ARB_get();
  public static readonly int GL_MODELVIEW24_ARB = libtischPINVOKE.GL_MODELVIEW24_ARB_get();
  public static readonly int GL_MODELVIEW25_ARB = libtischPINVOKE.GL_MODELVIEW25_ARB_get();
  public static readonly int GL_MODELVIEW26_ARB = libtischPINVOKE.GL_MODELVIEW26_ARB_get();
  public static readonly int GL_MODELVIEW27_ARB = libtischPINVOKE.GL_MODELVIEW27_ARB_get();
  public static readonly int GL_MODELVIEW28_ARB = libtischPINVOKE.GL_MODELVIEW28_ARB_get();
  public static readonly int GL_MODELVIEW29_ARB = libtischPINVOKE.GL_MODELVIEW29_ARB_get();
  public static readonly int GL_MODELVIEW30_ARB = libtischPINVOKE.GL_MODELVIEW30_ARB_get();
  public static readonly int GL_MODELVIEW31_ARB = libtischPINVOKE.GL_MODELVIEW31_ARB_get();
  public static readonly int GL_MATRIX_PALETTE_ARB = libtischPINVOKE.GL_MATRIX_PALETTE_ARB_get();
  public static readonly int GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB = libtischPINVOKE.GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB_get();
  public static readonly int GL_MAX_PALETTE_MATRICES_ARB = libtischPINVOKE.GL_MAX_PALETTE_MATRICES_ARB_get();
  public static readonly int GL_CURRENT_PALETTE_MATRIX_ARB = libtischPINVOKE.GL_CURRENT_PALETTE_MATRIX_ARB_get();
  public static readonly int GL_MATRIX_INDEX_ARRAY_ARB = libtischPINVOKE.GL_MATRIX_INDEX_ARRAY_ARB_get();
  public static readonly int GL_CURRENT_MATRIX_INDEX_ARB = libtischPINVOKE.GL_CURRENT_MATRIX_INDEX_ARB_get();
  public static readonly int GL_MATRIX_INDEX_ARRAY_SIZE_ARB = libtischPINVOKE.GL_MATRIX_INDEX_ARRAY_SIZE_ARB_get();
  public static readonly int GL_MATRIX_INDEX_ARRAY_TYPE_ARB = libtischPINVOKE.GL_MATRIX_INDEX_ARRAY_TYPE_ARB_get();
  public static readonly int GL_MATRIX_INDEX_ARRAY_STRIDE_ARB = libtischPINVOKE.GL_MATRIX_INDEX_ARRAY_STRIDE_ARB_get();
  public static readonly int GL_MATRIX_INDEX_ARRAY_POINTER_ARB = libtischPINVOKE.GL_MATRIX_INDEX_ARRAY_POINTER_ARB_get();
  public static readonly int GL_COMBINE_ARB = libtischPINVOKE.GL_COMBINE_ARB_get();
  public static readonly int GL_COMBINE_RGB_ARB = libtischPINVOKE.GL_COMBINE_RGB_ARB_get();
  public static readonly int GL_COMBINE_ALPHA_ARB = libtischPINVOKE.GL_COMBINE_ALPHA_ARB_get();
  public static readonly int GL_SOURCE0_RGB_ARB = libtischPINVOKE.GL_SOURCE0_RGB_ARB_get();
  public static readonly int GL_SOURCE1_RGB_ARB = libtischPINVOKE.GL_SOURCE1_RGB_ARB_get();
  public static readonly int GL_SOURCE2_RGB_ARB = libtischPINVOKE.GL_SOURCE2_RGB_ARB_get();
  public static readonly int GL_SOURCE0_ALPHA_ARB = libtischPINVOKE.GL_SOURCE0_ALPHA_ARB_get();
  public static readonly int GL_SOURCE1_ALPHA_ARB = libtischPINVOKE.GL_SOURCE1_ALPHA_ARB_get();
  public static readonly int GL_SOURCE2_ALPHA_ARB = libtischPINVOKE.GL_SOURCE2_ALPHA_ARB_get();
  public static readonly int GL_OPERAND0_RGB_ARB = libtischPINVOKE.GL_OPERAND0_RGB_ARB_get();
  public static readonly int GL_OPERAND1_RGB_ARB = libtischPINVOKE.GL_OPERAND1_RGB_ARB_get();
  public static readonly int GL_OPERAND2_RGB_ARB = libtischPINVOKE.GL_OPERAND2_RGB_ARB_get();
  public static readonly int GL_OPERAND0_ALPHA_ARB = libtischPINVOKE.GL_OPERAND0_ALPHA_ARB_get();
  public static readonly int GL_OPERAND1_ALPHA_ARB = libtischPINVOKE.GL_OPERAND1_ALPHA_ARB_get();
  public static readonly int GL_OPERAND2_ALPHA_ARB = libtischPINVOKE.GL_OPERAND2_ALPHA_ARB_get();
  public static readonly int GL_RGB_SCALE_ARB = libtischPINVOKE.GL_RGB_SCALE_ARB_get();
  public static readonly int GL_ADD_SIGNED_ARB = libtischPINVOKE.GL_ADD_SIGNED_ARB_get();
  public static readonly int GL_INTERPOLATE_ARB = libtischPINVOKE.GL_INTERPOLATE_ARB_get();
  public static readonly int GL_SUBTRACT_ARB = libtischPINVOKE.GL_SUBTRACT_ARB_get();
  public static readonly int GL_CONSTANT_ARB = libtischPINVOKE.GL_CONSTANT_ARB_get();
  public static readonly int GL_PRIMARY_COLOR_ARB = libtischPINVOKE.GL_PRIMARY_COLOR_ARB_get();
  public static readonly int GL_PREVIOUS_ARB = libtischPINVOKE.GL_PREVIOUS_ARB_get();
  public static readonly int GL_DOT3_RGB_ARB = libtischPINVOKE.GL_DOT3_RGB_ARB_get();
  public static readonly int GL_DOT3_RGBA_ARB = libtischPINVOKE.GL_DOT3_RGBA_ARB_get();
  public static readonly int GL_MIRRORED_REPEAT_ARB = libtischPINVOKE.GL_MIRRORED_REPEAT_ARB_get();
  public static readonly int GL_DEPTH_COMPONENT16_ARB = libtischPINVOKE.GL_DEPTH_COMPONENT16_ARB_get();
  public static readonly int GL_DEPTH_COMPONENT24_ARB = libtischPINVOKE.GL_DEPTH_COMPONENT24_ARB_get();
  public static readonly int GL_DEPTH_COMPONENT32_ARB = libtischPINVOKE.GL_DEPTH_COMPONENT32_ARB_get();
  public static readonly int GL_TEXTURE_DEPTH_SIZE_ARB = libtischPINVOKE.GL_TEXTURE_DEPTH_SIZE_ARB_get();
  public static readonly int GL_DEPTH_TEXTURE_MODE_ARB = libtischPINVOKE.GL_DEPTH_TEXTURE_MODE_ARB_get();
  public static readonly int GL_TEXTURE_COMPARE_MODE_ARB = libtischPINVOKE.GL_TEXTURE_COMPARE_MODE_ARB_get();
  public static readonly int GL_TEXTURE_COMPARE_FUNC_ARB = libtischPINVOKE.GL_TEXTURE_COMPARE_FUNC_ARB_get();
  public static readonly int GL_COMPARE_R_TO_TEXTURE_ARB = libtischPINVOKE.GL_COMPARE_R_TO_TEXTURE_ARB_get();
  public static readonly int GL_TEXTURE_COMPARE_FAIL_VALUE_ARB = libtischPINVOKE.GL_TEXTURE_COMPARE_FAIL_VALUE_ARB_get();
  public static readonly int GL_COLOR_SUM_ARB = libtischPINVOKE.GL_COLOR_SUM_ARB_get();
  public static readonly int GL_VERTEX_PROGRAM_ARB = libtischPINVOKE.GL_VERTEX_PROGRAM_ARB_get();
  public static readonly int GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB = libtischPINVOKE.GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB_get();
  public static readonly int GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB = libtischPINVOKE.GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB_get();
  public static readonly int GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB = libtischPINVOKE.GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB_get();
  public static readonly int GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB = libtischPINVOKE.GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB_get();
  public static readonly int GL_CURRENT_VERTEX_ATTRIB_ARB = libtischPINVOKE.GL_CURRENT_VERTEX_ATTRIB_ARB_get();
  public static readonly int GL_PROGRAM_LENGTH_ARB = libtischPINVOKE.GL_PROGRAM_LENGTH_ARB_get();
  public static readonly int GL_PROGRAM_STRING_ARB = libtischPINVOKE.GL_PROGRAM_STRING_ARB_get();
  public static readonly int GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB = libtischPINVOKE.GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB_get();
  public static readonly int GL_MAX_PROGRAM_MATRICES_ARB = libtischPINVOKE.GL_MAX_PROGRAM_MATRICES_ARB_get();
  public static readonly int GL_CURRENT_MATRIX_STACK_DEPTH_ARB = libtischPINVOKE.GL_CURRENT_MATRIX_STACK_DEPTH_ARB_get();
  public static readonly int GL_CURRENT_MATRIX_ARB = libtischPINVOKE.GL_CURRENT_MATRIX_ARB_get();
  public static readonly int GL_VERTEX_PROGRAM_POINT_SIZE_ARB = libtischPINVOKE.GL_VERTEX_PROGRAM_POINT_SIZE_ARB_get();
  public static readonly int GL_VERTEX_PROGRAM_TWO_SIDE_ARB = libtischPINVOKE.GL_VERTEX_PROGRAM_TWO_SIDE_ARB_get();
  public static readonly int GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB = libtischPINVOKE.GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB_get();
  public static readonly int GL_PROGRAM_ERROR_POSITION_ARB = libtischPINVOKE.GL_PROGRAM_ERROR_POSITION_ARB_get();
  public static readonly int GL_PROGRAM_BINDING_ARB = libtischPINVOKE.GL_PROGRAM_BINDING_ARB_get();
  public static readonly int GL_MAX_VERTEX_ATTRIBS_ARB = libtischPINVOKE.GL_MAX_VERTEX_ATTRIBS_ARB_get();
  public static readonly int GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB = libtischPINVOKE.GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB_get();
  public static readonly int GL_PROGRAM_ERROR_STRING_ARB = libtischPINVOKE.GL_PROGRAM_ERROR_STRING_ARB_get();
  public static readonly int GL_PROGRAM_FORMAT_ASCII_ARB = libtischPINVOKE.GL_PROGRAM_FORMAT_ASCII_ARB_get();
  public static readonly int GL_PROGRAM_FORMAT_ARB = libtischPINVOKE.GL_PROGRAM_FORMAT_ARB_get();
  public static readonly int GL_PROGRAM_INSTRUCTIONS_ARB = libtischPINVOKE.GL_PROGRAM_INSTRUCTIONS_ARB_get();
  public static readonly int GL_MAX_PROGRAM_INSTRUCTIONS_ARB = libtischPINVOKE.GL_MAX_PROGRAM_INSTRUCTIONS_ARB_get();
  public static readonly int GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB = libtischPINVOKE.GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB_get();
  public static readonly int GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB = libtischPINVOKE.GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB_get();
  public static readonly int GL_PROGRAM_TEMPORARIES_ARB = libtischPINVOKE.GL_PROGRAM_TEMPORARIES_ARB_get();
  public static readonly int GL_MAX_PROGRAM_TEMPORARIES_ARB = libtischPINVOKE.GL_MAX_PROGRAM_TEMPORARIES_ARB_get();
  public static readonly int GL_PROGRAM_NATIVE_TEMPORARIES_ARB = libtischPINVOKE.GL_PROGRAM_NATIVE_TEMPORARIES_ARB_get();
  public static readonly int GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB = libtischPINVOKE.GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB_get();
  public static readonly int GL_PROGRAM_PARAMETERS_ARB = libtischPINVOKE.GL_PROGRAM_PARAMETERS_ARB_get();
  public static readonly int GL_MAX_PROGRAM_PARAMETERS_ARB = libtischPINVOKE.GL_MAX_PROGRAM_PARAMETERS_ARB_get();
  public static readonly int GL_PROGRAM_NATIVE_PARAMETERS_ARB = libtischPINVOKE.GL_PROGRAM_NATIVE_PARAMETERS_ARB_get();
  public static readonly int GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB = libtischPINVOKE.GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB_get();
  public static readonly int GL_PROGRAM_ATTRIBS_ARB = libtischPINVOKE.GL_PROGRAM_ATTRIBS_ARB_get();
  public static readonly int GL_MAX_PROGRAM_ATTRIBS_ARB = libtischPINVOKE.GL_MAX_PROGRAM_ATTRIBS_ARB_get();
  public static readonly int GL_PROGRAM_NATIVE_ATTRIBS_ARB = libtischPINVOKE.GL_PROGRAM_NATIVE_ATTRIBS_ARB_get();
  public static readonly int GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB = libtischPINVOKE.GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB_get();
  public static readonly int GL_PROGRAM_ADDRESS_REGISTERS_ARB = libtischPINVOKE.GL_PROGRAM_ADDRESS_REGISTERS_ARB_get();
  public static readonly int GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB = libtischPINVOKE.GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB_get();
  public static readonly int GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = libtischPINVOKE.GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB_get();
  public static readonly int GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = libtischPINVOKE.GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB_get();
  public static readonly int GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB = libtischPINVOKE.GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB_get();
  public static readonly int GL_MAX_PROGRAM_ENV_PARAMETERS_ARB = libtischPINVOKE.GL_MAX_PROGRAM_ENV_PARAMETERS_ARB_get();
  public static readonly int GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB = libtischPINVOKE.GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB_get();
  public static readonly int GL_TRANSPOSE_CURRENT_MATRIX_ARB = libtischPINVOKE.GL_TRANSPOSE_CURRENT_MATRIX_ARB_get();
  public static readonly int GL_MATRIX0_ARB = libtischPINVOKE.GL_MATRIX0_ARB_get();
  public static readonly int GL_MATRIX1_ARB = libtischPINVOKE.GL_MATRIX1_ARB_get();
  public static readonly int GL_MATRIX2_ARB = libtischPINVOKE.GL_MATRIX2_ARB_get();
  public static readonly int GL_MATRIX3_ARB = libtischPINVOKE.GL_MATRIX3_ARB_get();
  public static readonly int GL_MATRIX4_ARB = libtischPINVOKE.GL_MATRIX4_ARB_get();
  public static readonly int GL_MATRIX5_ARB = libtischPINVOKE.GL_MATRIX5_ARB_get();
  public static readonly int GL_MATRIX6_ARB = libtischPINVOKE.GL_MATRIX6_ARB_get();
  public static readonly int GL_MATRIX7_ARB = libtischPINVOKE.GL_MATRIX7_ARB_get();
  public static readonly int GL_MATRIX8_ARB = libtischPINVOKE.GL_MATRIX8_ARB_get();
  public static readonly int GL_MATRIX9_ARB = libtischPINVOKE.GL_MATRIX9_ARB_get();
  public static readonly int GL_MATRIX10_ARB = libtischPINVOKE.GL_MATRIX10_ARB_get();
  public static readonly int GL_MATRIX11_ARB = libtischPINVOKE.GL_MATRIX11_ARB_get();
  public static readonly int GL_MATRIX12_ARB = libtischPINVOKE.GL_MATRIX12_ARB_get();
  public static readonly int GL_MATRIX13_ARB = libtischPINVOKE.GL_MATRIX13_ARB_get();
  public static readonly int GL_MATRIX14_ARB = libtischPINVOKE.GL_MATRIX14_ARB_get();
  public static readonly int GL_MATRIX15_ARB = libtischPINVOKE.GL_MATRIX15_ARB_get();
  public static readonly int GL_MATRIX16_ARB = libtischPINVOKE.GL_MATRIX16_ARB_get();
  public static readonly int GL_MATRIX17_ARB = libtischPINVOKE.GL_MATRIX17_ARB_get();
  public static readonly int GL_MATRIX18_ARB = libtischPINVOKE.GL_MATRIX18_ARB_get();
  public static readonly int GL_MATRIX19_ARB = libtischPINVOKE.GL_MATRIX19_ARB_get();
  public static readonly int GL_MATRIX20_ARB = libtischPINVOKE.GL_MATRIX20_ARB_get();
  public static readonly int GL_MATRIX21_ARB = libtischPINVOKE.GL_MATRIX21_ARB_get();
  public static readonly int GL_MATRIX22_ARB = libtischPINVOKE.GL_MATRIX22_ARB_get();
  public static readonly int GL_MATRIX23_ARB = libtischPINVOKE.GL_MATRIX23_ARB_get();
  public static readonly int GL_MATRIX24_ARB = libtischPINVOKE.GL_MATRIX24_ARB_get();
  public static readonly int GL_MATRIX25_ARB = libtischPINVOKE.GL_MATRIX25_ARB_get();
  public static readonly int GL_MATRIX26_ARB = libtischPINVOKE.GL_MATRIX26_ARB_get();
  public static readonly int GL_MATRIX27_ARB = libtischPINVOKE.GL_MATRIX27_ARB_get();
  public static readonly int GL_MATRIX28_ARB = libtischPINVOKE.GL_MATRIX28_ARB_get();
  public static readonly int GL_MATRIX29_ARB = libtischPINVOKE.GL_MATRIX29_ARB_get();
  public static readonly int GL_MATRIX30_ARB = libtischPINVOKE.GL_MATRIX30_ARB_get();
  public static readonly int GL_MATRIX31_ARB = libtischPINVOKE.GL_MATRIX31_ARB_get();
  public static readonly int GL_FRAGMENT_PROGRAM_ARB = libtischPINVOKE.GL_FRAGMENT_PROGRAM_ARB_get();
  public static readonly int GL_PROGRAM_ALU_INSTRUCTIONS_ARB = libtischPINVOKE.GL_PROGRAM_ALU_INSTRUCTIONS_ARB_get();
  public static readonly int GL_PROGRAM_TEX_INSTRUCTIONS_ARB = libtischPINVOKE.GL_PROGRAM_TEX_INSTRUCTIONS_ARB_get();
  public static readonly int GL_PROGRAM_TEX_INDIRECTIONS_ARB = libtischPINVOKE.GL_PROGRAM_TEX_INDIRECTIONS_ARB_get();
  public static readonly int GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = libtischPINVOKE.GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB_get();
  public static readonly int GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = libtischPINVOKE.GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB_get();
  public static readonly int GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = libtischPINVOKE.GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB_get();
  public static readonly int GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB = libtischPINVOKE.GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB_get();
  public static readonly int GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB = libtischPINVOKE.GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB_get();
  public static readonly int GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB = libtischPINVOKE.GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB_get();
  public static readonly int GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = libtischPINVOKE.GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB_get();
  public static readonly int GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = libtischPINVOKE.GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB_get();
  public static readonly int GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = libtischPINVOKE.GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB_get();
  public static readonly int GL_MAX_TEXTURE_COORDS_ARB = libtischPINVOKE.GL_MAX_TEXTURE_COORDS_ARB_get();
  public static readonly int GL_MAX_TEXTURE_IMAGE_UNITS_ARB = libtischPINVOKE.GL_MAX_TEXTURE_IMAGE_UNITS_ARB_get();
  public static readonly int GL_BUFFER_SIZE_ARB = libtischPINVOKE.GL_BUFFER_SIZE_ARB_get();
  public static readonly int GL_BUFFER_USAGE_ARB = libtischPINVOKE.GL_BUFFER_USAGE_ARB_get();
  public static readonly int GL_ARRAY_BUFFER_ARB = libtischPINVOKE.GL_ARRAY_BUFFER_ARB_get();
  public static readonly int GL_ELEMENT_ARRAY_BUFFER_ARB = libtischPINVOKE.GL_ELEMENT_ARRAY_BUFFER_ARB_get();
  public static readonly int GL_ARRAY_BUFFER_BINDING_ARB = libtischPINVOKE.GL_ARRAY_BUFFER_BINDING_ARB_get();
  public static readonly int GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB = libtischPINVOKE.GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB_get();
  public static readonly int GL_VERTEX_ARRAY_BUFFER_BINDING_ARB = libtischPINVOKE.GL_VERTEX_ARRAY_BUFFER_BINDING_ARB_get();
  public static readonly int GL_NORMAL_ARRAY_BUFFER_BINDING_ARB = libtischPINVOKE.GL_NORMAL_ARRAY_BUFFER_BINDING_ARB_get();
  public static readonly int GL_COLOR_ARRAY_BUFFER_BINDING_ARB = libtischPINVOKE.GL_COLOR_ARRAY_BUFFER_BINDING_ARB_get();
  public static readonly int GL_INDEX_ARRAY_BUFFER_BINDING_ARB = libtischPINVOKE.GL_INDEX_ARRAY_BUFFER_BINDING_ARB_get();
  public static readonly int GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB = libtischPINVOKE.GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB_get();
  public static readonly int GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB = libtischPINVOKE.GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB_get();
  public static readonly int GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB = libtischPINVOKE.GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB_get();
  public static readonly int GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB = libtischPINVOKE.GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB_get();
  public static readonly int GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB = libtischPINVOKE.GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB_get();
  public static readonly int GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB = libtischPINVOKE.GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB_get();
  public static readonly int GL_READ_ONLY_ARB = libtischPINVOKE.GL_READ_ONLY_ARB_get();
  public static readonly int GL_WRITE_ONLY_ARB = libtischPINVOKE.GL_WRITE_ONLY_ARB_get();
  public static readonly int GL_READ_WRITE_ARB = libtischPINVOKE.GL_READ_WRITE_ARB_get();
  public static readonly int GL_BUFFER_ACCESS_ARB = libtischPINVOKE.GL_BUFFER_ACCESS_ARB_get();
  public static readonly int GL_BUFFER_MAPPED_ARB = libtischPINVOKE.GL_BUFFER_MAPPED_ARB_get();
  public static readonly int GL_BUFFER_MAP_POINTER_ARB = libtischPINVOKE.GL_BUFFER_MAP_POINTER_ARB_get();
  public static readonly int GL_STREAM_DRAW_ARB = libtischPINVOKE.GL_STREAM_DRAW_ARB_get();
  public static readonly int GL_STREAM_READ_ARB = libtischPINVOKE.GL_STREAM_READ_ARB_get();
  public static readonly int GL_STREAM_COPY_ARB = libtischPINVOKE.GL_STREAM_COPY_ARB_get();
  public static readonly int GL_STATIC_DRAW_ARB = libtischPINVOKE.GL_STATIC_DRAW_ARB_get();
  public static readonly int GL_STATIC_READ_ARB = libtischPINVOKE.GL_STATIC_READ_ARB_get();
  public static readonly int GL_STATIC_COPY_ARB = libtischPINVOKE.GL_STATIC_COPY_ARB_get();
  public static readonly int GL_DYNAMIC_DRAW_ARB = libtischPINVOKE.GL_DYNAMIC_DRAW_ARB_get();
  public static readonly int GL_DYNAMIC_READ_ARB = libtischPINVOKE.GL_DYNAMIC_READ_ARB_get();
  public static readonly int GL_DYNAMIC_COPY_ARB = libtischPINVOKE.GL_DYNAMIC_COPY_ARB_get();
  public static readonly int GL_QUERY_COUNTER_BITS_ARB = libtischPINVOKE.GL_QUERY_COUNTER_BITS_ARB_get();
  public static readonly int GL_CURRENT_QUERY_ARB = libtischPINVOKE.GL_CURRENT_QUERY_ARB_get();
  public static readonly int GL_QUERY_RESULT_ARB = libtischPINVOKE.GL_QUERY_RESULT_ARB_get();
  public static readonly int GL_QUERY_RESULT_AVAILABLE_ARB = libtischPINVOKE.GL_QUERY_RESULT_AVAILABLE_ARB_get();
  public static readonly int GL_SAMPLES_PASSED_ARB = libtischPINVOKE.GL_SAMPLES_PASSED_ARB_get();
  public static readonly int GL_PROGRAM_OBJECT_ARB = libtischPINVOKE.GL_PROGRAM_OBJECT_ARB_get();
  public static readonly int GL_SHADER_OBJECT_ARB = libtischPINVOKE.GL_SHADER_OBJECT_ARB_get();
  public static readonly int GL_OBJECT_TYPE_ARB = libtischPINVOKE.GL_OBJECT_TYPE_ARB_get();
  public static readonly int GL_OBJECT_SUBTYPE_ARB = libtischPINVOKE.GL_OBJECT_SUBTYPE_ARB_get();
  public static readonly int GL_FLOAT_VEC2_ARB = libtischPINVOKE.GL_FLOAT_VEC2_ARB_get();
  public static readonly int GL_FLOAT_VEC3_ARB = libtischPINVOKE.GL_FLOAT_VEC3_ARB_get();
  public static readonly int GL_FLOAT_VEC4_ARB = libtischPINVOKE.GL_FLOAT_VEC4_ARB_get();
  public static readonly int GL_INT_VEC2_ARB = libtischPINVOKE.GL_INT_VEC2_ARB_get();
  public static readonly int GL_INT_VEC3_ARB = libtischPINVOKE.GL_INT_VEC3_ARB_get();
  public static readonly int GL_INT_VEC4_ARB = libtischPINVOKE.GL_INT_VEC4_ARB_get();
  public static readonly int GL_BOOL_ARB = libtischPINVOKE.GL_BOOL_ARB_get();
  public static readonly int GL_BOOL_VEC2_ARB = libtischPINVOKE.GL_BOOL_VEC2_ARB_get();
  public static readonly int GL_BOOL_VEC3_ARB = libtischPINVOKE.GL_BOOL_VEC3_ARB_get();
  public static readonly int GL_BOOL_VEC4_ARB = libtischPINVOKE.GL_BOOL_VEC4_ARB_get();
  public static readonly int GL_FLOAT_MAT2_ARB = libtischPINVOKE.GL_FLOAT_MAT2_ARB_get();
  public static readonly int GL_FLOAT_MAT3_ARB = libtischPINVOKE.GL_FLOAT_MAT3_ARB_get();
  public static readonly int GL_FLOAT_MAT4_ARB = libtischPINVOKE.GL_FLOAT_MAT4_ARB_get();
  public static readonly int GL_SAMPLER_1D_ARB = libtischPINVOKE.GL_SAMPLER_1D_ARB_get();
  public static readonly int GL_SAMPLER_2D_ARB = libtischPINVOKE.GL_SAMPLER_2D_ARB_get();
  public static readonly int GL_SAMPLER_3D_ARB = libtischPINVOKE.GL_SAMPLER_3D_ARB_get();
  public static readonly int GL_SAMPLER_CUBE_ARB = libtischPINVOKE.GL_SAMPLER_CUBE_ARB_get();
  public static readonly int GL_SAMPLER_1D_SHADOW_ARB = libtischPINVOKE.GL_SAMPLER_1D_SHADOW_ARB_get();
  public static readonly int GL_SAMPLER_2D_SHADOW_ARB = libtischPINVOKE.GL_SAMPLER_2D_SHADOW_ARB_get();
  public static readonly int GL_SAMPLER_2D_RECT_ARB = libtischPINVOKE.GL_SAMPLER_2D_RECT_ARB_get();
  public static readonly int GL_SAMPLER_2D_RECT_SHADOW_ARB = libtischPINVOKE.GL_SAMPLER_2D_RECT_SHADOW_ARB_get();
  public static readonly int GL_OBJECT_DELETE_STATUS_ARB = libtischPINVOKE.GL_OBJECT_DELETE_STATUS_ARB_get();
  public static readonly int GL_OBJECT_COMPILE_STATUS_ARB = libtischPINVOKE.GL_OBJECT_COMPILE_STATUS_ARB_get();
  public static readonly int GL_OBJECT_LINK_STATUS_ARB = libtischPINVOKE.GL_OBJECT_LINK_STATUS_ARB_get();
  public static readonly int GL_OBJECT_VALIDATE_STATUS_ARB = libtischPINVOKE.GL_OBJECT_VALIDATE_STATUS_ARB_get();
  public static readonly int GL_OBJECT_INFO_LOG_LENGTH_ARB = libtischPINVOKE.GL_OBJECT_INFO_LOG_LENGTH_ARB_get();
  public static readonly int GL_OBJECT_ATTACHED_OBJECTS_ARB = libtischPINVOKE.GL_OBJECT_ATTACHED_OBJECTS_ARB_get();
  public static readonly int GL_OBJECT_ACTIVE_UNIFORMS_ARB = libtischPINVOKE.GL_OBJECT_ACTIVE_UNIFORMS_ARB_get();
  public static readonly int GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB = libtischPINVOKE.GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB_get();
  public static readonly int GL_OBJECT_SHADER_SOURCE_LENGTH_ARB = libtischPINVOKE.GL_OBJECT_SHADER_SOURCE_LENGTH_ARB_get();
  public static readonly int GL_VERTEX_SHADER_ARB = libtischPINVOKE.GL_VERTEX_SHADER_ARB_get();
  public static readonly int GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB = libtischPINVOKE.GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB_get();
  public static readonly int GL_MAX_VARYING_FLOATS_ARB = libtischPINVOKE.GL_MAX_VARYING_FLOATS_ARB_get();
  public static readonly int GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB = libtischPINVOKE.GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB_get();
  public static readonly int GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB = libtischPINVOKE.GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB_get();
  public static readonly int GL_OBJECT_ACTIVE_ATTRIBUTES_ARB = libtischPINVOKE.GL_OBJECT_ACTIVE_ATTRIBUTES_ARB_get();
  public static readonly int GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB = libtischPINVOKE.GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB_get();
  public static readonly int GL_FRAGMENT_SHADER_ARB = libtischPINVOKE.GL_FRAGMENT_SHADER_ARB_get();
  public static readonly int GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB = libtischPINVOKE.GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB_get();
  public static readonly int GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB = libtischPINVOKE.GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB_get();
  public static readonly int GL_SHADING_LANGUAGE_VERSION_ARB = libtischPINVOKE.GL_SHADING_LANGUAGE_VERSION_ARB_get();
  public static readonly int GL_POINT_SPRITE_ARB = libtischPINVOKE.GL_POINT_SPRITE_ARB_get();
  public static readonly int GL_COORD_REPLACE_ARB = libtischPINVOKE.GL_COORD_REPLACE_ARB_get();
  public static readonly int GL_MAX_DRAW_BUFFERS_ARB = libtischPINVOKE.GL_MAX_DRAW_BUFFERS_ARB_get();
  public static readonly int GL_DRAW_BUFFER0_ARB = libtischPINVOKE.GL_DRAW_BUFFER0_ARB_get();
  public static readonly int GL_DRAW_BUFFER1_ARB = libtischPINVOKE.GL_DRAW_BUFFER1_ARB_get();
  public static readonly int GL_DRAW_BUFFER2_ARB = libtischPINVOKE.GL_DRAW_BUFFER2_ARB_get();
  public static readonly int GL_DRAW_BUFFER3_ARB = libtischPINVOKE.GL_DRAW_BUFFER3_ARB_get();
  public static readonly int GL_DRAW_BUFFER4_ARB = libtischPINVOKE.GL_DRAW_BUFFER4_ARB_get();
  public static readonly int GL_DRAW_BUFFER5_ARB = libtischPINVOKE.GL_DRAW_BUFFER5_ARB_get();
  public static readonly int GL_DRAW_BUFFER6_ARB = libtischPINVOKE.GL_DRAW_BUFFER6_ARB_get();
  public static readonly int GL_DRAW_BUFFER7_ARB = libtischPINVOKE.GL_DRAW_BUFFER7_ARB_get();
  public static readonly int GL_DRAW_BUFFER8_ARB = libtischPINVOKE.GL_DRAW_BUFFER8_ARB_get();
  public static readonly int GL_DRAW_BUFFER9_ARB = libtischPINVOKE.GL_DRAW_BUFFER9_ARB_get();
  public static readonly int GL_DRAW_BUFFER10_ARB = libtischPINVOKE.GL_DRAW_BUFFER10_ARB_get();
  public static readonly int GL_DRAW_BUFFER11_ARB = libtischPINVOKE.GL_DRAW_BUFFER11_ARB_get();
  public static readonly int GL_DRAW_BUFFER12_ARB = libtischPINVOKE.GL_DRAW_BUFFER12_ARB_get();
  public static readonly int GL_DRAW_BUFFER13_ARB = libtischPINVOKE.GL_DRAW_BUFFER13_ARB_get();
  public static readonly int GL_DRAW_BUFFER14_ARB = libtischPINVOKE.GL_DRAW_BUFFER14_ARB_get();
  public static readonly int GL_DRAW_BUFFER15_ARB = libtischPINVOKE.GL_DRAW_BUFFER15_ARB_get();
  public static readonly int GL_TEXTURE_RECTANGLE_ARB = libtischPINVOKE.GL_TEXTURE_RECTANGLE_ARB_get();
  public static readonly int GL_TEXTURE_BINDING_RECTANGLE_ARB = libtischPINVOKE.GL_TEXTURE_BINDING_RECTANGLE_ARB_get();
  public static readonly int GL_PROXY_TEXTURE_RECTANGLE_ARB = libtischPINVOKE.GL_PROXY_TEXTURE_RECTANGLE_ARB_get();
  public static readonly int GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB = libtischPINVOKE.GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB_get();
  public static readonly int GL_RGBA_FLOAT_MODE_ARB = libtischPINVOKE.GL_RGBA_FLOAT_MODE_ARB_get();
  public static readonly int GL_CLAMP_VERTEX_COLOR_ARB = libtischPINVOKE.GL_CLAMP_VERTEX_COLOR_ARB_get();
  public static readonly int GL_CLAMP_FRAGMENT_COLOR_ARB = libtischPINVOKE.GL_CLAMP_FRAGMENT_COLOR_ARB_get();
  public static readonly int GL_CLAMP_READ_COLOR_ARB = libtischPINVOKE.GL_CLAMP_READ_COLOR_ARB_get();
  public static readonly int GL_FIXED_ONLY_ARB = libtischPINVOKE.GL_FIXED_ONLY_ARB_get();
  public static readonly int GL_HALF_FLOAT_ARB = libtischPINVOKE.GL_HALF_FLOAT_ARB_get();
  public static readonly int GL_TEXTURE_RED_TYPE_ARB = libtischPINVOKE.GL_TEXTURE_RED_TYPE_ARB_get();
  public static readonly int GL_TEXTURE_GREEN_TYPE_ARB = libtischPINVOKE.GL_TEXTURE_GREEN_TYPE_ARB_get();
  public static readonly int GL_TEXTURE_BLUE_TYPE_ARB = libtischPINVOKE.GL_TEXTURE_BLUE_TYPE_ARB_get();
  public static readonly int GL_TEXTURE_ALPHA_TYPE_ARB = libtischPINVOKE.GL_TEXTURE_ALPHA_TYPE_ARB_get();
  public static readonly int GL_TEXTURE_LUMINANCE_TYPE_ARB = libtischPINVOKE.GL_TEXTURE_LUMINANCE_TYPE_ARB_get();
  public static readonly int GL_TEXTURE_INTENSITY_TYPE_ARB = libtischPINVOKE.GL_TEXTURE_INTENSITY_TYPE_ARB_get();
  public static readonly int GL_TEXTURE_DEPTH_TYPE_ARB = libtischPINVOKE.GL_TEXTURE_DEPTH_TYPE_ARB_get();
  public static readonly int GL_UNSIGNED_NORMALIZED_ARB = libtischPINVOKE.GL_UNSIGNED_NORMALIZED_ARB_get();
  public static readonly int GL_RGBA32F_ARB = libtischPINVOKE.GL_RGBA32F_ARB_get();
  public static readonly int GL_RGB32F_ARB = libtischPINVOKE.GL_RGB32F_ARB_get();
  public static readonly int GL_ALPHA32F_ARB = libtischPINVOKE.GL_ALPHA32F_ARB_get();
  public static readonly int GL_INTENSITY32F_ARB = libtischPINVOKE.GL_INTENSITY32F_ARB_get();
  public static readonly int GL_LUMINANCE32F_ARB = libtischPINVOKE.GL_LUMINANCE32F_ARB_get();
  public static readonly int GL_LUMINANCE_ALPHA32F_ARB = libtischPINVOKE.GL_LUMINANCE_ALPHA32F_ARB_get();
  public static readonly int GL_RGBA16F_ARB = libtischPINVOKE.GL_RGBA16F_ARB_get();
  public static readonly int GL_RGB16F_ARB = libtischPINVOKE.GL_RGB16F_ARB_get();
  public static readonly int GL_ALPHA16F_ARB = libtischPINVOKE.GL_ALPHA16F_ARB_get();
  public static readonly int GL_INTENSITY16F_ARB = libtischPINVOKE.GL_INTENSITY16F_ARB_get();
  public static readonly int GL_LUMINANCE16F_ARB = libtischPINVOKE.GL_LUMINANCE16F_ARB_get();
  public static readonly int GL_LUMINANCE_ALPHA16F_ARB = libtischPINVOKE.GL_LUMINANCE_ALPHA16F_ARB_get();
  public static readonly int GL_PIXEL_PACK_BUFFER_ARB = libtischPINVOKE.GL_PIXEL_PACK_BUFFER_ARB_get();
  public static readonly int GL_PIXEL_UNPACK_BUFFER_ARB = libtischPINVOKE.GL_PIXEL_UNPACK_BUFFER_ARB_get();
  public static readonly int GL_PIXEL_PACK_BUFFER_BINDING_ARB = libtischPINVOKE.GL_PIXEL_PACK_BUFFER_BINDING_ARB_get();
  public static readonly int GL_PIXEL_UNPACK_BUFFER_BINDING_ARB = libtischPINVOKE.GL_PIXEL_UNPACK_BUFFER_BINDING_ARB_get();
  public static readonly int GL_DEPTH_COMPONENT32F = libtischPINVOKE.GL_DEPTH_COMPONENT32F_get();
  public static readonly int GL_DEPTH32F_STENCIL8 = libtischPINVOKE.GL_DEPTH32F_STENCIL8_get();
  public static readonly int GL_FLOAT_32_UNSIGNED_INT_24_8_REV = libtischPINVOKE.GL_FLOAT_32_UNSIGNED_INT_24_8_REV_get();
  public static readonly int GL_INVALID_FRAMEBUFFER_OPERATION = libtischPINVOKE.GL_INVALID_FRAMEBUFFER_OPERATION_get();
  public static readonly int GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = libtischPINVOKE.GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_get();
  public static readonly int GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = libtischPINVOKE.GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_get();
  public static readonly int GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = libtischPINVOKE.GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE_get();
  public static readonly int GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = libtischPINVOKE.GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE_get();
  public static readonly int GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = libtischPINVOKE.GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE_get();
  public static readonly int GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = libtischPINVOKE.GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE_get();
  public static readonly int GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = libtischPINVOKE.GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE_get();
  public static readonly int GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = libtischPINVOKE.GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE_get();
  public static readonly int GL_FRAMEBUFFER_DEFAULT = libtischPINVOKE.GL_FRAMEBUFFER_DEFAULT_get();
  public static readonly int GL_FRAMEBUFFER_UNDEFINED = libtischPINVOKE.GL_FRAMEBUFFER_UNDEFINED_get();
  public static readonly int GL_DEPTH_STENCIL_ATTACHMENT = libtischPINVOKE.GL_DEPTH_STENCIL_ATTACHMENT_get();
  public static readonly int GL_MAX_RENDERBUFFER_SIZE = libtischPINVOKE.GL_MAX_RENDERBUFFER_SIZE_get();
  public static readonly int GL_DEPTH_STENCIL = libtischPINVOKE.GL_DEPTH_STENCIL_get();
  public static readonly int GL_UNSIGNED_INT_24_8 = libtischPINVOKE.GL_UNSIGNED_INT_24_8_get();
  public static readonly int GL_DEPTH24_STENCIL8 = libtischPINVOKE.GL_DEPTH24_STENCIL8_get();
  public static readonly int GL_TEXTURE_STENCIL_SIZE = libtischPINVOKE.GL_TEXTURE_STENCIL_SIZE_get();
  public static readonly int GL_TEXTURE_RED_TYPE = libtischPINVOKE.GL_TEXTURE_RED_TYPE_get();
  public static readonly int GL_TEXTURE_GREEN_TYPE = libtischPINVOKE.GL_TEXTURE_GREEN_TYPE_get();
  public static readonly int GL_TEXTURE_BLUE_TYPE = libtischPINVOKE.GL_TEXTURE_BLUE_TYPE_get();
  public static readonly int GL_TEXTURE_ALPHA_TYPE = libtischPINVOKE.GL_TEXTURE_ALPHA_TYPE_get();
  public static readonly int GL_TEXTURE_DEPTH_TYPE = libtischPINVOKE.GL_TEXTURE_DEPTH_TYPE_get();
  public static readonly int GL_UNSIGNED_NORMALIZED = libtischPINVOKE.GL_UNSIGNED_NORMALIZED_get();
  public static readonly int GL_FRAMEBUFFER_BINDING = libtischPINVOKE.GL_FRAMEBUFFER_BINDING_get();
  public static readonly int GL_DRAW_FRAMEBUFFER_BINDING = libtischPINVOKE.GL_DRAW_FRAMEBUFFER_BINDING_get();
  public static readonly int GL_RENDERBUFFER_BINDING = libtischPINVOKE.GL_RENDERBUFFER_BINDING_get();
  public static readonly int GL_READ_FRAMEBUFFER = libtischPINVOKE.GL_READ_FRAMEBUFFER_get();
  public static readonly int GL_DRAW_FRAMEBUFFER = libtischPINVOKE.GL_DRAW_FRAMEBUFFER_get();
  public static readonly int GL_READ_FRAMEBUFFER_BINDING = libtischPINVOKE.GL_READ_FRAMEBUFFER_BINDING_get();
  public static readonly int GL_RENDERBUFFER_SAMPLES = libtischPINVOKE.GL_RENDERBUFFER_SAMPLES_get();
  public static readonly int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = libtischPINVOKE.GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_get();
  public static readonly int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = libtischPINVOKE.GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_get();
  public static readonly int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = libtischPINVOKE.GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_get();
  public static readonly int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = libtischPINVOKE.GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_get();
  public static readonly int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = libtischPINVOKE.GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_get();
  public static readonly int GL_FRAMEBUFFER_COMPLETE = libtischPINVOKE.GL_FRAMEBUFFER_COMPLETE_get();
  public static readonly int GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = libtischPINVOKE.GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_get();
  public static readonly int GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = libtischPINVOKE.GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_get();
  public static readonly int GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = libtischPINVOKE.GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_get();
  public static readonly int GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = libtischPINVOKE.GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_get();
  public static readonly int GL_FRAMEBUFFER_UNSUPPORTED = libtischPINVOKE.GL_FRAMEBUFFER_UNSUPPORTED_get();
  public static readonly int GL_MAX_COLOR_ATTACHMENTS = libtischPINVOKE.GL_MAX_COLOR_ATTACHMENTS_get();
  public static readonly int GL_COLOR_ATTACHMENT0 = libtischPINVOKE.GL_COLOR_ATTACHMENT0_get();
  public static readonly int GL_COLOR_ATTACHMENT1 = libtischPINVOKE.GL_COLOR_ATTACHMENT1_get();
  public static readonly int GL_COLOR_ATTACHMENT2 = libtischPINVOKE.GL_COLOR_ATTACHMENT2_get();
  public static readonly int GL_COLOR_ATTACHMENT3 = libtischPINVOKE.GL_COLOR_ATTACHMENT3_get();
  public static readonly int GL_COLOR_ATTACHMENT4 = libtischPINVOKE.GL_COLOR_ATTACHMENT4_get();
  public static readonly int GL_COLOR_ATTACHMENT5 = libtischPINVOKE.GL_COLOR_ATTACHMENT5_get();
  public static readonly int GL_COLOR_ATTACHMENT6 = libtischPINVOKE.GL_COLOR_ATTACHMENT6_get();
  public static readonly int GL_COLOR_ATTACHMENT7 = libtischPINVOKE.GL_COLOR_ATTACHMENT7_get();
  public static readonly int GL_COLOR_ATTACHMENT8 = libtischPINVOKE.GL_COLOR_ATTACHMENT8_get();
  public static readonly int GL_COLOR_ATTACHMENT9 = libtischPINVOKE.GL_COLOR_ATTACHMENT9_get();
  public static readonly int GL_COLOR_ATTACHMENT10 = libtischPINVOKE.GL_COLOR_ATTACHMENT10_get();
  public static readonly int GL_COLOR_ATTACHMENT11 = libtischPINVOKE.GL_COLOR_ATTACHMENT11_get();
  public static readonly int GL_COLOR_ATTACHMENT12 = libtischPINVOKE.GL_COLOR_ATTACHMENT12_get();
  public static readonly int GL_COLOR_ATTACHMENT13 = libtischPINVOKE.GL_COLOR_ATTACHMENT13_get();
  public static readonly int GL_COLOR_ATTACHMENT14 = libtischPINVOKE.GL_COLOR_ATTACHMENT14_get();
  public static readonly int GL_COLOR_ATTACHMENT15 = libtischPINVOKE.GL_COLOR_ATTACHMENT15_get();
  public static readonly int GL_DEPTH_ATTACHMENT = libtischPINVOKE.GL_DEPTH_ATTACHMENT_get();
  public static readonly int GL_STENCIL_ATTACHMENT = libtischPINVOKE.GL_STENCIL_ATTACHMENT_get();
  public static readonly int GL_FRAMEBUFFER = libtischPINVOKE.GL_FRAMEBUFFER_get();
  public static readonly int GL_RENDERBUFFER = libtischPINVOKE.GL_RENDERBUFFER_get();
  public static readonly int GL_RENDERBUFFER_WIDTH = libtischPINVOKE.GL_RENDERBUFFER_WIDTH_get();
  public static readonly int GL_RENDERBUFFER_HEIGHT = libtischPINVOKE.GL_RENDERBUFFER_HEIGHT_get();
  public static readonly int GL_RENDERBUFFER_INTERNAL_FORMAT = libtischPINVOKE.GL_RENDERBUFFER_INTERNAL_FORMAT_get();
  public static readonly int GL_STENCIL_INDEX1 = libtischPINVOKE.GL_STENCIL_INDEX1_get();
  public static readonly int GL_STENCIL_INDEX4 = libtischPINVOKE.GL_STENCIL_INDEX4_get();
  public static readonly int GL_STENCIL_INDEX8 = libtischPINVOKE.GL_STENCIL_INDEX8_get();
  public static readonly int GL_STENCIL_INDEX16 = libtischPINVOKE.GL_STENCIL_INDEX16_get();
  public static readonly int GL_RENDERBUFFER_RED_SIZE = libtischPINVOKE.GL_RENDERBUFFER_RED_SIZE_get();
  public static readonly int GL_RENDERBUFFER_GREEN_SIZE = libtischPINVOKE.GL_RENDERBUFFER_GREEN_SIZE_get();
  public static readonly int GL_RENDERBUFFER_BLUE_SIZE = libtischPINVOKE.GL_RENDERBUFFER_BLUE_SIZE_get();
  public static readonly int GL_RENDERBUFFER_ALPHA_SIZE = libtischPINVOKE.GL_RENDERBUFFER_ALPHA_SIZE_get();
  public static readonly int GL_RENDERBUFFER_DEPTH_SIZE = libtischPINVOKE.GL_RENDERBUFFER_DEPTH_SIZE_get();
  public static readonly int GL_RENDERBUFFER_STENCIL_SIZE = libtischPINVOKE.GL_RENDERBUFFER_STENCIL_SIZE_get();
  public static readonly int GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = libtischPINVOKE.GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_get();
  public static readonly int GL_MAX_SAMPLES = libtischPINVOKE.GL_MAX_SAMPLES_get();
  public static readonly int GL_INDEX = libtischPINVOKE.GL_INDEX_get();
  public static readonly int GL_TEXTURE_LUMINANCE_TYPE = libtischPINVOKE.GL_TEXTURE_LUMINANCE_TYPE_get();
  public static readonly int GL_TEXTURE_INTENSITY_TYPE = libtischPINVOKE.GL_TEXTURE_INTENSITY_TYPE_get();
  public static readonly int GL_FRAMEBUFFER_SRGB = libtischPINVOKE.GL_FRAMEBUFFER_SRGB_get();
  public static readonly int GL_LINES_ADJACENCY_ARB = libtischPINVOKE.GL_LINES_ADJACENCY_ARB_get();
  public static readonly int GL_LINE_STRIP_ADJACENCY_ARB = libtischPINVOKE.GL_LINE_STRIP_ADJACENCY_ARB_get();
  public static readonly int GL_TRIANGLES_ADJACENCY_ARB = libtischPINVOKE.GL_TRIANGLES_ADJACENCY_ARB_get();
  public static readonly int GL_TRIANGLE_STRIP_ADJACENCY_ARB = libtischPINVOKE.GL_TRIANGLE_STRIP_ADJACENCY_ARB_get();
  public static readonly int GL_PROGRAM_POINT_SIZE_ARB = libtischPINVOKE.GL_PROGRAM_POINT_SIZE_ARB_get();
  public static readonly int GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB = libtischPINVOKE.GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB_get();
  public static readonly int GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB = libtischPINVOKE.GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB_get();
  public static readonly int GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB = libtischPINVOKE.GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB_get();
  public static readonly int GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB = libtischPINVOKE.GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB_get();
  public static readonly int GL_GEOMETRY_SHADER_ARB = libtischPINVOKE.GL_GEOMETRY_SHADER_ARB_get();
  public static readonly int GL_GEOMETRY_VERTICES_OUT_ARB = libtischPINVOKE.GL_GEOMETRY_VERTICES_OUT_ARB_get();
  public static readonly int GL_GEOMETRY_INPUT_TYPE_ARB = libtischPINVOKE.GL_GEOMETRY_INPUT_TYPE_ARB_get();
  public static readonly int GL_GEOMETRY_OUTPUT_TYPE_ARB = libtischPINVOKE.GL_GEOMETRY_OUTPUT_TYPE_ARB_get();
  public static readonly int GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB = libtischPINVOKE.GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB_get();
  public static readonly int GL_MAX_VERTEX_VARYING_COMPONENTS_ARB = libtischPINVOKE.GL_MAX_VERTEX_VARYING_COMPONENTS_ARB_get();
  public static readonly int GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB = libtischPINVOKE.GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB_get();
  public static readonly int GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB = libtischPINVOKE.GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB_get();
  public static readonly int GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB = libtischPINVOKE.GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB_get();
  public static readonly int GL_HALF_FLOAT = libtischPINVOKE.GL_HALF_FLOAT_get();
  public static readonly int GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB = libtischPINVOKE.GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB_get();
  public static readonly int GL_MAP_READ_BIT = libtischPINVOKE.GL_MAP_READ_BIT_get();
  public static readonly int GL_MAP_WRITE_BIT = libtischPINVOKE.GL_MAP_WRITE_BIT_get();
  public static readonly int GL_MAP_INVALIDATE_RANGE_BIT = libtischPINVOKE.GL_MAP_INVALIDATE_RANGE_BIT_get();
  public static readonly int GL_MAP_INVALIDATE_BUFFER_BIT = libtischPINVOKE.GL_MAP_INVALIDATE_BUFFER_BIT_get();
  public static readonly int GL_MAP_FLUSH_EXPLICIT_BIT = libtischPINVOKE.GL_MAP_FLUSH_EXPLICIT_BIT_get();
  public static readonly int GL_MAP_UNSYNCHRONIZED_BIT = libtischPINVOKE.GL_MAP_UNSYNCHRONIZED_BIT_get();
  public static readonly int GL_TEXTURE_BUFFER_ARB = libtischPINVOKE.GL_TEXTURE_BUFFER_ARB_get();
  public static readonly int GL_MAX_TEXTURE_BUFFER_SIZE_ARB = libtischPINVOKE.GL_MAX_TEXTURE_BUFFER_SIZE_ARB_get();
  public static readonly int GL_TEXTURE_BINDING_BUFFER_ARB = libtischPINVOKE.GL_TEXTURE_BINDING_BUFFER_ARB_get();
  public static readonly int GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB = libtischPINVOKE.GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB_get();
  public static readonly int GL_TEXTURE_BUFFER_FORMAT_ARB = libtischPINVOKE.GL_TEXTURE_BUFFER_FORMAT_ARB_get();
  public static readonly int GL_COMPRESSED_RED_RGTC1 = libtischPINVOKE.GL_COMPRESSED_RED_RGTC1_get();
  public static readonly int GL_COMPRESSED_SIGNED_RED_RGTC1 = libtischPINVOKE.GL_COMPRESSED_SIGNED_RED_RGTC1_get();
  public static readonly int GL_COMPRESSED_RG_RGTC2 = libtischPINVOKE.GL_COMPRESSED_RG_RGTC2_get();
  public static readonly int GL_COMPRESSED_SIGNED_RG_RGTC2 = libtischPINVOKE.GL_COMPRESSED_SIGNED_RG_RGTC2_get();
  public static readonly int GL_RG = libtischPINVOKE.GL_RG_get();
  public static readonly int GL_RG_INTEGER = libtischPINVOKE.GL_RG_INTEGER_get();
  public static readonly int GL_R8 = libtischPINVOKE.GL_R8_get();
  public static readonly int GL_R16 = libtischPINVOKE.GL_R16_get();
  public static readonly int GL_RG8 = libtischPINVOKE.GL_RG8_get();
  public static readonly int GL_RG16 = libtischPINVOKE.GL_RG16_get();
  public static readonly int GL_R16F = libtischPINVOKE.GL_R16F_get();
  public static readonly int GL_R32F = libtischPINVOKE.GL_R32F_get();
  public static readonly int GL_RG16F = libtischPINVOKE.GL_RG16F_get();
  public static readonly int GL_RG32F = libtischPINVOKE.GL_RG32F_get();
  public static readonly int GL_R8I = libtischPINVOKE.GL_R8I_get();
  public static readonly int GL_R8UI = libtischPINVOKE.GL_R8UI_get();
  public static readonly int GL_R16I = libtischPINVOKE.GL_R16I_get();
  public static readonly int GL_R16UI = libtischPINVOKE.GL_R16UI_get();
  public static readonly int GL_R32I = libtischPINVOKE.GL_R32I_get();
  public static readonly int GL_R32UI = libtischPINVOKE.GL_R32UI_get();
  public static readonly int GL_RG8I = libtischPINVOKE.GL_RG8I_get();
  public static readonly int GL_RG8UI = libtischPINVOKE.GL_RG8UI_get();
  public static readonly int GL_RG16I = libtischPINVOKE.GL_RG16I_get();
  public static readonly int GL_RG16UI = libtischPINVOKE.GL_RG16UI_get();
  public static readonly int GL_RG32I = libtischPINVOKE.GL_RG32I_get();
  public static readonly int GL_RG32UI = libtischPINVOKE.GL_RG32UI_get();
  public static readonly int GL_VERTEX_ARRAY_BINDING = libtischPINVOKE.GL_VERTEX_ARRAY_BINDING_get();
  public static readonly int GL_UNIFORM_BUFFER = libtischPINVOKE.GL_UNIFORM_BUFFER_get();
  public static readonly int GL_UNIFORM_BUFFER_BINDING = libtischPINVOKE.GL_UNIFORM_BUFFER_BINDING_get();
  public static readonly int GL_UNIFORM_BUFFER_START = libtischPINVOKE.GL_UNIFORM_BUFFER_START_get();
  public static readonly int GL_UNIFORM_BUFFER_SIZE = libtischPINVOKE.GL_UNIFORM_BUFFER_SIZE_get();
  public static readonly int GL_MAX_VERTEX_UNIFORM_BLOCKS = libtischPINVOKE.GL_MAX_VERTEX_UNIFORM_BLOCKS_get();
  public static readonly int GL_MAX_GEOMETRY_UNIFORM_BLOCKS = libtischPINVOKE.GL_MAX_GEOMETRY_UNIFORM_BLOCKS_get();
  public static readonly int GL_MAX_FRAGMENT_UNIFORM_BLOCKS = libtischPINVOKE.GL_MAX_FRAGMENT_UNIFORM_BLOCKS_get();
  public static readonly int GL_MAX_COMBINED_UNIFORM_BLOCKS = libtischPINVOKE.GL_MAX_COMBINED_UNIFORM_BLOCKS_get();
  public static readonly int GL_MAX_UNIFORM_BUFFER_BINDINGS = libtischPINVOKE.GL_MAX_UNIFORM_BUFFER_BINDINGS_get();
  public static readonly int GL_MAX_UNIFORM_BLOCK_SIZE = libtischPINVOKE.GL_MAX_UNIFORM_BLOCK_SIZE_get();
  public static readonly int GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = libtischPINVOKE.GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS_get();
  public static readonly int GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = libtischPINVOKE.GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_get();
  public static readonly int GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = libtischPINVOKE.GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS_get();
  public static readonly int GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = libtischPINVOKE.GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT_get();
  public static readonly int GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = libtischPINVOKE.GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH_get();
  public static readonly int GL_ACTIVE_UNIFORM_BLOCKS = libtischPINVOKE.GL_ACTIVE_UNIFORM_BLOCKS_get();
  public static readonly int GL_UNIFORM_TYPE = libtischPINVOKE.GL_UNIFORM_TYPE_get();
  public static readonly int GL_UNIFORM_SIZE = libtischPINVOKE.GL_UNIFORM_SIZE_get();
  public static readonly int GL_UNIFORM_NAME_LENGTH = libtischPINVOKE.GL_UNIFORM_NAME_LENGTH_get();
  public static readonly int GL_UNIFORM_BLOCK_INDEX = libtischPINVOKE.GL_UNIFORM_BLOCK_INDEX_get();
  public static readonly int GL_UNIFORM_OFFSET = libtischPINVOKE.GL_UNIFORM_OFFSET_get();
  public static readonly int GL_UNIFORM_ARRAY_STRIDE = libtischPINVOKE.GL_UNIFORM_ARRAY_STRIDE_get();
  public static readonly int GL_UNIFORM_MATRIX_STRIDE = libtischPINVOKE.GL_UNIFORM_MATRIX_STRIDE_get();
  public static readonly int GL_UNIFORM_IS_ROW_MAJOR = libtischPINVOKE.GL_UNIFORM_IS_ROW_MAJOR_get();
  public static readonly int GL_UNIFORM_BLOCK_BINDING = libtischPINVOKE.GL_UNIFORM_BLOCK_BINDING_get();
  public static readonly int GL_UNIFORM_BLOCK_DATA_SIZE = libtischPINVOKE.GL_UNIFORM_BLOCK_DATA_SIZE_get();
  public static readonly int GL_UNIFORM_BLOCK_NAME_LENGTH = libtischPINVOKE.GL_UNIFORM_BLOCK_NAME_LENGTH_get();
  public static readonly int GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = libtischPINVOKE.GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS_get();
  public static readonly int GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = libtischPINVOKE.GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES_get();
  public static readonly int GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = libtischPINVOKE.GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER_get();
  public static readonly int GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = libtischPINVOKE.GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER_get();
  public static readonly int GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = libtischPINVOKE.GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER_get();
  public static readonly uint GL_INVALID_INDEX = libtischPINVOKE.GL_INVALID_INDEX_get();
  public static readonly int GL_COPY_READ_BUFFER = libtischPINVOKE.GL_COPY_READ_BUFFER_get();
  public static readonly int GL_COPY_WRITE_BUFFER = libtischPINVOKE.GL_COPY_WRITE_BUFFER_get();
  public static readonly int GL_DEPTH_CLAMP = libtischPINVOKE.GL_DEPTH_CLAMP_get();
  public static readonly int GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = libtischPINVOKE.GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_get();
  public static readonly int GL_FIRST_VERTEX_CONVENTION = libtischPINVOKE.GL_FIRST_VERTEX_CONVENTION_get();
  public static readonly int GL_LAST_VERTEX_CONVENTION = libtischPINVOKE.GL_LAST_VERTEX_CONVENTION_get();
  public static readonly int GL_PROVOKING_VERTEX = libtischPINVOKE.GL_PROVOKING_VERTEX_get();
  public static readonly int GL_TEXTURE_CUBE_MAP_SEAMLESS = libtischPINVOKE.GL_TEXTURE_CUBE_MAP_SEAMLESS_get();
  public static readonly int GL_MAX_SERVER_WAIT_TIMEOUT = libtischPINVOKE.GL_MAX_SERVER_WAIT_TIMEOUT_get();
  public static readonly int GL_OBJECT_TYPE = libtischPINVOKE.GL_OBJECT_TYPE_get();
  public static readonly int GL_SYNC_CONDITION = libtischPINVOKE.GL_SYNC_CONDITION_get();
  public static readonly int GL_SYNC_STATUS = libtischPINVOKE.GL_SYNC_STATUS_get();
  public static readonly int GL_SYNC_FLAGS = libtischPINVOKE.GL_SYNC_FLAGS_get();
  public static readonly int GL_SYNC_FENCE = libtischPINVOKE.GL_SYNC_FENCE_get();
  public static readonly int GL_SYNC_GPU_COMMANDS_COMPLETE = libtischPINVOKE.GL_SYNC_GPU_COMMANDS_COMPLETE_get();
  public static readonly int GL_UNSIGNALED = libtischPINVOKE.GL_UNSIGNALED_get();
  public static readonly int GL_SIGNALED = libtischPINVOKE.GL_SIGNALED_get();
  public static readonly int GL_ALREADY_SIGNALED = libtischPINVOKE.GL_ALREADY_SIGNALED_get();
  public static readonly int GL_TIMEOUT_EXPIRED = libtischPINVOKE.GL_TIMEOUT_EXPIRED_get();
  public static readonly int GL_CONDITION_SATISFIED = libtischPINVOKE.GL_CONDITION_SATISFIED_get();
  public static readonly int GL_WAIT_FAILED = libtischPINVOKE.GL_WAIT_FAILED_get();
  public static readonly int GL_SYNC_FLUSH_COMMANDS_BIT = libtischPINVOKE.GL_SYNC_FLUSH_COMMANDS_BIT_get();
  public static readonly ulong GL_TIMEOUT_IGNORED = libtischPINVOKE.GL_TIMEOUT_IGNORED_get();
  public static readonly int GL_SAMPLE_POSITION = libtischPINVOKE.GL_SAMPLE_POSITION_get();
  public static readonly int GL_SAMPLE_MASK = libtischPINVOKE.GL_SAMPLE_MASK_get();
  public static readonly int GL_SAMPLE_MASK_VALUE = libtischPINVOKE.GL_SAMPLE_MASK_VALUE_get();
  public static readonly int GL_MAX_SAMPLE_MASK_WORDS = libtischPINVOKE.GL_MAX_SAMPLE_MASK_WORDS_get();
  public static readonly int GL_TEXTURE_2D_MULTISAMPLE = libtischPINVOKE.GL_TEXTURE_2D_MULTISAMPLE_get();
  public static readonly int GL_PROXY_TEXTURE_2D_MULTISAMPLE = libtischPINVOKE.GL_PROXY_TEXTURE_2D_MULTISAMPLE_get();
  public static readonly int GL_TEXTURE_2D_MULTISAMPLE_ARRAY = libtischPINVOKE.GL_TEXTURE_2D_MULTISAMPLE_ARRAY_get();
  public static readonly int GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = libtischPINVOKE.GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY_get();
  public static readonly int GL_TEXTURE_BINDING_2D_MULTISAMPLE = libtischPINVOKE.GL_TEXTURE_BINDING_2D_MULTISAMPLE_get();
  public static readonly int GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = libtischPINVOKE.GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY_get();
  public static readonly int GL_TEXTURE_SAMPLES = libtischPINVOKE.GL_TEXTURE_SAMPLES_get();
  public static readonly int GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = libtischPINVOKE.GL_TEXTURE_FIXED_SAMPLE_LOCATIONS_get();
  public static readonly int GL_SAMPLER_2D_MULTISAMPLE = libtischPINVOKE.GL_SAMPLER_2D_MULTISAMPLE_get();
  public static readonly int GL_INT_SAMPLER_2D_MULTISAMPLE = libtischPINVOKE.GL_INT_SAMPLER_2D_MULTISAMPLE_get();
  public static readonly int GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = libtischPINVOKE.GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_get();
  public static readonly int GL_SAMPLER_2D_MULTISAMPLE_ARRAY = libtischPINVOKE.GL_SAMPLER_2D_MULTISAMPLE_ARRAY_get();
  public static readonly int GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = libtischPINVOKE.GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_get();
  public static readonly int GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = libtischPINVOKE.GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_get();
  public static readonly int GL_MAX_COLOR_TEXTURE_SAMPLES = libtischPINVOKE.GL_MAX_COLOR_TEXTURE_SAMPLES_get();
  public static readonly int GL_MAX_DEPTH_TEXTURE_SAMPLES = libtischPINVOKE.GL_MAX_DEPTH_TEXTURE_SAMPLES_get();
  public static readonly int GL_MAX_INTEGER_SAMPLES = libtischPINVOKE.GL_MAX_INTEGER_SAMPLES_get();
  public static readonly int GL_SAMPLE_SHADING = libtischPINVOKE.GL_SAMPLE_SHADING_get();
  public static readonly int GL_MIN_SAMPLE_SHADING_VALUE = libtischPINVOKE.GL_MIN_SAMPLE_SHADING_VALUE_get();
  public static readonly int GL_TEXTURE_CUBE_MAP_ARRAY = libtischPINVOKE.GL_TEXTURE_CUBE_MAP_ARRAY_get();
  public static readonly int GL_TEXTURE_BINDING_CUBE_MAP_ARRAY = libtischPINVOKE.GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_get();
  public static readonly int GL_PROXY_TEXTURE_CUBE_MAP_ARRAY = libtischPINVOKE.GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_get();
  public static readonly int GL_SAMPLER_CUBE_MAP_ARRAY = libtischPINVOKE.GL_SAMPLER_CUBE_MAP_ARRAY_get();
  public static readonly int GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW = libtischPINVOKE.GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_get();
  public static readonly int GL_INT_SAMPLER_CUBE_MAP_ARRAY = libtischPINVOKE.GL_INT_SAMPLER_CUBE_MAP_ARRAY_get();
  public static readonly int GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = libtischPINVOKE.GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_get();
  public static readonly int GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET = libtischPINVOKE.GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_get();
  public static readonly int GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET = libtischPINVOKE.GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_get();
  public static readonly int GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS = libtischPINVOKE.GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_get();
  public static readonly int GL_ABGR_EXT = libtischPINVOKE.GL_ABGR_EXT_get();
  public static readonly int GL_CONSTANT_COLOR_EXT = libtischPINVOKE.GL_CONSTANT_COLOR_EXT_get();
  public static readonly int GL_ONE_MINUS_CONSTANT_COLOR_EXT = libtischPINVOKE.GL_ONE_MINUS_CONSTANT_COLOR_EXT_get();
  public static readonly int GL_CONSTANT_ALPHA_EXT = libtischPINVOKE.GL_CONSTANT_ALPHA_EXT_get();
  public static readonly int GL_ONE_MINUS_CONSTANT_ALPHA_EXT = libtischPINVOKE.GL_ONE_MINUS_CONSTANT_ALPHA_EXT_get();
  public static readonly int GL_BLEND_COLOR_EXT = libtischPINVOKE.GL_BLEND_COLOR_EXT_get();
  public static readonly int GL_POLYGON_OFFSET_EXT = libtischPINVOKE.GL_POLYGON_OFFSET_EXT_get();
  public static readonly int GL_POLYGON_OFFSET_FACTOR_EXT = libtischPINVOKE.GL_POLYGON_OFFSET_FACTOR_EXT_get();
  public static readonly int GL_POLYGON_OFFSET_BIAS_EXT = libtischPINVOKE.GL_POLYGON_OFFSET_BIAS_EXT_get();
  public static readonly int GL_ALPHA4_EXT = libtischPINVOKE.GL_ALPHA4_EXT_get();
  public static readonly int GL_ALPHA8_EXT = libtischPINVOKE.GL_ALPHA8_EXT_get();
  public static readonly int GL_ALPHA12_EXT = libtischPINVOKE.GL_ALPHA12_EXT_get();
  public static readonly int GL_ALPHA16_EXT = libtischPINVOKE.GL_ALPHA16_EXT_get();
  public static readonly int GL_LUMINANCE4_EXT = libtischPINVOKE.GL_LUMINANCE4_EXT_get();
  public static readonly int GL_LUMINANCE8_EXT = libtischPINVOKE.GL_LUMINANCE8_EXT_get();
  public static readonly int GL_LUMINANCE12_EXT = libtischPINVOKE.GL_LUMINANCE12_EXT_get();
  public static readonly int GL_LUMINANCE16_EXT = libtischPINVOKE.GL_LUMINANCE16_EXT_get();
  public static readonly int GL_LUMINANCE4_ALPHA4_EXT = libtischPINVOKE.GL_LUMINANCE4_ALPHA4_EXT_get();
  public static readonly int GL_LUMINANCE6_ALPHA2_EXT = libtischPINVOKE.GL_LUMINANCE6_ALPHA2_EXT_get();
  public static readonly int GL_LUMINANCE8_ALPHA8_EXT = libtischPINVOKE.GL_LUMINANCE8_ALPHA8_EXT_get();
  public static readonly int GL_LUMINANCE12_ALPHA4_EXT = libtischPINVOKE.GL_LUMINANCE12_ALPHA4_EXT_get();
  public static readonly int GL_LUMINANCE12_ALPHA12_EXT = libtischPINVOKE.GL_LUMINANCE12_ALPHA12_EXT_get();
  public static readonly int GL_LUMINANCE16_ALPHA16_EXT = libtischPINVOKE.GL_LUMINANCE16_ALPHA16_EXT_get();
  public static readonly int GL_INTENSITY_EXT = libtischPINVOKE.GL_INTENSITY_EXT_get();
  public static readonly int GL_INTENSITY4_EXT = libtischPINVOKE.GL_INTENSITY4_EXT_get();
  public static readonly int GL_INTENSITY8_EXT = libtischPINVOKE.GL_INTENSITY8_EXT_get();
  public static readonly int GL_INTENSITY12_EXT = libtischPINVOKE.GL_INTENSITY12_EXT_get();
  public static readonly int GL_INTENSITY16_EXT = libtischPINVOKE.GL_INTENSITY16_EXT_get();
  public static readonly int GL_RGB2_EXT = libtischPINVOKE.GL_RGB2_EXT_get();
  public static readonly int GL_RGB4_EXT = libtischPINVOKE.GL_RGB4_EXT_get();
  public static readonly int GL_RGB5_EXT = libtischPINVOKE.GL_RGB5_EXT_get();
  public static readonly int GL_RGB8_EXT = libtischPINVOKE.GL_RGB8_EXT_get();
  public static readonly int GL_RGB10_EXT = libtischPINVOKE.GL_RGB10_EXT_get();
  public static readonly int GL_RGB12_EXT = libtischPINVOKE.GL_RGB12_EXT_get();
  public static readonly int GL_RGB16_EXT = libtischPINVOKE.GL_RGB16_EXT_get();
  public static readonly int GL_RGBA2_EXT = libtischPINVOKE.GL_RGBA2_EXT_get();
  public static readonly int GL_RGBA4_EXT = libtischPINVOKE.GL_RGBA4_EXT_get();
  public static readonly int GL_RGB5_A1_EXT = libtischPINVOKE.GL_RGB5_A1_EXT_get();
  public static readonly int GL_RGBA8_EXT = libtischPINVOKE.GL_RGBA8_EXT_get();
  public static readonly int GL_RGB10_A2_EXT = libtischPINVOKE.GL_RGB10_A2_EXT_get();
  public static readonly int GL_RGBA12_EXT = libtischPINVOKE.GL_RGBA12_EXT_get();
  public static readonly int GL_RGBA16_EXT = libtischPINVOKE.GL_RGBA16_EXT_get();
  public static readonly int GL_TEXTURE_RED_SIZE_EXT = libtischPINVOKE.GL_TEXTURE_RED_SIZE_EXT_get();
  public static readonly int GL_TEXTURE_GREEN_SIZE_EXT = libtischPINVOKE.GL_TEXTURE_GREEN_SIZE_EXT_get();
  public static readonly int GL_TEXTURE_BLUE_SIZE_EXT = libtischPINVOKE.GL_TEXTURE_BLUE_SIZE_EXT_get();
  public static readonly int GL_TEXTURE_ALPHA_SIZE_EXT = libtischPINVOKE.GL_TEXTURE_ALPHA_SIZE_EXT_get();
  public static readonly int GL_TEXTURE_LUMINANCE_SIZE_EXT = libtischPINVOKE.GL_TEXTURE_LUMINANCE_SIZE_EXT_get();
  public static readonly int GL_TEXTURE_INTENSITY_SIZE_EXT = libtischPINVOKE.GL_TEXTURE_INTENSITY_SIZE_EXT_get();
  public static readonly int GL_REPLACE_EXT = libtischPINVOKE.GL_REPLACE_EXT_get();
  public static readonly int GL_PROXY_TEXTURE_1D_EXT = libtischPINVOKE.GL_PROXY_TEXTURE_1D_EXT_get();
  public static readonly int GL_PROXY_TEXTURE_2D_EXT = libtischPINVOKE.GL_PROXY_TEXTURE_2D_EXT_get();
  public static readonly int GL_TEXTURE_TOO_LARGE_EXT = libtischPINVOKE.GL_TEXTURE_TOO_LARGE_EXT_get();
  public static readonly int GL_PACK_SKIP_IMAGES_EXT = libtischPINVOKE.GL_PACK_SKIP_IMAGES_EXT_get();
  public static readonly int GL_PACK_IMAGE_HEIGHT_EXT = libtischPINVOKE.GL_PACK_IMAGE_HEIGHT_EXT_get();
  public static readonly int GL_UNPACK_SKIP_IMAGES_EXT = libtischPINVOKE.GL_UNPACK_SKIP_IMAGES_EXT_get();
  public static readonly int GL_UNPACK_IMAGE_HEIGHT_EXT = libtischPINVOKE.GL_UNPACK_IMAGE_HEIGHT_EXT_get();
  public static readonly int GL_TEXTURE_3D_EXT = libtischPINVOKE.GL_TEXTURE_3D_EXT_get();
  public static readonly int GL_PROXY_TEXTURE_3D_EXT = libtischPINVOKE.GL_PROXY_TEXTURE_3D_EXT_get();
  public static readonly int GL_TEXTURE_DEPTH_EXT = libtischPINVOKE.GL_TEXTURE_DEPTH_EXT_get();
  public static readonly int GL_TEXTURE_WRAP_R_EXT = libtischPINVOKE.GL_TEXTURE_WRAP_R_EXT_get();
  public static readonly int GL_MAX_3D_TEXTURE_SIZE_EXT = libtischPINVOKE.GL_MAX_3D_TEXTURE_SIZE_EXT_get();
  public static readonly int GL_FILTER4_SGIS = libtischPINVOKE.GL_FILTER4_SGIS_get();
  public static readonly int GL_TEXTURE_FILTER4_SIZE_SGIS = libtischPINVOKE.GL_TEXTURE_FILTER4_SIZE_SGIS_get();
  public static readonly int GL_HISTOGRAM_EXT = libtischPINVOKE.GL_HISTOGRAM_EXT_get();
  public static readonly int GL_PROXY_HISTOGRAM_EXT = libtischPINVOKE.GL_PROXY_HISTOGRAM_EXT_get();
  public static readonly int GL_HISTOGRAM_WIDTH_EXT = libtischPINVOKE.GL_HISTOGRAM_WIDTH_EXT_get();
  public static readonly int GL_HISTOGRAM_FORMAT_EXT = libtischPINVOKE.GL_HISTOGRAM_FORMAT_EXT_get();
  public static readonly int GL_HISTOGRAM_RED_SIZE_EXT = libtischPINVOKE.GL_HISTOGRAM_RED_SIZE_EXT_get();
  public static readonly int GL_HISTOGRAM_GREEN_SIZE_EXT = libtischPINVOKE.GL_HISTOGRAM_GREEN_SIZE_EXT_get();
  public static readonly int GL_HISTOGRAM_BLUE_SIZE_EXT = libtischPINVOKE.GL_HISTOGRAM_BLUE_SIZE_EXT_get();
  public static readonly int GL_HISTOGRAM_ALPHA_SIZE_EXT = libtischPINVOKE.GL_HISTOGRAM_ALPHA_SIZE_EXT_get();
  public static readonly int GL_HISTOGRAM_LUMINANCE_SIZE_EXT = libtischPINVOKE.GL_HISTOGRAM_LUMINANCE_SIZE_EXT_get();
  public static readonly int GL_HISTOGRAM_SINK_EXT = libtischPINVOKE.GL_HISTOGRAM_SINK_EXT_get();
  public static readonly int GL_MINMAX_EXT = libtischPINVOKE.GL_MINMAX_EXT_get();
  public static readonly int GL_MINMAX_FORMAT_EXT = libtischPINVOKE.GL_MINMAX_FORMAT_EXT_get();
  public static readonly int GL_MINMAX_SINK_EXT = libtischPINVOKE.GL_MINMAX_SINK_EXT_get();
  public static readonly int GL_TABLE_TOO_LARGE_EXT = libtischPINVOKE.GL_TABLE_TOO_LARGE_EXT_get();
  public static readonly int GL_CONVOLUTION_1D_EXT = libtischPINVOKE.GL_CONVOLUTION_1D_EXT_get();
  public static readonly int GL_CONVOLUTION_2D_EXT = libtischPINVOKE.GL_CONVOLUTION_2D_EXT_get();
  public static readonly int GL_SEPARABLE_2D_EXT = libtischPINVOKE.GL_SEPARABLE_2D_EXT_get();
  public static readonly int GL_CONVOLUTION_BORDER_MODE_EXT = libtischPINVOKE.GL_CONVOLUTION_BORDER_MODE_EXT_get();
  public static readonly int GL_CONVOLUTION_FILTER_SCALE_EXT = libtischPINVOKE.GL_CONVOLUTION_FILTER_SCALE_EXT_get();
  public static readonly int GL_CONVOLUTION_FILTER_BIAS_EXT = libtischPINVOKE.GL_CONVOLUTION_FILTER_BIAS_EXT_get();
  public static readonly int GL_REDUCE_EXT = libtischPINVOKE.GL_REDUCE_EXT_get();
  public static readonly int GL_CONVOLUTION_FORMAT_EXT = libtischPINVOKE.GL_CONVOLUTION_FORMAT_EXT_get();
  public static readonly int GL_CONVOLUTION_WIDTH_EXT = libtischPINVOKE.GL_CONVOLUTION_WIDTH_EXT_get();
  public static readonly int GL_CONVOLUTION_HEIGHT_EXT = libtischPINVOKE.GL_CONVOLUTION_HEIGHT_EXT_get();
  public static readonly int GL_MAX_CONVOLUTION_WIDTH_EXT = libtischPINVOKE.GL_MAX_CONVOLUTION_WIDTH_EXT_get();
  public static readonly int GL_MAX_CONVOLUTION_HEIGHT_EXT = libtischPINVOKE.GL_MAX_CONVOLUTION_HEIGHT_EXT_get();
  public static readonly int GL_POST_CONVOLUTION_RED_SCALE_EXT = libtischPINVOKE.GL_POST_CONVOLUTION_RED_SCALE_EXT_get();
  public static readonly int GL_POST_CONVOLUTION_GREEN_SCALE_EXT = libtischPINVOKE.GL_POST_CONVOLUTION_GREEN_SCALE_EXT_get();
  public static readonly int GL_POST_CONVOLUTION_BLUE_SCALE_EXT = libtischPINVOKE.GL_POST_CONVOLUTION_BLUE_SCALE_EXT_get();
  public static readonly int GL_POST_CONVOLUTION_ALPHA_SCALE_EXT = libtischPINVOKE.GL_POST_CONVOLUTION_ALPHA_SCALE_EXT_get();
  public static readonly int GL_POST_CONVOLUTION_RED_BIAS_EXT = libtischPINVOKE.GL_POST_CONVOLUTION_RED_BIAS_EXT_get();
  public static readonly int GL_POST_CONVOLUTION_GREEN_BIAS_EXT = libtischPINVOKE.GL_POST_CONVOLUTION_GREEN_BIAS_EXT_get();
  public static readonly int GL_POST_CONVOLUTION_BLUE_BIAS_EXT = libtischPINVOKE.GL_POST_CONVOLUTION_BLUE_BIAS_EXT_get();
  public static readonly int GL_POST_CONVOLUTION_ALPHA_BIAS_EXT = libtischPINVOKE.GL_POST_CONVOLUTION_ALPHA_BIAS_EXT_get();
  public static readonly int GL_COLOR_MATRIX_SGI = libtischPINVOKE.GL_COLOR_MATRIX_SGI_get();
  public static readonly int GL_COLOR_MATRIX_STACK_DEPTH_SGI = libtischPINVOKE.GL_COLOR_MATRIX_STACK_DEPTH_SGI_get();
  public static readonly int GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI = libtischPINVOKE.GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI_get();
  public static readonly int GL_POST_COLOR_MATRIX_RED_SCALE_SGI = libtischPINVOKE.GL_POST_COLOR_MATRIX_RED_SCALE_SGI_get();
  public static readonly int GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI = libtischPINVOKE.GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI_get();
  public static readonly int GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI = libtischPINVOKE.GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI_get();
  public static readonly int GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI = libtischPINVOKE.GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI_get();
  public static readonly int GL_POST_COLOR_MATRIX_RED_BIAS_SGI = libtischPINVOKE.GL_POST_COLOR_MATRIX_RED_BIAS_SGI_get();
  public static readonly int GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI = libtischPINVOKE.GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI_get();
  public static readonly int GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI = libtischPINVOKE.GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI_get();
  public static readonly int GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI = libtischPINVOKE.GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI_get();
  public static readonly int GL_COLOR_TABLE_SGI = libtischPINVOKE.GL_COLOR_TABLE_SGI_get();
  public static readonly int GL_POST_CONVOLUTION_COLOR_TABLE_SGI = libtischPINVOKE.GL_POST_CONVOLUTION_COLOR_TABLE_SGI_get();
  public static readonly int GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI = libtischPINVOKE.GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI_get();
  public static readonly int GL_PROXY_COLOR_TABLE_SGI = libtischPINVOKE.GL_PROXY_COLOR_TABLE_SGI_get();
  public static readonly int GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI = libtischPINVOKE.GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI_get();
  public static readonly int GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI = libtischPINVOKE.GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI_get();
  public static readonly int GL_COLOR_TABLE_SCALE_SGI = libtischPINVOKE.GL_COLOR_TABLE_SCALE_SGI_get();
  public static readonly int GL_COLOR_TABLE_BIAS_SGI = libtischPINVOKE.GL_COLOR_TABLE_BIAS_SGI_get();
  public static readonly int GL_COLOR_TABLE_FORMAT_SGI = libtischPINVOKE.GL_COLOR_TABLE_FORMAT_SGI_get();
  public static readonly int GL_COLOR_TABLE_WIDTH_SGI = libtischPINVOKE.GL_COLOR_TABLE_WIDTH_SGI_get();
  public static readonly int GL_COLOR_TABLE_RED_SIZE_SGI = libtischPINVOKE.GL_COLOR_TABLE_RED_SIZE_SGI_get();
  public static readonly int GL_COLOR_TABLE_GREEN_SIZE_SGI = libtischPINVOKE.GL_COLOR_TABLE_GREEN_SIZE_SGI_get();
  public static readonly int GL_COLOR_TABLE_BLUE_SIZE_SGI = libtischPINVOKE.GL_COLOR_TABLE_BLUE_SIZE_SGI_get();
  public static readonly int GL_COLOR_TABLE_ALPHA_SIZE_SGI = libtischPINVOKE.GL_COLOR_TABLE_ALPHA_SIZE_SGI_get();
  public static readonly int GL_COLOR_TABLE_LUMINANCE_SIZE_SGI = libtischPINVOKE.GL_COLOR_TABLE_LUMINANCE_SIZE_SGI_get();
  public static readonly int GL_COLOR_TABLE_INTENSITY_SIZE_SGI = libtischPINVOKE.GL_COLOR_TABLE_INTENSITY_SIZE_SGI_get();
  public static readonly int GL_PIXEL_TEXTURE_SGIS = libtischPINVOKE.GL_PIXEL_TEXTURE_SGIS_get();
  public static readonly int GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS = libtischPINVOKE.GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS_get();
  public static readonly int GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS = libtischPINVOKE.GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS_get();
  public static readonly int GL_PIXEL_GROUP_COLOR_SGIS = libtischPINVOKE.GL_PIXEL_GROUP_COLOR_SGIS_get();
  public static readonly int GL_PIXEL_TEX_GEN_SGIX = libtischPINVOKE.GL_PIXEL_TEX_GEN_SGIX_get();
  public static readonly int GL_PIXEL_TEX_GEN_MODE_SGIX = libtischPINVOKE.GL_PIXEL_TEX_GEN_MODE_SGIX_get();
  public static readonly int GL_PACK_SKIP_VOLUMES_SGIS = libtischPINVOKE.GL_PACK_SKIP_VOLUMES_SGIS_get();
  public static readonly int GL_PACK_IMAGE_DEPTH_SGIS = libtischPINVOKE.GL_PACK_IMAGE_DEPTH_SGIS_get();
  public static readonly int GL_UNPACK_SKIP_VOLUMES_SGIS = libtischPINVOKE.GL_UNPACK_SKIP_VOLUMES_SGIS_get();
  public static readonly int GL_UNPACK_IMAGE_DEPTH_SGIS = libtischPINVOKE.GL_UNPACK_IMAGE_DEPTH_SGIS_get();
  public static readonly int GL_TEXTURE_4D_SGIS = libtischPINVOKE.GL_TEXTURE_4D_SGIS_get();
  public static readonly int GL_PROXY_TEXTURE_4D_SGIS = libtischPINVOKE.GL_PROXY_TEXTURE_4D_SGIS_get();
  public static readonly int GL_TEXTURE_4DSIZE_SGIS = libtischPINVOKE.GL_TEXTURE_4DSIZE_SGIS_get();
  public static readonly int GL_TEXTURE_WRAP_Q_SGIS = libtischPINVOKE.GL_TEXTURE_WRAP_Q_SGIS_get();
  public static readonly int GL_MAX_4D_TEXTURE_SIZE_SGIS = libtischPINVOKE.GL_MAX_4D_TEXTURE_SIZE_SGIS_get();
  public static readonly int GL_TEXTURE_4D_BINDING_SGIS = libtischPINVOKE.GL_TEXTURE_4D_BINDING_SGIS_get();
  public static readonly int GL_TEXTURE_COLOR_TABLE_SGI = libtischPINVOKE.GL_TEXTURE_COLOR_TABLE_SGI_get();
  public static readonly int GL_PROXY_TEXTURE_COLOR_TABLE_SGI = libtischPINVOKE.GL_PROXY_TEXTURE_COLOR_TABLE_SGI_get();
  public static readonly int GL_CMYK_EXT = libtischPINVOKE.GL_CMYK_EXT_get();
  public static readonly int GL_CMYKA_EXT = libtischPINVOKE.GL_CMYKA_EXT_get();
  public static readonly int GL_PACK_CMYK_HINT_EXT = libtischPINVOKE.GL_PACK_CMYK_HINT_EXT_get();
  public static readonly int GL_UNPACK_CMYK_HINT_EXT = libtischPINVOKE.GL_UNPACK_CMYK_HINT_EXT_get();
  public static readonly int GL_TEXTURE_PRIORITY_EXT = libtischPINVOKE.GL_TEXTURE_PRIORITY_EXT_get();
  public static readonly int GL_TEXTURE_RESIDENT_EXT = libtischPINVOKE.GL_TEXTURE_RESIDENT_EXT_get();
  public static readonly int GL_TEXTURE_1D_BINDING_EXT = libtischPINVOKE.GL_TEXTURE_1D_BINDING_EXT_get();
  public static readonly int GL_TEXTURE_2D_BINDING_EXT = libtischPINVOKE.GL_TEXTURE_2D_BINDING_EXT_get();
  public static readonly int GL_TEXTURE_3D_BINDING_EXT = libtischPINVOKE.GL_TEXTURE_3D_BINDING_EXT_get();
  public static readonly int GL_DETAIL_TEXTURE_2D_SGIS = libtischPINVOKE.GL_DETAIL_TEXTURE_2D_SGIS_get();
  public static readonly int GL_DETAIL_TEXTURE_2D_BINDING_SGIS = libtischPINVOKE.GL_DETAIL_TEXTURE_2D_BINDING_SGIS_get();
  public static readonly int GL_LINEAR_DETAIL_SGIS = libtischPINVOKE.GL_LINEAR_DETAIL_SGIS_get();
  public static readonly int GL_LINEAR_DETAIL_ALPHA_SGIS = libtischPINVOKE.GL_LINEAR_DETAIL_ALPHA_SGIS_get();
  public static readonly int GL_LINEAR_DETAIL_COLOR_SGIS = libtischPINVOKE.GL_LINEAR_DETAIL_COLOR_SGIS_get();
  public static readonly int GL_DETAIL_TEXTURE_LEVEL_SGIS = libtischPINVOKE.GL_DETAIL_TEXTURE_LEVEL_SGIS_get();
  public static readonly int GL_DETAIL_TEXTURE_MODE_SGIS = libtischPINVOKE.GL_DETAIL_TEXTURE_MODE_SGIS_get();
  public static readonly int GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS = libtischPINVOKE.GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS_get();
  public static readonly int GL_LINEAR_SHARPEN_SGIS = libtischPINVOKE.GL_LINEAR_SHARPEN_SGIS_get();
  public static readonly int GL_LINEAR_SHARPEN_ALPHA_SGIS = libtischPINVOKE.GL_LINEAR_SHARPEN_ALPHA_SGIS_get();
  public static readonly int GL_LINEAR_SHARPEN_COLOR_SGIS = libtischPINVOKE.GL_LINEAR_SHARPEN_COLOR_SGIS_get();
  public static readonly int GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS = libtischPINVOKE.GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS_get();
  public static readonly int GL_UNSIGNED_BYTE_3_3_2_EXT = libtischPINVOKE.GL_UNSIGNED_BYTE_3_3_2_EXT_get();
  public static readonly int GL_UNSIGNED_SHORT_4_4_4_4_EXT = libtischPINVOKE.GL_UNSIGNED_SHORT_4_4_4_4_EXT_get();
  public static readonly int GL_UNSIGNED_SHORT_5_5_5_1_EXT = libtischPINVOKE.GL_UNSIGNED_SHORT_5_5_5_1_EXT_get();
  public static readonly int GL_UNSIGNED_INT_8_8_8_8_EXT = libtischPINVOKE.GL_UNSIGNED_INT_8_8_8_8_EXT_get();
  public static readonly int GL_UNSIGNED_INT_10_10_10_2_EXT = libtischPINVOKE.GL_UNSIGNED_INT_10_10_10_2_EXT_get();
  public static readonly int GL_TEXTURE_MIN_LOD_SGIS = libtischPINVOKE.GL_TEXTURE_MIN_LOD_SGIS_get();
  public static readonly int GL_TEXTURE_MAX_LOD_SGIS = libtischPINVOKE.GL_TEXTURE_MAX_LOD_SGIS_get();
  public static readonly int GL_TEXTURE_BASE_LEVEL_SGIS = libtischPINVOKE.GL_TEXTURE_BASE_LEVEL_SGIS_get();
  public static readonly int GL_TEXTURE_MAX_LEVEL_SGIS = libtischPINVOKE.GL_TEXTURE_MAX_LEVEL_SGIS_get();
  public static readonly int GL_MULTISAMPLE_SGIS = libtischPINVOKE.GL_MULTISAMPLE_SGIS_get();
  public static readonly int GL_SAMPLE_ALPHA_TO_MASK_SGIS = libtischPINVOKE.GL_SAMPLE_ALPHA_TO_MASK_SGIS_get();
  public static readonly int GL_SAMPLE_ALPHA_TO_ONE_SGIS = libtischPINVOKE.GL_SAMPLE_ALPHA_TO_ONE_SGIS_get();
  public static readonly int GL_SAMPLE_MASK_SGIS = libtischPINVOKE.GL_SAMPLE_MASK_SGIS_get();
  public static readonly int GL_1PASS_SGIS = libtischPINVOKE.GL_1PASS_SGIS_get();
  public static readonly int GL_2PASS_0_SGIS = libtischPINVOKE.GL_2PASS_0_SGIS_get();
  public static readonly int GL_2PASS_1_SGIS = libtischPINVOKE.GL_2PASS_1_SGIS_get();
  public static readonly int GL_4PASS_0_SGIS = libtischPINVOKE.GL_4PASS_0_SGIS_get();
  public static readonly int GL_4PASS_1_SGIS = libtischPINVOKE.GL_4PASS_1_SGIS_get();
  public static readonly int GL_4PASS_2_SGIS = libtischPINVOKE.GL_4PASS_2_SGIS_get();
  public static readonly int GL_4PASS_3_SGIS = libtischPINVOKE.GL_4PASS_3_SGIS_get();
  public static readonly int GL_SAMPLE_BUFFERS_SGIS = libtischPINVOKE.GL_SAMPLE_BUFFERS_SGIS_get();
  public static readonly int GL_SAMPLES_SGIS = libtischPINVOKE.GL_SAMPLES_SGIS_get();
  public static readonly int GL_SAMPLE_MASK_VALUE_SGIS = libtischPINVOKE.GL_SAMPLE_MASK_VALUE_SGIS_get();
  public static readonly int GL_SAMPLE_MASK_INVERT_SGIS = libtischPINVOKE.GL_SAMPLE_MASK_INVERT_SGIS_get();
  public static readonly int GL_SAMPLE_PATTERN_SGIS = libtischPINVOKE.GL_SAMPLE_PATTERN_SGIS_get();
  public static readonly int GL_RESCALE_NORMAL_EXT = libtischPINVOKE.GL_RESCALE_NORMAL_EXT_get();
  public static readonly int GL_VERTEX_ARRAY_EXT = libtischPINVOKE.GL_VERTEX_ARRAY_EXT_get();
  public static readonly int GL_NORMAL_ARRAY_EXT = libtischPINVOKE.GL_NORMAL_ARRAY_EXT_get();
  public static readonly int GL_COLOR_ARRAY_EXT = libtischPINVOKE.GL_COLOR_ARRAY_EXT_get();
  public static readonly int GL_INDEX_ARRAY_EXT = libtischPINVOKE.GL_INDEX_ARRAY_EXT_get();
  public static readonly int GL_TEXTURE_COORD_ARRAY_EXT = libtischPINVOKE.GL_TEXTURE_COORD_ARRAY_EXT_get();
  public static readonly int GL_EDGE_FLAG_ARRAY_EXT = libtischPINVOKE.GL_EDGE_FLAG_ARRAY_EXT_get();
  public static readonly int GL_VERTEX_ARRAY_SIZE_EXT = libtischPINVOKE.GL_VERTEX_ARRAY_SIZE_EXT_get();
  public static readonly int GL_VERTEX_ARRAY_TYPE_EXT = libtischPINVOKE.GL_VERTEX_ARRAY_TYPE_EXT_get();
  public static readonly int GL_VERTEX_ARRAY_STRIDE_EXT = libtischPINVOKE.GL_VERTEX_ARRAY_STRIDE_EXT_get();
  public static readonly int GL_VERTEX_ARRAY_COUNT_EXT = libtischPINVOKE.GL_VERTEX_ARRAY_COUNT_EXT_get();
  public static readonly int GL_NORMAL_ARRAY_TYPE_EXT = libtischPINVOKE.GL_NORMAL_ARRAY_TYPE_EXT_get();
  public static readonly int GL_NORMAL_ARRAY_STRIDE_EXT = libtischPINVOKE.GL_NORMAL_ARRAY_STRIDE_EXT_get();
  public static readonly int GL_NORMAL_ARRAY_COUNT_EXT = libtischPINVOKE.GL_NORMAL_ARRAY_COUNT_EXT_get();
  public static readonly int GL_COLOR_ARRAY_SIZE_EXT = libtischPINVOKE.GL_COLOR_ARRAY_SIZE_EXT_get();
  public static readonly int GL_COLOR_ARRAY_TYPE_EXT = libtischPINVOKE.GL_COLOR_ARRAY_TYPE_EXT_get();
  public static readonly int GL_COLOR_ARRAY_STRIDE_EXT = libtischPINVOKE.GL_COLOR_ARRAY_STRIDE_EXT_get();
  public static readonly int GL_COLOR_ARRAY_COUNT_EXT = libtischPINVOKE.GL_COLOR_ARRAY_COUNT_EXT_get();
  public static readonly int GL_INDEX_ARRAY_TYPE_EXT = libtischPINVOKE.GL_INDEX_ARRAY_TYPE_EXT_get();
  public static readonly int GL_INDEX_ARRAY_STRIDE_EXT = libtischPINVOKE.GL_INDEX_ARRAY_STRIDE_EXT_get();
  public static readonly int GL_INDEX_ARRAY_COUNT_EXT = libtischPINVOKE.GL_INDEX_ARRAY_COUNT_EXT_get();
  public static readonly int GL_TEXTURE_COORD_ARRAY_SIZE_EXT = libtischPINVOKE.GL_TEXTURE_COORD_ARRAY_SIZE_EXT_get();
  public static readonly int GL_TEXTURE_COORD_ARRAY_TYPE_EXT = libtischPINVOKE.GL_TEXTURE_COORD_ARRAY_TYPE_EXT_get();
  public static readonly int GL_TEXTURE_COORD_ARRAY_STRIDE_EXT = libtischPINVOKE.GL_TEXTURE_COORD_ARRAY_STRIDE_EXT_get();
  public static readonly int GL_TEXTURE_COORD_ARRAY_COUNT_EXT = libtischPINVOKE.GL_TEXTURE_COORD_ARRAY_COUNT_EXT_get();
  public static readonly int GL_EDGE_FLAG_ARRAY_STRIDE_EXT = libtischPINVOKE.GL_EDGE_FLAG_ARRAY_STRIDE_EXT_get();
  public static readonly int GL_EDGE_FLAG_ARRAY_COUNT_EXT = libtischPINVOKE.GL_EDGE_FLAG_ARRAY_COUNT_EXT_get();
  public static readonly int GL_VERTEX_ARRAY_POINTER_EXT = libtischPINVOKE.GL_VERTEX_ARRAY_POINTER_EXT_get();
  public static readonly int GL_NORMAL_ARRAY_POINTER_EXT = libtischPINVOKE.GL_NORMAL_ARRAY_POINTER_EXT_get();
  public static readonly int GL_COLOR_ARRAY_POINTER_EXT = libtischPINVOKE.GL_COLOR_ARRAY_POINTER_EXT_get();
  public static readonly int GL_INDEX_ARRAY_POINTER_EXT = libtischPINVOKE.GL_INDEX_ARRAY_POINTER_EXT_get();
  public static readonly int GL_TEXTURE_COORD_ARRAY_POINTER_EXT = libtischPINVOKE.GL_TEXTURE_COORD_ARRAY_POINTER_EXT_get();
  public static readonly int GL_EDGE_FLAG_ARRAY_POINTER_EXT = libtischPINVOKE.GL_EDGE_FLAG_ARRAY_POINTER_EXT_get();
  public static readonly int GL_GENERATE_MIPMAP_SGIS = libtischPINVOKE.GL_GENERATE_MIPMAP_SGIS_get();
  public static readonly int GL_GENERATE_MIPMAP_HINT_SGIS = libtischPINVOKE.GL_GENERATE_MIPMAP_HINT_SGIS_get();
  public static readonly int GL_LINEAR_CLIPMAP_LINEAR_SGIX = libtischPINVOKE.GL_LINEAR_CLIPMAP_LINEAR_SGIX_get();
  public static readonly int GL_TEXTURE_CLIPMAP_CENTER_SGIX = libtischPINVOKE.GL_TEXTURE_CLIPMAP_CENTER_SGIX_get();
  public static readonly int GL_TEXTURE_CLIPMAP_FRAME_SGIX = libtischPINVOKE.GL_TEXTURE_CLIPMAP_FRAME_SGIX_get();
  public static readonly int GL_TEXTURE_CLIPMAP_OFFSET_SGIX = libtischPINVOKE.GL_TEXTURE_CLIPMAP_OFFSET_SGIX_get();
  public static readonly int GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX = libtischPINVOKE.GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX_get();
  public static readonly int GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX = libtischPINVOKE.GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX_get();
  public static readonly int GL_TEXTURE_CLIPMAP_DEPTH_SGIX = libtischPINVOKE.GL_TEXTURE_CLIPMAP_DEPTH_SGIX_get();
  public static readonly int GL_MAX_CLIPMAP_DEPTH_SGIX = libtischPINVOKE.GL_MAX_CLIPMAP_DEPTH_SGIX_get();
  public static readonly int GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX = libtischPINVOKE.GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX_get();
  public static readonly int GL_NEAREST_CLIPMAP_NEAREST_SGIX = libtischPINVOKE.GL_NEAREST_CLIPMAP_NEAREST_SGIX_get();
  public static readonly int GL_NEAREST_CLIPMAP_LINEAR_SGIX = libtischPINVOKE.GL_NEAREST_CLIPMAP_LINEAR_SGIX_get();
  public static readonly int GL_LINEAR_CLIPMAP_NEAREST_SGIX = libtischPINVOKE.GL_LINEAR_CLIPMAP_NEAREST_SGIX_get();
  public static readonly int GL_TEXTURE_COMPARE_SGIX = libtischPINVOKE.GL_TEXTURE_COMPARE_SGIX_get();
  public static readonly int GL_TEXTURE_COMPARE_OPERATOR_SGIX = libtischPINVOKE.GL_TEXTURE_COMPARE_OPERATOR_SGIX_get();
  public static readonly int GL_TEXTURE_LEQUAL_R_SGIX = libtischPINVOKE.GL_TEXTURE_LEQUAL_R_SGIX_get();
  public static readonly int GL_TEXTURE_GEQUAL_R_SGIX = libtischPINVOKE.GL_TEXTURE_GEQUAL_R_SGIX_get();
  public static readonly int GL_CLAMP_TO_EDGE_SGIS = libtischPINVOKE.GL_CLAMP_TO_EDGE_SGIS_get();
  public static readonly int GL_CLAMP_TO_BORDER_SGIS = libtischPINVOKE.GL_CLAMP_TO_BORDER_SGIS_get();
  public static readonly int GL_FUNC_ADD_EXT = libtischPINVOKE.GL_FUNC_ADD_EXT_get();
  public static readonly int GL_MIN_EXT = libtischPINVOKE.GL_MIN_EXT_get();
  public static readonly int GL_MAX_EXT = libtischPINVOKE.GL_MAX_EXT_get();
  public static readonly int GL_BLEND_EQUATION_EXT = libtischPINVOKE.GL_BLEND_EQUATION_EXT_get();
  public static readonly int GL_FUNC_SUBTRACT_EXT = libtischPINVOKE.GL_FUNC_SUBTRACT_EXT_get();
  public static readonly int GL_FUNC_REVERSE_SUBTRACT_EXT = libtischPINVOKE.GL_FUNC_REVERSE_SUBTRACT_EXT_get();
  public static readonly int GL_INTERLACE_SGIX = libtischPINVOKE.GL_INTERLACE_SGIX_get();
  public static readonly int GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX = libtischPINVOKE.GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX_get();
  public static readonly int GL_PIXEL_TILE_CACHE_INCREMENT_SGIX = libtischPINVOKE.GL_PIXEL_TILE_CACHE_INCREMENT_SGIX_get();
  public static readonly int GL_PIXEL_TILE_WIDTH_SGIX = libtischPINVOKE.GL_PIXEL_TILE_WIDTH_SGIX_get();
  public static readonly int GL_PIXEL_TILE_HEIGHT_SGIX = libtischPINVOKE.GL_PIXEL_TILE_HEIGHT_SGIX_get();
  public static readonly int GL_PIXEL_TILE_GRID_WIDTH_SGIX = libtischPINVOKE.GL_PIXEL_TILE_GRID_WIDTH_SGIX_get();
  public static readonly int GL_PIXEL_TILE_GRID_HEIGHT_SGIX = libtischPINVOKE.GL_PIXEL_TILE_GRID_HEIGHT_SGIX_get();
  public static readonly int GL_PIXEL_TILE_GRID_DEPTH_SGIX = libtischPINVOKE.GL_PIXEL_TILE_GRID_DEPTH_SGIX_get();
  public static readonly int GL_PIXEL_TILE_CACHE_SIZE_SGIX = libtischPINVOKE.GL_PIXEL_TILE_CACHE_SIZE_SGIX_get();
  public static readonly int GL_DUAL_ALPHA4_SGIS = libtischPINVOKE.GL_DUAL_ALPHA4_SGIS_get();
  public static readonly int GL_DUAL_ALPHA8_SGIS = libtischPINVOKE.GL_DUAL_ALPHA8_SGIS_get();
  public static readonly int GL_DUAL_ALPHA12_SGIS = libtischPINVOKE.GL_DUAL_ALPHA12_SGIS_get();
  public static readonly int GL_DUAL_ALPHA16_SGIS = libtischPINVOKE.GL_DUAL_ALPHA16_SGIS_get();
  public static readonly int GL_DUAL_LUMINANCE4_SGIS = libtischPINVOKE.GL_DUAL_LUMINANCE4_SGIS_get();
  public static readonly int GL_DUAL_LUMINANCE8_SGIS = libtischPINVOKE.GL_DUAL_LUMINANCE8_SGIS_get();
  public static readonly int GL_DUAL_LUMINANCE12_SGIS = libtischPINVOKE.GL_DUAL_LUMINANCE12_SGIS_get();
  public static readonly int GL_DUAL_LUMINANCE16_SGIS = libtischPINVOKE.GL_DUAL_LUMINANCE16_SGIS_get();
  public static readonly int GL_DUAL_INTENSITY4_SGIS = libtischPINVOKE.GL_DUAL_INTENSITY4_SGIS_get();
  public static readonly int GL_DUAL_INTENSITY8_SGIS = libtischPINVOKE.GL_DUAL_INTENSITY8_SGIS_get();
  public static readonly int GL_DUAL_INTENSITY12_SGIS = libtischPINVOKE.GL_DUAL_INTENSITY12_SGIS_get();
  public static readonly int GL_DUAL_INTENSITY16_SGIS = libtischPINVOKE.GL_DUAL_INTENSITY16_SGIS_get();
  public static readonly int GL_DUAL_LUMINANCE_ALPHA4_SGIS = libtischPINVOKE.GL_DUAL_LUMINANCE_ALPHA4_SGIS_get();
  public static readonly int GL_DUAL_LUMINANCE_ALPHA8_SGIS = libtischPINVOKE.GL_DUAL_LUMINANCE_ALPHA8_SGIS_get();
  public static readonly int GL_QUAD_ALPHA4_SGIS = libtischPINVOKE.GL_QUAD_ALPHA4_SGIS_get();
  public static readonly int GL_QUAD_ALPHA8_SGIS = libtischPINVOKE.GL_QUAD_ALPHA8_SGIS_get();
  public static readonly int GL_QUAD_LUMINANCE4_SGIS = libtischPINVOKE.GL_QUAD_LUMINANCE4_SGIS_get();
  public static readonly int GL_QUAD_LUMINANCE8_SGIS = libtischPINVOKE.GL_QUAD_LUMINANCE8_SGIS_get();
  public static readonly int GL_QUAD_INTENSITY4_SGIS = libtischPINVOKE.GL_QUAD_INTENSITY4_SGIS_get();
  public static readonly int GL_QUAD_INTENSITY8_SGIS = libtischPINVOKE.GL_QUAD_INTENSITY8_SGIS_get();
  public static readonly int GL_DUAL_TEXTURE_SELECT_SGIS = libtischPINVOKE.GL_DUAL_TEXTURE_SELECT_SGIS_get();
  public static readonly int GL_QUAD_TEXTURE_SELECT_SGIS = libtischPINVOKE.GL_QUAD_TEXTURE_SELECT_SGIS_get();
  public static readonly int GL_SPRITE_SGIX = libtischPINVOKE.GL_SPRITE_SGIX_get();
  public static readonly int GL_SPRITE_MODE_SGIX = libtischPINVOKE.GL_SPRITE_MODE_SGIX_get();
  public static readonly int GL_SPRITE_AXIS_SGIX = libtischPINVOKE.GL_SPRITE_AXIS_SGIX_get();
  public static readonly int GL_SPRITE_TRANSLATION_SGIX = libtischPINVOKE.GL_SPRITE_TRANSLATION_SGIX_get();
  public static readonly int GL_SPRITE_AXIAL_SGIX = libtischPINVOKE.GL_SPRITE_AXIAL_SGIX_get();
  public static readonly int GL_SPRITE_OBJECT_ALIGNED_SGIX = libtischPINVOKE.GL_SPRITE_OBJECT_ALIGNED_SGIX_get();
  public static readonly int GL_SPRITE_EYE_ALIGNED_SGIX = libtischPINVOKE.GL_SPRITE_EYE_ALIGNED_SGIX_get();
  public static readonly int GL_TEXTURE_MULTI_BUFFER_HINT_SGIX = libtischPINVOKE.GL_TEXTURE_MULTI_BUFFER_HINT_SGIX_get();
  public static readonly int GL_POINT_SIZE_MIN_EXT = libtischPINVOKE.GL_POINT_SIZE_MIN_EXT_get();
  public static readonly int GL_POINT_SIZE_MAX_EXT = libtischPINVOKE.GL_POINT_SIZE_MAX_EXT_get();
  public static readonly int GL_POINT_FADE_THRESHOLD_SIZE_EXT = libtischPINVOKE.GL_POINT_FADE_THRESHOLD_SIZE_EXT_get();
  public static readonly int GL_DISTANCE_ATTENUATION_EXT = libtischPINVOKE.GL_DISTANCE_ATTENUATION_EXT_get();
  public static readonly int GL_POINT_SIZE_MIN_SGIS = libtischPINVOKE.GL_POINT_SIZE_MIN_SGIS_get();
  public static readonly int GL_POINT_SIZE_MAX_SGIS = libtischPINVOKE.GL_POINT_SIZE_MAX_SGIS_get();
  public static readonly int GL_POINT_FADE_THRESHOLD_SIZE_SGIS = libtischPINVOKE.GL_POINT_FADE_THRESHOLD_SIZE_SGIS_get();
  public static readonly int GL_DISTANCE_ATTENUATION_SGIS = libtischPINVOKE.GL_DISTANCE_ATTENUATION_SGIS_get();
  public static readonly int GL_INSTRUMENT_BUFFER_POINTER_SGIX = libtischPINVOKE.GL_INSTRUMENT_BUFFER_POINTER_SGIX_get();
  public static readonly int GL_INSTRUMENT_MEASUREMENTS_SGIX = libtischPINVOKE.GL_INSTRUMENT_MEASUREMENTS_SGIX_get();
  public static readonly int GL_POST_TEXTURE_FILTER_BIAS_SGIX = libtischPINVOKE.GL_POST_TEXTURE_FILTER_BIAS_SGIX_get();
  public static readonly int GL_POST_TEXTURE_FILTER_SCALE_SGIX = libtischPINVOKE.GL_POST_TEXTURE_FILTER_SCALE_SGIX_get();
  public static readonly int GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX = libtischPINVOKE.GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX_get();
  public static readonly int GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX = libtischPINVOKE.GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX_get();
  public static readonly int GL_FRAMEZOOM_SGIX = libtischPINVOKE.GL_FRAMEZOOM_SGIX_get();
  public static readonly int GL_FRAMEZOOM_FACTOR_SGIX = libtischPINVOKE.GL_FRAMEZOOM_FACTOR_SGIX_get();
  public static readonly int GL_MAX_FRAMEZOOM_FACTOR_SGIX = libtischPINVOKE.GL_MAX_FRAMEZOOM_FACTOR_SGIX_get();
  public static readonly int GL_TEXTURE_DEFORMATION_BIT_SGIX = libtischPINVOKE.GL_TEXTURE_DEFORMATION_BIT_SGIX_get();
  public static readonly int GL_GEOMETRY_DEFORMATION_BIT_SGIX = libtischPINVOKE.GL_GEOMETRY_DEFORMATION_BIT_SGIX_get();
  public static readonly int GL_GEOMETRY_DEFORMATION_SGIX = libtischPINVOKE.GL_GEOMETRY_DEFORMATION_SGIX_get();
  public static readonly int GL_TEXTURE_DEFORMATION_SGIX = libtischPINVOKE.GL_TEXTURE_DEFORMATION_SGIX_get();
  public static readonly int GL_DEFORMATIONS_MASK_SGIX = libtischPINVOKE.GL_DEFORMATIONS_MASK_SGIX_get();
  public static readonly int GL_MAX_DEFORMATION_ORDER_SGIX = libtischPINVOKE.GL_MAX_DEFORMATION_ORDER_SGIX_get();
  public static readonly int GL_REFERENCE_PLANE_SGIX = libtischPINVOKE.GL_REFERENCE_PLANE_SGIX_get();
  public static readonly int GL_REFERENCE_PLANE_EQUATION_SGIX = libtischPINVOKE.GL_REFERENCE_PLANE_EQUATION_SGIX_get();
  public static readonly int GL_DEPTH_COMPONENT16_SGIX = libtischPINVOKE.GL_DEPTH_COMPONENT16_SGIX_get();
  public static readonly int GL_DEPTH_COMPONENT24_SGIX = libtischPINVOKE.GL_DEPTH_COMPONENT24_SGIX_get();
  public static readonly int GL_DEPTH_COMPONENT32_SGIX = libtischPINVOKE.GL_DEPTH_COMPONENT32_SGIX_get();
  public static readonly int GL_FOG_FUNC_SGIS = libtischPINVOKE.GL_FOG_FUNC_SGIS_get();
  public static readonly int GL_FOG_FUNC_POINTS_SGIS = libtischPINVOKE.GL_FOG_FUNC_POINTS_SGIS_get();
  public static readonly int GL_MAX_FOG_FUNC_POINTS_SGIS = libtischPINVOKE.GL_MAX_FOG_FUNC_POINTS_SGIS_get();
  public static readonly int GL_FOG_OFFSET_SGIX = libtischPINVOKE.GL_FOG_OFFSET_SGIX_get();
  public static readonly int GL_FOG_OFFSET_VALUE_SGIX = libtischPINVOKE.GL_FOG_OFFSET_VALUE_SGIX_get();
  public static readonly int GL_IMAGE_SCALE_X_HP = libtischPINVOKE.GL_IMAGE_SCALE_X_HP_get();
  public static readonly int GL_IMAGE_SCALE_Y_HP = libtischPINVOKE.GL_IMAGE_SCALE_Y_HP_get();
  public static readonly int GL_IMAGE_TRANSLATE_X_HP = libtischPINVOKE.GL_IMAGE_TRANSLATE_X_HP_get();
  public static readonly int GL_IMAGE_TRANSLATE_Y_HP = libtischPINVOKE.GL_IMAGE_TRANSLATE_Y_HP_get();
  public static readonly int GL_IMAGE_ROTATE_ANGLE_HP = libtischPINVOKE.GL_IMAGE_ROTATE_ANGLE_HP_get();
  public static readonly int GL_IMAGE_ROTATE_ORIGIN_X_HP = libtischPINVOKE.GL_IMAGE_ROTATE_ORIGIN_X_HP_get();
  public static readonly int GL_IMAGE_ROTATE_ORIGIN_Y_HP = libtischPINVOKE.GL_IMAGE_ROTATE_ORIGIN_Y_HP_get();
  public static readonly int GL_IMAGE_MAG_FILTER_HP = libtischPINVOKE.GL_IMAGE_MAG_FILTER_HP_get();
  public static readonly int GL_IMAGE_MIN_FILTER_HP = libtischPINVOKE.GL_IMAGE_MIN_FILTER_HP_get();
  public static readonly int GL_IMAGE_CUBIC_WEIGHT_HP = libtischPINVOKE.GL_IMAGE_CUBIC_WEIGHT_HP_get();
  public static readonly int GL_CUBIC_HP = libtischPINVOKE.GL_CUBIC_HP_get();
  public static readonly int GL_AVERAGE_HP = libtischPINVOKE.GL_AVERAGE_HP_get();
  public static readonly int GL_IMAGE_TRANSFORM_2D_HP = libtischPINVOKE.GL_IMAGE_TRANSFORM_2D_HP_get();
  public static readonly int GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = libtischPINVOKE.GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP_get();
  public static readonly int GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = libtischPINVOKE.GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP_get();
  public static readonly int GL_IGNORE_BORDER_HP = libtischPINVOKE.GL_IGNORE_BORDER_HP_get();
  public static readonly int GL_CONSTANT_BORDER_HP = libtischPINVOKE.GL_CONSTANT_BORDER_HP_get();
  public static readonly int GL_REPLICATE_BORDER_HP = libtischPINVOKE.GL_REPLICATE_BORDER_HP_get();
  public static readonly int GL_CONVOLUTION_BORDER_COLOR_HP = libtischPINVOKE.GL_CONVOLUTION_BORDER_COLOR_HP_get();
  public static readonly int GL_TEXTURE_ENV_BIAS_SGIX = libtischPINVOKE.GL_TEXTURE_ENV_BIAS_SGIX_get();
  public static readonly int GL_VERTEX_DATA_HINT_PGI = libtischPINVOKE.GL_VERTEX_DATA_HINT_PGI_get();
  public static readonly int GL_VERTEX_CONSISTENT_HINT_PGI = libtischPINVOKE.GL_VERTEX_CONSISTENT_HINT_PGI_get();
  public static readonly int GL_MATERIAL_SIDE_HINT_PGI = libtischPINVOKE.GL_MATERIAL_SIDE_HINT_PGI_get();
  public static readonly int GL_MAX_VERTEX_HINT_PGI = libtischPINVOKE.GL_MAX_VERTEX_HINT_PGI_get();
  public static readonly int GL_COLOR3_BIT_PGI = libtischPINVOKE.GL_COLOR3_BIT_PGI_get();
  public static readonly int GL_COLOR4_BIT_PGI = libtischPINVOKE.GL_COLOR4_BIT_PGI_get();
  public static readonly int GL_EDGEFLAG_BIT_PGI = libtischPINVOKE.GL_EDGEFLAG_BIT_PGI_get();
  public static readonly int GL_INDEX_BIT_PGI = libtischPINVOKE.GL_INDEX_BIT_PGI_get();
  public static readonly int GL_MAT_AMBIENT_BIT_PGI = libtischPINVOKE.GL_MAT_AMBIENT_BIT_PGI_get();
  public static readonly int GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI = libtischPINVOKE.GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI_get();
  public static readonly int GL_MAT_DIFFUSE_BIT_PGI = libtischPINVOKE.GL_MAT_DIFFUSE_BIT_PGI_get();
  public static readonly int GL_MAT_EMISSION_BIT_PGI = libtischPINVOKE.GL_MAT_EMISSION_BIT_PGI_get();
  public static readonly int GL_MAT_COLOR_INDEXES_BIT_PGI = libtischPINVOKE.GL_MAT_COLOR_INDEXES_BIT_PGI_get();
  public static readonly int GL_MAT_SHININESS_BIT_PGI = libtischPINVOKE.GL_MAT_SHININESS_BIT_PGI_get();
  public static readonly int GL_MAT_SPECULAR_BIT_PGI = libtischPINVOKE.GL_MAT_SPECULAR_BIT_PGI_get();
  public static readonly int GL_NORMAL_BIT_PGI = libtischPINVOKE.GL_NORMAL_BIT_PGI_get();
  public static readonly int GL_TEXCOORD1_BIT_PGI = libtischPINVOKE.GL_TEXCOORD1_BIT_PGI_get();
  public static readonly int GL_TEXCOORD2_BIT_PGI = libtischPINVOKE.GL_TEXCOORD2_BIT_PGI_get();
  public static readonly int GL_TEXCOORD3_BIT_PGI = libtischPINVOKE.GL_TEXCOORD3_BIT_PGI_get();
  public static readonly int GL_TEXCOORD4_BIT_PGI = libtischPINVOKE.GL_TEXCOORD4_BIT_PGI_get();
  public static readonly int GL_VERTEX23_BIT_PGI = libtischPINVOKE.GL_VERTEX23_BIT_PGI_get();
  public static readonly int GL_VERTEX4_BIT_PGI = libtischPINVOKE.GL_VERTEX4_BIT_PGI_get();
  public static readonly int GL_PREFER_DOUBLEBUFFER_HINT_PGI = libtischPINVOKE.GL_PREFER_DOUBLEBUFFER_HINT_PGI_get();
  public static readonly int GL_CONSERVE_MEMORY_HINT_PGI = libtischPINVOKE.GL_CONSERVE_MEMORY_HINT_PGI_get();
  public static readonly int GL_RECLAIM_MEMORY_HINT_PGI = libtischPINVOKE.GL_RECLAIM_MEMORY_HINT_PGI_get();
  public static readonly int GL_NATIVE_GRAPHICS_HANDLE_PGI = libtischPINVOKE.GL_NATIVE_GRAPHICS_HANDLE_PGI_get();
  public static readonly int GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI = libtischPINVOKE.GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI_get();
  public static readonly int GL_NATIVE_GRAPHICS_END_HINT_PGI = libtischPINVOKE.GL_NATIVE_GRAPHICS_END_HINT_PGI_get();
  public static readonly int GL_ALWAYS_FAST_HINT_PGI = libtischPINVOKE.GL_ALWAYS_FAST_HINT_PGI_get();
  public static readonly int GL_ALWAYS_SOFT_HINT_PGI = libtischPINVOKE.GL_ALWAYS_SOFT_HINT_PGI_get();
  public static readonly int GL_ALLOW_DRAW_OBJ_HINT_PGI = libtischPINVOKE.GL_ALLOW_DRAW_OBJ_HINT_PGI_get();
  public static readonly int GL_ALLOW_DRAW_WIN_HINT_PGI = libtischPINVOKE.GL_ALLOW_DRAW_WIN_HINT_PGI_get();
  public static readonly int GL_ALLOW_DRAW_FRG_HINT_PGI = libtischPINVOKE.GL_ALLOW_DRAW_FRG_HINT_PGI_get();
  public static readonly int GL_ALLOW_DRAW_MEM_HINT_PGI = libtischPINVOKE.GL_ALLOW_DRAW_MEM_HINT_PGI_get();
  public static readonly int GL_STRICT_DEPTHFUNC_HINT_PGI = libtischPINVOKE.GL_STRICT_DEPTHFUNC_HINT_PGI_get();
  public static readonly int GL_STRICT_LIGHTING_HINT_PGI = libtischPINVOKE.GL_STRICT_LIGHTING_HINT_PGI_get();
  public static readonly int GL_STRICT_SCISSOR_HINT_PGI = libtischPINVOKE.GL_STRICT_SCISSOR_HINT_PGI_get();
  public static readonly int GL_FULL_STIPPLE_HINT_PGI = libtischPINVOKE.GL_FULL_STIPPLE_HINT_PGI_get();
  public static readonly int GL_CLIP_NEAR_HINT_PGI = libtischPINVOKE.GL_CLIP_NEAR_HINT_PGI_get();
  public static readonly int GL_CLIP_FAR_HINT_PGI = libtischPINVOKE.GL_CLIP_FAR_HINT_PGI_get();
  public static readonly int GL_WIDE_LINE_HINT_PGI = libtischPINVOKE.GL_WIDE_LINE_HINT_PGI_get();
  public static readonly int GL_BACK_NORMALS_HINT_PGI = libtischPINVOKE.GL_BACK_NORMALS_HINT_PGI_get();
  public static readonly int GL_COLOR_INDEX1_EXT = libtischPINVOKE.GL_COLOR_INDEX1_EXT_get();
  public static readonly int GL_COLOR_INDEX2_EXT = libtischPINVOKE.GL_COLOR_INDEX2_EXT_get();
  public static readonly int GL_COLOR_INDEX4_EXT = libtischPINVOKE.GL_COLOR_INDEX4_EXT_get();
  public static readonly int GL_COLOR_INDEX8_EXT = libtischPINVOKE.GL_COLOR_INDEX8_EXT_get();
  public static readonly int GL_COLOR_INDEX12_EXT = libtischPINVOKE.GL_COLOR_INDEX12_EXT_get();
  public static readonly int GL_COLOR_INDEX16_EXT = libtischPINVOKE.GL_COLOR_INDEX16_EXT_get();
  public static readonly int GL_TEXTURE_INDEX_SIZE_EXT = libtischPINVOKE.GL_TEXTURE_INDEX_SIZE_EXT_get();
  public static readonly int GL_CLIP_VOLUME_CLIPPING_HINT_EXT = libtischPINVOKE.GL_CLIP_VOLUME_CLIPPING_HINT_EXT_get();
  public static readonly int GL_LIST_PRIORITY_SGIX = libtischPINVOKE.GL_LIST_PRIORITY_SGIX_get();
  public static readonly int GL_IR_INSTRUMENT1_SGIX = libtischPINVOKE.GL_IR_INSTRUMENT1_SGIX_get();
  public static readonly int GL_CALLIGRAPHIC_FRAGMENT_SGIX = libtischPINVOKE.GL_CALLIGRAPHIC_FRAGMENT_SGIX_get();
  public static readonly int GL_TEXTURE_LOD_BIAS_S_SGIX = libtischPINVOKE.GL_TEXTURE_LOD_BIAS_S_SGIX_get();
  public static readonly int GL_TEXTURE_LOD_BIAS_T_SGIX = libtischPINVOKE.GL_TEXTURE_LOD_BIAS_T_SGIX_get();
  public static readonly int GL_TEXTURE_LOD_BIAS_R_SGIX = libtischPINVOKE.GL_TEXTURE_LOD_BIAS_R_SGIX_get();
  public static readonly int GL_SHADOW_AMBIENT_SGIX = libtischPINVOKE.GL_SHADOW_AMBIENT_SGIX_get();
  public static readonly int GL_INDEX_MATERIAL_EXT = libtischPINVOKE.GL_INDEX_MATERIAL_EXT_get();
  public static readonly int GL_INDEX_MATERIAL_PARAMETER_EXT = libtischPINVOKE.GL_INDEX_MATERIAL_PARAMETER_EXT_get();
  public static readonly int GL_INDEX_MATERIAL_FACE_EXT = libtischPINVOKE.GL_INDEX_MATERIAL_FACE_EXT_get();
  public static readonly int GL_INDEX_TEST_EXT = libtischPINVOKE.GL_INDEX_TEST_EXT_get();
  public static readonly int GL_INDEX_TEST_FUNC_EXT = libtischPINVOKE.GL_INDEX_TEST_FUNC_EXT_get();
  public static readonly int GL_INDEX_TEST_REF_EXT = libtischPINVOKE.GL_INDEX_TEST_REF_EXT_get();
  public static readonly int GL_IUI_V2F_EXT = libtischPINVOKE.GL_IUI_V2F_EXT_get();
  public static readonly int GL_IUI_V3F_EXT = libtischPINVOKE.GL_IUI_V3F_EXT_get();
  public static readonly int GL_IUI_N3F_V2F_EXT = libtischPINVOKE.GL_IUI_N3F_V2F_EXT_get();
  public static readonly int GL_IUI_N3F_V3F_EXT = libtischPINVOKE.GL_IUI_N3F_V3F_EXT_get();
  public static readonly int GL_T2F_IUI_V2F_EXT = libtischPINVOKE.GL_T2F_IUI_V2F_EXT_get();
  public static readonly int GL_T2F_IUI_V3F_EXT = libtischPINVOKE.GL_T2F_IUI_V3F_EXT_get();
  public static readonly int GL_T2F_IUI_N3F_V2F_EXT = libtischPINVOKE.GL_T2F_IUI_N3F_V2F_EXT_get();
  public static readonly int GL_T2F_IUI_N3F_V3F_EXT = libtischPINVOKE.GL_T2F_IUI_N3F_V3F_EXT_get();
  public static readonly int GL_ARRAY_ELEMENT_LOCK_FIRST_EXT = libtischPINVOKE.GL_ARRAY_ELEMENT_LOCK_FIRST_EXT_get();
  public static readonly int GL_ARRAY_ELEMENT_LOCK_COUNT_EXT = libtischPINVOKE.GL_ARRAY_ELEMENT_LOCK_COUNT_EXT_get();
  public static readonly int GL_CULL_VERTEX_EXT = libtischPINVOKE.GL_CULL_VERTEX_EXT_get();
  public static readonly int GL_CULL_VERTEX_EYE_POSITION_EXT = libtischPINVOKE.GL_CULL_VERTEX_EYE_POSITION_EXT_get();
  public static readonly int GL_CULL_VERTEX_OBJECT_POSITION_EXT = libtischPINVOKE.GL_CULL_VERTEX_OBJECT_POSITION_EXT_get();
  public static readonly int GL_YCRCB_422_SGIX = libtischPINVOKE.GL_YCRCB_422_SGIX_get();
  public static readonly int GL_YCRCB_444_SGIX = libtischPINVOKE.GL_YCRCB_444_SGIX_get();
  public static readonly int GL_FRAGMENT_LIGHTING_SGIX = libtischPINVOKE.GL_FRAGMENT_LIGHTING_SGIX_get();
  public static readonly int GL_FRAGMENT_COLOR_MATERIAL_SGIX = libtischPINVOKE.GL_FRAGMENT_COLOR_MATERIAL_SGIX_get();
  public static readonly int GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX = libtischPINVOKE.GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX_get();
  public static readonly int GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX = libtischPINVOKE.GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX_get();
  public static readonly int GL_MAX_FRAGMENT_LIGHTS_SGIX = libtischPINVOKE.GL_MAX_FRAGMENT_LIGHTS_SGIX_get();
  public static readonly int GL_MAX_ACTIVE_LIGHTS_SGIX = libtischPINVOKE.GL_MAX_ACTIVE_LIGHTS_SGIX_get();
  public static readonly int GL_CURRENT_RASTER_NORMAL_SGIX = libtischPINVOKE.GL_CURRENT_RASTER_NORMAL_SGIX_get();
  public static readonly int GL_LIGHT_ENV_MODE_SGIX = libtischPINVOKE.GL_LIGHT_ENV_MODE_SGIX_get();
  public static readonly int GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX = libtischPINVOKE.GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX_get();
  public static readonly int GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX = libtischPINVOKE.GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX_get();
  public static readonly int GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX = libtischPINVOKE.GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX_get();
  public static readonly int GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX = libtischPINVOKE.GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX_get();
  public static readonly int GL_FRAGMENT_LIGHT0_SGIX = libtischPINVOKE.GL_FRAGMENT_LIGHT0_SGIX_get();
  public static readonly int GL_FRAGMENT_LIGHT1_SGIX = libtischPINVOKE.GL_FRAGMENT_LIGHT1_SGIX_get();
  public static readonly int GL_FRAGMENT_LIGHT2_SGIX = libtischPINVOKE.GL_FRAGMENT_LIGHT2_SGIX_get();
  public static readonly int GL_FRAGMENT_LIGHT3_SGIX = libtischPINVOKE.GL_FRAGMENT_LIGHT3_SGIX_get();
  public static readonly int GL_FRAGMENT_LIGHT4_SGIX = libtischPINVOKE.GL_FRAGMENT_LIGHT4_SGIX_get();
  public static readonly int GL_FRAGMENT_LIGHT5_SGIX = libtischPINVOKE.GL_FRAGMENT_LIGHT5_SGIX_get();
  public static readonly int GL_FRAGMENT_LIGHT6_SGIX = libtischPINVOKE.GL_FRAGMENT_LIGHT6_SGIX_get();
  public static readonly int GL_FRAGMENT_LIGHT7_SGIX = libtischPINVOKE.GL_FRAGMENT_LIGHT7_SGIX_get();
  public static readonly int GL_RASTER_POSITION_UNCLIPPED_IBM = libtischPINVOKE.GL_RASTER_POSITION_UNCLIPPED_IBM_get();
  public static readonly int GL_TEXTURE_LIGHTING_MODE_HP = libtischPINVOKE.GL_TEXTURE_LIGHTING_MODE_HP_get();
  public static readonly int GL_TEXTURE_POST_SPECULAR_HP = libtischPINVOKE.GL_TEXTURE_POST_SPECULAR_HP_get();
  public static readonly int GL_TEXTURE_PRE_SPECULAR_HP = libtischPINVOKE.GL_TEXTURE_PRE_SPECULAR_HP_get();
  public static readonly int GL_MAX_ELEMENTS_VERTICES_EXT = libtischPINVOKE.GL_MAX_ELEMENTS_VERTICES_EXT_get();
  public static readonly int GL_MAX_ELEMENTS_INDICES_EXT = libtischPINVOKE.GL_MAX_ELEMENTS_INDICES_EXT_get();
  public static readonly int GL_PHONG_WIN = libtischPINVOKE.GL_PHONG_WIN_get();
  public static readonly int GL_PHONG_HINT_WIN = libtischPINVOKE.GL_PHONG_HINT_WIN_get();
  public static readonly int GL_FOG_SPECULAR_TEXTURE_WIN = libtischPINVOKE.GL_FOG_SPECULAR_TEXTURE_WIN_get();
  public static readonly int GL_FRAGMENT_MATERIAL_EXT = libtischPINVOKE.GL_FRAGMENT_MATERIAL_EXT_get();
  public static readonly int GL_FRAGMENT_NORMAL_EXT = libtischPINVOKE.GL_FRAGMENT_NORMAL_EXT_get();
  public static readonly int GL_FRAGMENT_COLOR_EXT = libtischPINVOKE.GL_FRAGMENT_COLOR_EXT_get();
  public static readonly int GL_ATTENUATION_EXT = libtischPINVOKE.GL_ATTENUATION_EXT_get();
  public static readonly int GL_SHADOW_ATTENUATION_EXT = libtischPINVOKE.GL_SHADOW_ATTENUATION_EXT_get();
  public static readonly int GL_TEXTURE_APPLICATION_MODE_EXT = libtischPINVOKE.GL_TEXTURE_APPLICATION_MODE_EXT_get();
  public static readonly int GL_TEXTURE_LIGHT_EXT = libtischPINVOKE.GL_TEXTURE_LIGHT_EXT_get();
  public static readonly int GL_TEXTURE_MATERIAL_FACE_EXT = libtischPINVOKE.GL_TEXTURE_MATERIAL_FACE_EXT_get();
  public static readonly int GL_TEXTURE_MATERIAL_PARAMETER_EXT = libtischPINVOKE.GL_TEXTURE_MATERIAL_PARAMETER_EXT_get();
  public static readonly int GL_ALPHA_MIN_SGIX = libtischPINVOKE.GL_ALPHA_MIN_SGIX_get();
  public static readonly int GL_ALPHA_MAX_SGIX = libtischPINVOKE.GL_ALPHA_MAX_SGIX_get();
  public static readonly int GL_PIXEL_TEX_GEN_Q_CEILING_SGIX = libtischPINVOKE.GL_PIXEL_TEX_GEN_Q_CEILING_SGIX_get();
  public static readonly int GL_PIXEL_TEX_GEN_Q_ROUND_SGIX = libtischPINVOKE.GL_PIXEL_TEX_GEN_Q_ROUND_SGIX_get();
  public static readonly int GL_PIXEL_TEX_GEN_Q_FLOOR_SGIX = libtischPINVOKE.GL_PIXEL_TEX_GEN_Q_FLOOR_SGIX_get();
  public static readonly int GL_PIXEL_TEX_GEN_ALPHA_REPLACE_SGIX = libtischPINVOKE.GL_PIXEL_TEX_GEN_ALPHA_REPLACE_SGIX_get();
  public static readonly int GL_PIXEL_TEX_GEN_ALPHA_NO_REPLACE_SGIX = libtischPINVOKE.GL_PIXEL_TEX_GEN_ALPHA_NO_REPLACE_SGIX_get();
  public static readonly int GL_PIXEL_TEX_GEN_ALPHA_LS_SGIX = libtischPINVOKE.GL_PIXEL_TEX_GEN_ALPHA_LS_SGIX_get();
  public static readonly int GL_PIXEL_TEX_GEN_ALPHA_MS_SGIX = libtischPINVOKE.GL_PIXEL_TEX_GEN_ALPHA_MS_SGIX_get();
  public static readonly int GL_BGR_EXT = libtischPINVOKE.GL_BGR_EXT_get();
  public static readonly int GL_BGRA_EXT = libtischPINVOKE.GL_BGRA_EXT_get();
  public static readonly int GL_ASYNC_MARKER_SGIX = libtischPINVOKE.GL_ASYNC_MARKER_SGIX_get();
  public static readonly int GL_ASYNC_TEX_IMAGE_SGIX = libtischPINVOKE.GL_ASYNC_TEX_IMAGE_SGIX_get();
  public static readonly int GL_ASYNC_DRAW_PIXELS_SGIX = libtischPINVOKE.GL_ASYNC_DRAW_PIXELS_SGIX_get();
  public static readonly int GL_ASYNC_READ_PIXELS_SGIX = libtischPINVOKE.GL_ASYNC_READ_PIXELS_SGIX_get();
  public static readonly int GL_MAX_ASYNC_TEX_IMAGE_SGIX = libtischPINVOKE.GL_MAX_ASYNC_TEX_IMAGE_SGIX_get();
  public static readonly int GL_MAX_ASYNC_DRAW_PIXELS_SGIX = libtischPINVOKE.GL_MAX_ASYNC_DRAW_PIXELS_SGIX_get();
  public static readonly int GL_MAX_ASYNC_READ_PIXELS_SGIX = libtischPINVOKE.GL_MAX_ASYNC_READ_PIXELS_SGIX_get();
  public static readonly int GL_ASYNC_HISTOGRAM_SGIX = libtischPINVOKE.GL_ASYNC_HISTOGRAM_SGIX_get();
  public static readonly int GL_MAX_ASYNC_HISTOGRAM_SGIX = libtischPINVOKE.GL_MAX_ASYNC_HISTOGRAM_SGIX_get();
  public static readonly int GL_PARALLEL_ARRAYS_INTEL = libtischPINVOKE.GL_PARALLEL_ARRAYS_INTEL_get();
  public static readonly int GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL = libtischPINVOKE.GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL_get();
  public static readonly int GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL = libtischPINVOKE.GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL_get();
  public static readonly int GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL = libtischPINVOKE.GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL_get();
  public static readonly int GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL = libtischPINVOKE.GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL_get();
  public static readonly int GL_OCCLUSION_TEST_HP = libtischPINVOKE.GL_OCCLUSION_TEST_HP_get();
  public static readonly int GL_OCCLUSION_TEST_RESULT_HP = libtischPINVOKE.GL_OCCLUSION_TEST_RESULT_HP_get();
  public static readonly int GL_PIXEL_TRANSFORM_2D_EXT = libtischPINVOKE.GL_PIXEL_TRANSFORM_2D_EXT_get();
  public static readonly int GL_PIXEL_MAG_FILTER_EXT = libtischPINVOKE.GL_PIXEL_MAG_FILTER_EXT_get();
  public static readonly int GL_PIXEL_MIN_FILTER_EXT = libtischPINVOKE.GL_PIXEL_MIN_FILTER_EXT_get();
  public static readonly int GL_PIXEL_CUBIC_WEIGHT_EXT = libtischPINVOKE.GL_PIXEL_CUBIC_WEIGHT_EXT_get();
  public static readonly int GL_CUBIC_EXT = libtischPINVOKE.GL_CUBIC_EXT_get();
  public static readonly int GL_AVERAGE_EXT = libtischPINVOKE.GL_AVERAGE_EXT_get();
  public static readonly int GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = libtischPINVOKE.GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT_get();
  public static readonly int GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = libtischPINVOKE.GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT_get();
  public static readonly int GL_PIXEL_TRANSFORM_2D_MATRIX_EXT = libtischPINVOKE.GL_PIXEL_TRANSFORM_2D_MATRIX_EXT_get();
  public static readonly int GL_SHARED_TEXTURE_PALETTE_EXT = libtischPINVOKE.GL_SHARED_TEXTURE_PALETTE_EXT_get();
  public static readonly int GL_LIGHT_MODEL_COLOR_CONTROL_EXT = libtischPINVOKE.GL_LIGHT_MODEL_COLOR_CONTROL_EXT_get();
  public static readonly int GL_SINGLE_COLOR_EXT = libtischPINVOKE.GL_SINGLE_COLOR_EXT_get();
  public static readonly int GL_SEPARATE_SPECULAR_COLOR_EXT = libtischPINVOKE.GL_SEPARATE_SPECULAR_COLOR_EXT_get();
  public static readonly int GL_COLOR_SUM_EXT = libtischPINVOKE.GL_COLOR_SUM_EXT_get();
  public static readonly int GL_CURRENT_SECONDARY_COLOR_EXT = libtischPINVOKE.GL_CURRENT_SECONDARY_COLOR_EXT_get();
  public static readonly int GL_SECONDARY_COLOR_ARRAY_SIZE_EXT = libtischPINVOKE.GL_SECONDARY_COLOR_ARRAY_SIZE_EXT_get();
  public static readonly int GL_SECONDARY_COLOR_ARRAY_TYPE_EXT = libtischPINVOKE.GL_SECONDARY_COLOR_ARRAY_TYPE_EXT_get();
  public static readonly int GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT = libtischPINVOKE.GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT_get();
  public static readonly int GL_SECONDARY_COLOR_ARRAY_POINTER_EXT = libtischPINVOKE.GL_SECONDARY_COLOR_ARRAY_POINTER_EXT_get();
  public static readonly int GL_SECONDARY_COLOR_ARRAY_EXT = libtischPINVOKE.GL_SECONDARY_COLOR_ARRAY_EXT_get();
  public static readonly int GL_PERTURB_EXT = libtischPINVOKE.GL_PERTURB_EXT_get();
  public static readonly int GL_TEXTURE_NORMAL_EXT = libtischPINVOKE.GL_TEXTURE_NORMAL_EXT_get();
  public static readonly int GL_FOG_COORDINATE_SOURCE_EXT = libtischPINVOKE.GL_FOG_COORDINATE_SOURCE_EXT_get();
  public static readonly int GL_FOG_COORDINATE_EXT = libtischPINVOKE.GL_FOG_COORDINATE_EXT_get();
  public static readonly int GL_FRAGMENT_DEPTH_EXT = libtischPINVOKE.GL_FRAGMENT_DEPTH_EXT_get();
  public static readonly int GL_CURRENT_FOG_COORDINATE_EXT = libtischPINVOKE.GL_CURRENT_FOG_COORDINATE_EXT_get();
  public static readonly int GL_FOG_COORDINATE_ARRAY_TYPE_EXT = libtischPINVOKE.GL_FOG_COORDINATE_ARRAY_TYPE_EXT_get();
  public static readonly int GL_FOG_COORDINATE_ARRAY_STRIDE_EXT = libtischPINVOKE.GL_FOG_COORDINATE_ARRAY_STRIDE_EXT_get();
  public static readonly int GL_FOG_COORDINATE_ARRAY_POINTER_EXT = libtischPINVOKE.GL_FOG_COORDINATE_ARRAY_POINTER_EXT_get();
  public static readonly int GL_FOG_COORDINATE_ARRAY_EXT = libtischPINVOKE.GL_FOG_COORDINATE_ARRAY_EXT_get();
  public static readonly int GL_SCREEN_COORDINATES_REND = libtischPINVOKE.GL_SCREEN_COORDINATES_REND_get();
  public static readonly int GL_INVERTED_SCREEN_W_REND = libtischPINVOKE.GL_INVERTED_SCREEN_W_REND_get();
  public static readonly int GL_TANGENT_ARRAY_EXT = libtischPINVOKE.GL_TANGENT_ARRAY_EXT_get();
  public static readonly int GL_BINORMAL_ARRAY_EXT = libtischPINVOKE.GL_BINORMAL_ARRAY_EXT_get();
  public static readonly int GL_CURRENT_TANGENT_EXT = libtischPINVOKE.GL_CURRENT_TANGENT_EXT_get();
  public static readonly int GL_CURRENT_BINORMAL_EXT = libtischPINVOKE.GL_CURRENT_BINORMAL_EXT_get();
  public static readonly int GL_TANGENT_ARRAY_TYPE_EXT = libtischPINVOKE.GL_TANGENT_ARRAY_TYPE_EXT_get();
  public static readonly int GL_TANGENT_ARRAY_STRIDE_EXT = libtischPINVOKE.GL_TANGENT_ARRAY_STRIDE_EXT_get();
  public static readonly int GL_BINORMAL_ARRAY_TYPE_EXT = libtischPINVOKE.GL_BINORMAL_ARRAY_TYPE_EXT_get();
  public static readonly int GL_BINORMAL_ARRAY_STRIDE_EXT = libtischPINVOKE.GL_BINORMAL_ARRAY_STRIDE_EXT_get();
  public static readonly int GL_TANGENT_ARRAY_POINTER_EXT = libtischPINVOKE.GL_TANGENT_ARRAY_POINTER_EXT_get();
  public static readonly int GL_BINORMAL_ARRAY_POINTER_EXT = libtischPINVOKE.GL_BINORMAL_ARRAY_POINTER_EXT_get();
  public static readonly int GL_MAP1_TANGENT_EXT = libtischPINVOKE.GL_MAP1_TANGENT_EXT_get();
  public static readonly int GL_MAP2_TANGENT_EXT = libtischPINVOKE.GL_MAP2_TANGENT_EXT_get();
  public static readonly int GL_MAP1_BINORMAL_EXT = libtischPINVOKE.GL_MAP1_BINORMAL_EXT_get();
  public static readonly int GL_MAP2_BINORMAL_EXT = libtischPINVOKE.GL_MAP2_BINORMAL_EXT_get();
  public static readonly int GL_COMBINE_EXT = libtischPINVOKE.GL_COMBINE_EXT_get();
  public static readonly int GL_COMBINE_RGB_EXT = libtischPINVOKE.GL_COMBINE_RGB_EXT_get();
  public static readonly int GL_COMBINE_ALPHA_EXT = libtischPINVOKE.GL_COMBINE_ALPHA_EXT_get();
  public static readonly int GL_RGB_SCALE_EXT = libtischPINVOKE.GL_RGB_SCALE_EXT_get();
  public static readonly int GL_ADD_SIGNED_EXT = libtischPINVOKE.GL_ADD_SIGNED_EXT_get();
  public static readonly int GL_INTERPOLATE_EXT = libtischPINVOKE.GL_INTERPOLATE_EXT_get();
  public static readonly int GL_CONSTANT_EXT = libtischPINVOKE.GL_CONSTANT_EXT_get();
  public static readonly int GL_PRIMARY_COLOR_EXT = libtischPINVOKE.GL_PRIMARY_COLOR_EXT_get();
  public static readonly int GL_PREVIOUS_EXT = libtischPINVOKE.GL_PREVIOUS_EXT_get();
  public static readonly int GL_SOURCE0_RGB_EXT = libtischPINVOKE.GL_SOURCE0_RGB_EXT_get();
  public static readonly int GL_SOURCE1_RGB_EXT = libtischPINVOKE.GL_SOURCE1_RGB_EXT_get();
  public static readonly int GL_SOURCE2_RGB_EXT = libtischPINVOKE.GL_SOURCE2_RGB_EXT_get();
  public static readonly int GL_SOURCE0_ALPHA_EXT = libtischPINVOKE.GL_SOURCE0_ALPHA_EXT_get();
  public static readonly int GL_SOURCE1_ALPHA_EXT = libtischPINVOKE.GL_SOURCE1_ALPHA_EXT_get();
  public static readonly int GL_SOURCE2_ALPHA_EXT = libtischPINVOKE.GL_SOURCE2_ALPHA_EXT_get();
  public static readonly int GL_OPERAND0_RGB_EXT = libtischPINVOKE.GL_OPERAND0_RGB_EXT_get();
  public static readonly int GL_OPERAND1_RGB_EXT = libtischPINVOKE.GL_OPERAND1_RGB_EXT_get();
  public static readonly int GL_OPERAND2_RGB_EXT = libtischPINVOKE.GL_OPERAND2_RGB_EXT_get();
  public static readonly int GL_OPERAND0_ALPHA_EXT = libtischPINVOKE.GL_OPERAND0_ALPHA_EXT_get();
  public static readonly int GL_OPERAND1_ALPHA_EXT = libtischPINVOKE.GL_OPERAND1_ALPHA_EXT_get();
  public static readonly int GL_OPERAND2_ALPHA_EXT = libtischPINVOKE.GL_OPERAND2_ALPHA_EXT_get();
  public static readonly int GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE = libtischPINVOKE.GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE_get();
  public static readonly int GL_TRANSFORM_HINT_APPLE = libtischPINVOKE.GL_TRANSFORM_HINT_APPLE_get();
  public static readonly int GL_FOG_SCALE_SGIX = libtischPINVOKE.GL_FOG_SCALE_SGIX_get();
  public static readonly int GL_FOG_SCALE_VALUE_SGIX = libtischPINVOKE.GL_FOG_SCALE_VALUE_SGIX_get();
  public static readonly int GL_UNPACK_CONSTANT_DATA_SUNX = libtischPINVOKE.GL_UNPACK_CONSTANT_DATA_SUNX_get();
  public static readonly int GL_TEXTURE_CONSTANT_DATA_SUNX = libtischPINVOKE.GL_TEXTURE_CONSTANT_DATA_SUNX_get();
  public static readonly int GL_GLOBAL_ALPHA_SUN = libtischPINVOKE.GL_GLOBAL_ALPHA_SUN_get();
  public static readonly int GL_GLOBAL_ALPHA_FACTOR_SUN = libtischPINVOKE.GL_GLOBAL_ALPHA_FACTOR_SUN_get();
  public static readonly int GL_RESTART_SUN = libtischPINVOKE.GL_RESTART_SUN_get();
  public static readonly int GL_REPLACE_MIDDLE_SUN = libtischPINVOKE.GL_REPLACE_MIDDLE_SUN_get();
  public static readonly int GL_REPLACE_OLDEST_SUN = libtischPINVOKE.GL_REPLACE_OLDEST_SUN_get();
  public static readonly int GL_TRIANGLE_LIST_SUN = libtischPINVOKE.GL_TRIANGLE_LIST_SUN_get();
  public static readonly int GL_REPLACEMENT_CODE_SUN = libtischPINVOKE.GL_REPLACEMENT_CODE_SUN_get();
  public static readonly int GL_REPLACEMENT_CODE_ARRAY_SUN = libtischPINVOKE.GL_REPLACEMENT_CODE_ARRAY_SUN_get();
  public static readonly int GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN = libtischPINVOKE.GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN_get();
  public static readonly int GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN = libtischPINVOKE.GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN_get();
  public static readonly int GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN = libtischPINVOKE.GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN_get();
  public static readonly int GL_R1UI_V3F_SUN = libtischPINVOKE.GL_R1UI_V3F_SUN_get();
  public static readonly int GL_R1UI_C4UB_V3F_SUN = libtischPINVOKE.GL_R1UI_C4UB_V3F_SUN_get();
  public static readonly int GL_R1UI_C3F_V3F_SUN = libtischPINVOKE.GL_R1UI_C3F_V3F_SUN_get();
  public static readonly int GL_R1UI_N3F_V3F_SUN = libtischPINVOKE.GL_R1UI_N3F_V3F_SUN_get();
  public static readonly int GL_R1UI_C4F_N3F_V3F_SUN = libtischPINVOKE.GL_R1UI_C4F_N3F_V3F_SUN_get();
  public static readonly int GL_R1UI_T2F_V3F_SUN = libtischPINVOKE.GL_R1UI_T2F_V3F_SUN_get();
  public static readonly int GL_R1UI_T2F_N3F_V3F_SUN = libtischPINVOKE.GL_R1UI_T2F_N3F_V3F_SUN_get();
  public static readonly int GL_R1UI_T2F_C4F_N3F_V3F_SUN = libtischPINVOKE.GL_R1UI_T2F_C4F_N3F_V3F_SUN_get();
  public static readonly int GL_BLEND_DST_RGB_EXT = libtischPINVOKE.GL_BLEND_DST_RGB_EXT_get();
  public static readonly int GL_BLEND_SRC_RGB_EXT = libtischPINVOKE.GL_BLEND_SRC_RGB_EXT_get();
  public static readonly int GL_BLEND_DST_ALPHA_EXT = libtischPINVOKE.GL_BLEND_DST_ALPHA_EXT_get();
  public static readonly int GL_BLEND_SRC_ALPHA_EXT = libtischPINVOKE.GL_BLEND_SRC_ALPHA_EXT_get();
  public static readonly int GL_RED_MIN_CLAMP_INGR = libtischPINVOKE.GL_RED_MIN_CLAMP_INGR_get();
  public static readonly int GL_GREEN_MIN_CLAMP_INGR = libtischPINVOKE.GL_GREEN_MIN_CLAMP_INGR_get();
  public static readonly int GL_BLUE_MIN_CLAMP_INGR = libtischPINVOKE.GL_BLUE_MIN_CLAMP_INGR_get();
  public static readonly int GL_ALPHA_MIN_CLAMP_INGR = libtischPINVOKE.GL_ALPHA_MIN_CLAMP_INGR_get();
  public static readonly int GL_RED_MAX_CLAMP_INGR = libtischPINVOKE.GL_RED_MAX_CLAMP_INGR_get();
  public static readonly int GL_GREEN_MAX_CLAMP_INGR = libtischPINVOKE.GL_GREEN_MAX_CLAMP_INGR_get();
  public static readonly int GL_BLUE_MAX_CLAMP_INGR = libtischPINVOKE.GL_BLUE_MAX_CLAMP_INGR_get();
  public static readonly int GL_ALPHA_MAX_CLAMP_INGR = libtischPINVOKE.GL_ALPHA_MAX_CLAMP_INGR_get();
  public static readonly int GL_INTERLACE_READ_INGR = libtischPINVOKE.GL_INTERLACE_READ_INGR_get();
  public static readonly int GL_INCR_WRAP_EXT = libtischPINVOKE.GL_INCR_WRAP_EXT_get();
  public static readonly int GL_DECR_WRAP_EXT = libtischPINVOKE.GL_DECR_WRAP_EXT_get();
  public static readonly int GL_422_EXT = libtischPINVOKE.GL_422_EXT_get();
  public static readonly int GL_422_REV_EXT = libtischPINVOKE.GL_422_REV_EXT_get();
  public static readonly int GL_422_AVERAGE_EXT = libtischPINVOKE.GL_422_AVERAGE_EXT_get();
  public static readonly int GL_422_REV_AVERAGE_EXT = libtischPINVOKE.GL_422_REV_AVERAGE_EXT_get();
  public static readonly int GL_NORMAL_MAP_NV = libtischPINVOKE.GL_NORMAL_MAP_NV_get();
  public static readonly int GL_REFLECTION_MAP_NV = libtischPINVOKE.GL_REFLECTION_MAP_NV_get();
  public static readonly int GL_NORMAL_MAP_EXT = libtischPINVOKE.GL_NORMAL_MAP_EXT_get();
  public static readonly int GL_REFLECTION_MAP_EXT = libtischPINVOKE.GL_REFLECTION_MAP_EXT_get();
  public static readonly int GL_TEXTURE_CUBE_MAP_EXT = libtischPINVOKE.GL_TEXTURE_CUBE_MAP_EXT_get();
  public static readonly int GL_TEXTURE_BINDING_CUBE_MAP_EXT = libtischPINVOKE.GL_TEXTURE_BINDING_CUBE_MAP_EXT_get();
  public static readonly int GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT = libtischPINVOKE.GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT_get();
  public static readonly int GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT = libtischPINVOKE.GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT_get();
  public static readonly int GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT = libtischPINVOKE.GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT_get();
  public static readonly int GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT = libtischPINVOKE.GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT_get();
  public static readonly int GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT = libtischPINVOKE.GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT_get();
  public static readonly int GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT = libtischPINVOKE.GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT_get();
  public static readonly int GL_PROXY_TEXTURE_CUBE_MAP_EXT = libtischPINVOKE.GL_PROXY_TEXTURE_CUBE_MAP_EXT_get();
  public static readonly int GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT = libtischPINVOKE.GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT_get();
  public static readonly int GL_WRAP_BORDER_SUN = libtischPINVOKE.GL_WRAP_BORDER_SUN_get();
  public static readonly int GL_MAX_TEXTURE_LOD_BIAS_EXT = libtischPINVOKE.GL_MAX_TEXTURE_LOD_BIAS_EXT_get();
  public static readonly int GL_TEXTURE_FILTER_CONTROL_EXT = libtischPINVOKE.GL_TEXTURE_FILTER_CONTROL_EXT_get();
  public static readonly int GL_TEXTURE_LOD_BIAS_EXT = libtischPINVOKE.GL_TEXTURE_LOD_BIAS_EXT_get();
  public static readonly int GL_TEXTURE_MAX_ANISOTROPY_EXT = libtischPINVOKE.GL_TEXTURE_MAX_ANISOTROPY_EXT_get();
  public static readonly int GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = libtischPINVOKE.GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT_get();
  public static readonly int GL_MODELVIEW1_STACK_DEPTH_EXT = libtischPINVOKE.GL_MODELVIEW1_STACK_DEPTH_EXT_get();
  public static readonly int GL_MODELVIEW1_MATRIX_EXT = libtischPINVOKE.GL_MODELVIEW1_MATRIX_EXT_get();
  public static readonly int GL_VERTEX_WEIGHTING_EXT = libtischPINVOKE.GL_VERTEX_WEIGHTING_EXT_get();
  public static readonly int GL_MODELVIEW1_EXT = libtischPINVOKE.GL_MODELVIEW1_EXT_get();
  public static readonly int GL_CURRENT_VERTEX_WEIGHT_EXT = libtischPINVOKE.GL_CURRENT_VERTEX_WEIGHT_EXT_get();
  public static readonly int GL_VERTEX_WEIGHT_ARRAY_EXT = libtischPINVOKE.GL_VERTEX_WEIGHT_ARRAY_EXT_get();
  public static readonly int GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT = libtischPINVOKE.GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT_get();
  public static readonly int GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT = libtischPINVOKE.GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT_get();
  public static readonly int GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT = libtischPINVOKE.GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT_get();
  public static readonly int GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT = libtischPINVOKE.GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT_get();
  public static readonly int GL_MAX_SHININESS_NV = libtischPINVOKE.GL_MAX_SHININESS_NV_get();
  public static readonly int GL_MAX_SPOT_EXPONENT_NV = libtischPINVOKE.GL_MAX_SPOT_EXPONENT_NV_get();
  public static readonly int GL_VERTEX_ARRAY_RANGE_NV = libtischPINVOKE.GL_VERTEX_ARRAY_RANGE_NV_get();
  public static readonly int GL_VERTEX_ARRAY_RANGE_LENGTH_NV = libtischPINVOKE.GL_VERTEX_ARRAY_RANGE_LENGTH_NV_get();
  public static readonly int GL_VERTEX_ARRAY_RANGE_VALID_NV = libtischPINVOKE.GL_VERTEX_ARRAY_RANGE_VALID_NV_get();
  public static readonly int GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV = libtischPINVOKE.GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV_get();
  public static readonly int GL_VERTEX_ARRAY_RANGE_POINTER_NV = libtischPINVOKE.GL_VERTEX_ARRAY_RANGE_POINTER_NV_get();
  public static readonly int GL_REGISTER_COMBINERS_NV = libtischPINVOKE.GL_REGISTER_COMBINERS_NV_get();
  public static readonly int GL_VARIABLE_A_NV = libtischPINVOKE.GL_VARIABLE_A_NV_get();
  public static readonly int GL_VARIABLE_B_NV = libtischPINVOKE.GL_VARIABLE_B_NV_get();
  public static readonly int GL_VARIABLE_C_NV = libtischPINVOKE.GL_VARIABLE_C_NV_get();
  public static readonly int GL_VARIABLE_D_NV = libtischPINVOKE.GL_VARIABLE_D_NV_get();
  public static readonly int GL_VARIABLE_E_NV = libtischPINVOKE.GL_VARIABLE_E_NV_get();
  public static readonly int GL_VARIABLE_F_NV = libtischPINVOKE.GL_VARIABLE_F_NV_get();
  public static readonly int GL_VARIABLE_G_NV = libtischPINVOKE.GL_VARIABLE_G_NV_get();
  public static readonly int GL_CONSTANT_COLOR0_NV = libtischPINVOKE.GL_CONSTANT_COLOR0_NV_get();
  public static readonly int GL_CONSTANT_COLOR1_NV = libtischPINVOKE.GL_CONSTANT_COLOR1_NV_get();
  public static readonly int GL_PRIMARY_COLOR_NV = libtischPINVOKE.GL_PRIMARY_COLOR_NV_get();
  public static readonly int GL_SECONDARY_COLOR_NV = libtischPINVOKE.GL_SECONDARY_COLOR_NV_get();
  public static readonly int GL_SPARE0_NV = libtischPINVOKE.GL_SPARE0_NV_get();
  public static readonly int GL_SPARE1_NV = libtischPINVOKE.GL_SPARE1_NV_get();
  public static readonly int GL_DISCARD_NV = libtischPINVOKE.GL_DISCARD_NV_get();
  public static readonly int GL_E_TIMES_F_NV = libtischPINVOKE.GL_E_TIMES_F_NV_get();
  public static readonly int GL_SPARE0_PLUS_SECONDARY_COLOR_NV = libtischPINVOKE.GL_SPARE0_PLUS_SECONDARY_COLOR_NV_get();
  public static readonly int GL_UNSIGNED_IDENTITY_NV = libtischPINVOKE.GL_UNSIGNED_IDENTITY_NV_get();
  public static readonly int GL_UNSIGNED_INVERT_NV = libtischPINVOKE.GL_UNSIGNED_INVERT_NV_get();
  public static readonly int GL_EXPAND_NORMAL_NV = libtischPINVOKE.GL_EXPAND_NORMAL_NV_get();
  public static readonly int GL_EXPAND_NEGATE_NV = libtischPINVOKE.GL_EXPAND_NEGATE_NV_get();
  public static readonly int GL_HALF_BIAS_NORMAL_NV = libtischPINVOKE.GL_HALF_BIAS_NORMAL_NV_get();
  public static readonly int GL_HALF_BIAS_NEGATE_NV = libtischPINVOKE.GL_HALF_BIAS_NEGATE_NV_get();
  public static readonly int GL_SIGNED_IDENTITY_NV = libtischPINVOKE.GL_SIGNED_IDENTITY_NV_get();
  public static readonly int GL_SIGNED_NEGATE_NV = libtischPINVOKE.GL_SIGNED_NEGATE_NV_get();
  public static readonly int GL_SCALE_BY_TWO_NV = libtischPINVOKE.GL_SCALE_BY_TWO_NV_get();
  public static readonly int GL_SCALE_BY_FOUR_NV = libtischPINVOKE.GL_SCALE_BY_FOUR_NV_get();
  public static readonly int GL_SCALE_BY_ONE_HALF_NV = libtischPINVOKE.GL_SCALE_BY_ONE_HALF_NV_get();
  public static readonly int GL_BIAS_BY_NEGATIVE_ONE_HALF_NV = libtischPINVOKE.GL_BIAS_BY_NEGATIVE_ONE_HALF_NV_get();
  public static readonly int GL_COMBINER_INPUT_NV = libtischPINVOKE.GL_COMBINER_INPUT_NV_get();
  public static readonly int GL_COMBINER_MAPPING_NV = libtischPINVOKE.GL_COMBINER_MAPPING_NV_get();
  public static readonly int GL_COMBINER_COMPONENT_USAGE_NV = libtischPINVOKE.GL_COMBINER_COMPONENT_USAGE_NV_get();
  public static readonly int GL_COMBINER_AB_DOT_PRODUCT_NV = libtischPINVOKE.GL_COMBINER_AB_DOT_PRODUCT_NV_get();
  public static readonly int GL_COMBINER_CD_DOT_PRODUCT_NV = libtischPINVOKE.GL_COMBINER_CD_DOT_PRODUCT_NV_get();
  public static readonly int GL_COMBINER_MUX_SUM_NV = libtischPINVOKE.GL_COMBINER_MUX_SUM_NV_get();
  public static readonly int GL_COMBINER_SCALE_NV = libtischPINVOKE.GL_COMBINER_SCALE_NV_get();
  public static readonly int GL_COMBINER_BIAS_NV = libtischPINVOKE.GL_COMBINER_BIAS_NV_get();
  public static readonly int GL_COMBINER_AB_OUTPUT_NV = libtischPINVOKE.GL_COMBINER_AB_OUTPUT_NV_get();
  public static readonly int GL_COMBINER_CD_OUTPUT_NV = libtischPINVOKE.GL_COMBINER_CD_OUTPUT_NV_get();
  public static readonly int GL_COMBINER_SUM_OUTPUT_NV = libtischPINVOKE.GL_COMBINER_SUM_OUTPUT_NV_get();
  public static readonly int GL_MAX_GENERAL_COMBINERS_NV = libtischPINVOKE.GL_MAX_GENERAL_COMBINERS_NV_get();
  public static readonly int GL_NUM_GENERAL_COMBINERS_NV = libtischPINVOKE.GL_NUM_GENERAL_COMBINERS_NV_get();
  public static readonly int GL_COLOR_SUM_CLAMP_NV = libtischPINVOKE.GL_COLOR_SUM_CLAMP_NV_get();
  public static readonly int GL_COMBINER0_NV = libtischPINVOKE.GL_COMBINER0_NV_get();
  public static readonly int GL_COMBINER1_NV = libtischPINVOKE.GL_COMBINER1_NV_get();
  public static readonly int GL_COMBINER2_NV = libtischPINVOKE.GL_COMBINER2_NV_get();
  public static readonly int GL_COMBINER3_NV = libtischPINVOKE.GL_COMBINER3_NV_get();
  public static readonly int GL_COMBINER4_NV = libtischPINVOKE.GL_COMBINER4_NV_get();
  public static readonly int GL_COMBINER5_NV = libtischPINVOKE.GL_COMBINER5_NV_get();
  public static readonly int GL_COMBINER6_NV = libtischPINVOKE.GL_COMBINER6_NV_get();
  public static readonly int GL_COMBINER7_NV = libtischPINVOKE.GL_COMBINER7_NV_get();
  public static readonly int GL_FOG_DISTANCE_MODE_NV = libtischPINVOKE.GL_FOG_DISTANCE_MODE_NV_get();
  public static readonly int GL_EYE_RADIAL_NV = libtischPINVOKE.GL_EYE_RADIAL_NV_get();
  public static readonly int GL_EYE_PLANE_ABSOLUTE_NV = libtischPINVOKE.GL_EYE_PLANE_ABSOLUTE_NV_get();
  public static readonly int GL_EMBOSS_LIGHT_NV = libtischPINVOKE.GL_EMBOSS_LIGHT_NV_get();
  public static readonly int GL_EMBOSS_CONSTANT_NV = libtischPINVOKE.GL_EMBOSS_CONSTANT_NV_get();
  public static readonly int GL_EMBOSS_MAP_NV = libtischPINVOKE.GL_EMBOSS_MAP_NV_get();
  public static readonly int GL_COMBINE4_NV = libtischPINVOKE.GL_COMBINE4_NV_get();
  public static readonly int GL_SOURCE3_RGB_NV = libtischPINVOKE.GL_SOURCE3_RGB_NV_get();
  public static readonly int GL_SOURCE3_ALPHA_NV = libtischPINVOKE.GL_SOURCE3_ALPHA_NV_get();
  public static readonly int GL_OPERAND3_RGB_NV = libtischPINVOKE.GL_OPERAND3_RGB_NV_get();
  public static readonly int GL_OPERAND3_ALPHA_NV = libtischPINVOKE.GL_OPERAND3_ALPHA_NV_get();
  public static readonly int GL_COMPRESSED_RGB_S3TC_DXT1_EXT = libtischPINVOKE.GL_COMPRESSED_RGB_S3TC_DXT1_EXT_get();
  public static readonly int GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = libtischPINVOKE.GL_COMPRESSED_RGBA_S3TC_DXT1_EXT_get();
  public static readonly int GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = libtischPINVOKE.GL_COMPRESSED_RGBA_S3TC_DXT3_EXT_get();
  public static readonly int GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = libtischPINVOKE.GL_COMPRESSED_RGBA_S3TC_DXT5_EXT_get();
  public static readonly int GL_CULL_VERTEX_IBM = libtischPINVOKE.GL_CULL_VERTEX_IBM_get();
  public static readonly int GL_VERTEX_ARRAY_LIST_IBM = libtischPINVOKE.GL_VERTEX_ARRAY_LIST_IBM_get();
  public static readonly int GL_NORMAL_ARRAY_LIST_IBM = libtischPINVOKE.GL_NORMAL_ARRAY_LIST_IBM_get();
  public static readonly int GL_COLOR_ARRAY_LIST_IBM = libtischPINVOKE.GL_COLOR_ARRAY_LIST_IBM_get();
  public static readonly int GL_INDEX_ARRAY_LIST_IBM = libtischPINVOKE.GL_INDEX_ARRAY_LIST_IBM_get();
  public static readonly int GL_TEXTURE_COORD_ARRAY_LIST_IBM = libtischPINVOKE.GL_TEXTURE_COORD_ARRAY_LIST_IBM_get();
  public static readonly int GL_EDGE_FLAG_ARRAY_LIST_IBM = libtischPINVOKE.GL_EDGE_FLAG_ARRAY_LIST_IBM_get();
  public static readonly int GL_FOG_COORDINATE_ARRAY_LIST_IBM = libtischPINVOKE.GL_FOG_COORDINATE_ARRAY_LIST_IBM_get();
  public static readonly int GL_SECONDARY_COLOR_ARRAY_LIST_IBM = libtischPINVOKE.GL_SECONDARY_COLOR_ARRAY_LIST_IBM_get();
  public static readonly int GL_VERTEX_ARRAY_LIST_STRIDE_IBM = libtischPINVOKE.GL_VERTEX_ARRAY_LIST_STRIDE_IBM_get();
  public static readonly int GL_NORMAL_ARRAY_LIST_STRIDE_IBM = libtischPINVOKE.GL_NORMAL_ARRAY_LIST_STRIDE_IBM_get();
  public static readonly int GL_COLOR_ARRAY_LIST_STRIDE_IBM = libtischPINVOKE.GL_COLOR_ARRAY_LIST_STRIDE_IBM_get();
  public static readonly int GL_INDEX_ARRAY_LIST_STRIDE_IBM = libtischPINVOKE.GL_INDEX_ARRAY_LIST_STRIDE_IBM_get();
  public static readonly int GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM = libtischPINVOKE.GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM_get();
  public static readonly int GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM = libtischPINVOKE.GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM_get();
  public static readonly int GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM = libtischPINVOKE.GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM_get();
  public static readonly int GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM = libtischPINVOKE.GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM_get();
  public static readonly int GL_PACK_SUBSAMPLE_RATE_SGIX = libtischPINVOKE.GL_PACK_SUBSAMPLE_RATE_SGIX_get();
  public static readonly int GL_UNPACK_SUBSAMPLE_RATE_SGIX = libtischPINVOKE.GL_UNPACK_SUBSAMPLE_RATE_SGIX_get();
  public static readonly int GL_PIXEL_SUBSAMPLE_4444_SGIX = libtischPINVOKE.GL_PIXEL_SUBSAMPLE_4444_SGIX_get();
  public static readonly int GL_PIXEL_SUBSAMPLE_2424_SGIX = libtischPINVOKE.GL_PIXEL_SUBSAMPLE_2424_SGIX_get();
  public static readonly int GL_PIXEL_SUBSAMPLE_4242_SGIX = libtischPINVOKE.GL_PIXEL_SUBSAMPLE_4242_SGIX_get();
  public static readonly int GL_YCRCB_SGIX = libtischPINVOKE.GL_YCRCB_SGIX_get();
  public static readonly int GL_YCRCBA_SGIX = libtischPINVOKE.GL_YCRCBA_SGIX_get();
  public static readonly int GL_DEPTH_PASS_INSTRUMENT_SGIX = libtischPINVOKE.GL_DEPTH_PASS_INSTRUMENT_SGIX_get();
  public static readonly int GL_DEPTH_PASS_INSTRUMENT_COUNTERS_SGIX = libtischPINVOKE.GL_DEPTH_PASS_INSTRUMENT_COUNTERS_SGIX_get();
  public static readonly int GL_DEPTH_PASS_INSTRUMENT_MAX_SGIX = libtischPINVOKE.GL_DEPTH_PASS_INSTRUMENT_MAX_SGIX_get();
  public static readonly int GL_COMPRESSED_RGB_FXT1_3DFX = libtischPINVOKE.GL_COMPRESSED_RGB_FXT1_3DFX_get();
  public static readonly int GL_COMPRESSED_RGBA_FXT1_3DFX = libtischPINVOKE.GL_COMPRESSED_RGBA_FXT1_3DFX_get();
  public static readonly int GL_MULTISAMPLE_3DFX = libtischPINVOKE.GL_MULTISAMPLE_3DFX_get();
  public static readonly int GL_SAMPLE_BUFFERS_3DFX = libtischPINVOKE.GL_SAMPLE_BUFFERS_3DFX_get();
  public static readonly int GL_SAMPLES_3DFX = libtischPINVOKE.GL_SAMPLES_3DFX_get();
  public static readonly int GL_MULTISAMPLE_BIT_3DFX = libtischPINVOKE.GL_MULTISAMPLE_BIT_3DFX_get();
  public static readonly int GL_MULTISAMPLE_EXT = libtischPINVOKE.GL_MULTISAMPLE_EXT_get();
  public static readonly int GL_SAMPLE_ALPHA_TO_MASK_EXT = libtischPINVOKE.GL_SAMPLE_ALPHA_TO_MASK_EXT_get();
  public static readonly int GL_SAMPLE_ALPHA_TO_ONE_EXT = libtischPINVOKE.GL_SAMPLE_ALPHA_TO_ONE_EXT_get();
  public static readonly int GL_SAMPLE_MASK_EXT = libtischPINVOKE.GL_SAMPLE_MASK_EXT_get();
  public static readonly int GL_1PASS_EXT = libtischPINVOKE.GL_1PASS_EXT_get();
  public static readonly int GL_2PASS_0_EXT = libtischPINVOKE.GL_2PASS_0_EXT_get();
  public static readonly int GL_2PASS_1_EXT = libtischPINVOKE.GL_2PASS_1_EXT_get();
  public static readonly int GL_4PASS_0_EXT = libtischPINVOKE.GL_4PASS_0_EXT_get();
  public static readonly int GL_4PASS_1_EXT = libtischPINVOKE.GL_4PASS_1_EXT_get();
  public static readonly int GL_4PASS_2_EXT = libtischPINVOKE.GL_4PASS_2_EXT_get();
  public static readonly int GL_4PASS_3_EXT = libtischPINVOKE.GL_4PASS_3_EXT_get();
  public static readonly int GL_SAMPLE_BUFFERS_EXT = libtischPINVOKE.GL_SAMPLE_BUFFERS_EXT_get();
  public static readonly int GL_SAMPLES_EXT = libtischPINVOKE.GL_SAMPLES_EXT_get();
  public static readonly int GL_SAMPLE_MASK_VALUE_EXT = libtischPINVOKE.GL_SAMPLE_MASK_VALUE_EXT_get();
  public static readonly int GL_SAMPLE_MASK_INVERT_EXT = libtischPINVOKE.GL_SAMPLE_MASK_INVERT_EXT_get();
  public static readonly int GL_SAMPLE_PATTERN_EXT = libtischPINVOKE.GL_SAMPLE_PATTERN_EXT_get();
  public static readonly int GL_MULTISAMPLE_BIT_EXT = libtischPINVOKE.GL_MULTISAMPLE_BIT_EXT_get();
  public static readonly int GL_VERTEX_PRECLIP_SGIX = libtischPINVOKE.GL_VERTEX_PRECLIP_SGIX_get();
  public static readonly int GL_VERTEX_PRECLIP_HINT_SGIX = libtischPINVOKE.GL_VERTEX_PRECLIP_HINT_SGIX_get();
  public static readonly int GL_CONVOLUTION_HINT_SGIX = libtischPINVOKE.GL_CONVOLUTION_HINT_SGIX_get();
  public static readonly int GL_PACK_RESAMPLE_SGIX = libtischPINVOKE.GL_PACK_RESAMPLE_SGIX_get();
  public static readonly int GL_UNPACK_RESAMPLE_SGIX = libtischPINVOKE.GL_UNPACK_RESAMPLE_SGIX_get();
  public static readonly int GL_RESAMPLE_REPLICATE_SGIX = libtischPINVOKE.GL_RESAMPLE_REPLICATE_SGIX_get();
  public static readonly int GL_RESAMPLE_ZERO_FILL_SGIX = libtischPINVOKE.GL_RESAMPLE_ZERO_FILL_SGIX_get();
  public static readonly int GL_RESAMPLE_DECIMATE_SGIX = libtischPINVOKE.GL_RESAMPLE_DECIMATE_SGIX_get();
  public static readonly int GL_EYE_DISTANCE_TO_POINT_SGIS = libtischPINVOKE.GL_EYE_DISTANCE_TO_POINT_SGIS_get();
  public static readonly int GL_OBJECT_DISTANCE_TO_POINT_SGIS = libtischPINVOKE.GL_OBJECT_DISTANCE_TO_POINT_SGIS_get();
  public static readonly int GL_EYE_DISTANCE_TO_LINE_SGIS = libtischPINVOKE.GL_EYE_DISTANCE_TO_LINE_SGIS_get();
  public static readonly int GL_OBJECT_DISTANCE_TO_LINE_SGIS = libtischPINVOKE.GL_OBJECT_DISTANCE_TO_LINE_SGIS_get();
  public static readonly int GL_EYE_POINT_SGIS = libtischPINVOKE.GL_EYE_POINT_SGIS_get();
  public static readonly int GL_OBJECT_POINT_SGIS = libtischPINVOKE.GL_OBJECT_POINT_SGIS_get();
  public static readonly int GL_EYE_LINE_SGIS = libtischPINVOKE.GL_EYE_LINE_SGIS_get();
  public static readonly int GL_OBJECT_LINE_SGIS = libtischPINVOKE.GL_OBJECT_LINE_SGIS_get();
  public static readonly int GL_TEXTURE_COLOR_WRITEMASK_SGIS = libtischPINVOKE.GL_TEXTURE_COLOR_WRITEMASK_SGIS_get();
  public static readonly int GL_DOT3_RGB_EXT = libtischPINVOKE.GL_DOT3_RGB_EXT_get();
  public static readonly int GL_DOT3_RGBA_EXT = libtischPINVOKE.GL_DOT3_RGBA_EXT_get();
  public static readonly int GL_MIRROR_CLAMP_ATI = libtischPINVOKE.GL_MIRROR_CLAMP_ATI_get();
  public static readonly int GL_MIRROR_CLAMP_TO_EDGE_ATI = libtischPINVOKE.GL_MIRROR_CLAMP_TO_EDGE_ATI_get();
  public static readonly int GL_ALL_COMPLETED_NV = libtischPINVOKE.GL_ALL_COMPLETED_NV_get();
  public static readonly int GL_FENCE_STATUS_NV = libtischPINVOKE.GL_FENCE_STATUS_NV_get();
  public static readonly int GL_FENCE_CONDITION_NV = libtischPINVOKE.GL_FENCE_CONDITION_NV_get();
  public static readonly int GL_MIRRORED_REPEAT_IBM = libtischPINVOKE.GL_MIRRORED_REPEAT_IBM_get();
  public static readonly int GL_EVAL_2D_NV = libtischPINVOKE.GL_EVAL_2D_NV_get();
  public static readonly int GL_EVAL_TRIANGULAR_2D_NV = libtischPINVOKE.GL_EVAL_TRIANGULAR_2D_NV_get();
  public static readonly int GL_MAP_TESSELLATION_NV = libtischPINVOKE.GL_MAP_TESSELLATION_NV_get();
  public static readonly int GL_MAP_ATTRIB_U_ORDER_NV = libtischPINVOKE.GL_MAP_ATTRIB_U_ORDER_NV_get();
  public static readonly int GL_MAP_ATTRIB_V_ORDER_NV = libtischPINVOKE.GL_MAP_ATTRIB_V_ORDER_NV_get();
  public static readonly int GL_EVAL_FRACTIONAL_TESSELLATION_NV = libtischPINVOKE.GL_EVAL_FRACTIONAL_TESSELLATION_NV_get();
  public static readonly int GL_EVAL_VERTEX_ATTRIB0_NV = libtischPINVOKE.GL_EVAL_VERTEX_ATTRIB0_NV_get();
  public static readonly int GL_EVAL_VERTEX_ATTRIB1_NV = libtischPINVOKE.GL_EVAL_VERTEX_ATTRIB1_NV_get();
  public static readonly int GL_EVAL_VERTEX_ATTRIB2_NV = libtischPINVOKE.GL_EVAL_VERTEX_ATTRIB2_NV_get();
  public static readonly int GL_EVAL_VERTEX_ATTRIB3_NV = libtischPINVOKE.GL_EVAL_VERTEX_ATTRIB3_NV_get();
  public static readonly int GL_EVAL_VERTEX_ATTRIB4_NV = libtischPINVOKE.GL_EVAL_VERTEX_ATTRIB4_NV_get();
  public static readonly int GL_EVAL_VERTEX_ATTRIB5_NV = libtischPINVOKE.GL_EVAL_VERTEX_ATTRIB5_NV_get();
  public static readonly int GL_EVAL_VERTEX_ATTRIB6_NV = libtischPINVOKE.GL_EVAL_VERTEX_ATTRIB6_NV_get();
  public static readonly int GL_EVAL_VERTEX_ATTRIB7_NV = libtischPINVOKE.GL_EVAL_VERTEX_ATTRIB7_NV_get();
  public static readonly int GL_EVAL_VERTEX_ATTRIB8_NV = libtischPINVOKE.GL_EVAL_VERTEX_ATTRIB8_NV_get();
  public static readonly int GL_EVAL_VERTEX_ATTRIB9_NV = libtischPINVOKE.GL_EVAL_VERTEX_ATTRIB9_NV_get();
  public static readonly int GL_EVAL_VERTEX_ATTRIB10_NV = libtischPINVOKE.GL_EVAL_VERTEX_ATTRIB10_NV_get();
  public static readonly int GL_EVAL_VERTEX_ATTRIB11_NV = libtischPINVOKE.GL_EVAL_VERTEX_ATTRIB11_NV_get();
  public static readonly int GL_EVAL_VERTEX_ATTRIB12_NV = libtischPINVOKE.GL_EVAL_VERTEX_ATTRIB12_NV_get();
  public static readonly int GL_EVAL_VERTEX_ATTRIB13_NV = libtischPINVOKE.GL_EVAL_VERTEX_ATTRIB13_NV_get();
  public static readonly int GL_EVAL_VERTEX_ATTRIB14_NV = libtischPINVOKE.GL_EVAL_VERTEX_ATTRIB14_NV_get();
  public static readonly int GL_EVAL_VERTEX_ATTRIB15_NV = libtischPINVOKE.GL_EVAL_VERTEX_ATTRIB15_NV_get();
  public static readonly int GL_MAX_MAP_TESSELLATION_NV = libtischPINVOKE.GL_MAX_MAP_TESSELLATION_NV_get();
  public static readonly int GL_MAX_RATIONAL_EVAL_ORDER_NV = libtischPINVOKE.GL_MAX_RATIONAL_EVAL_ORDER_NV_get();
  public static readonly int GL_DEPTH_STENCIL_NV = libtischPINVOKE.GL_DEPTH_STENCIL_NV_get();
  public static readonly int GL_UNSIGNED_INT_24_8_NV = libtischPINVOKE.GL_UNSIGNED_INT_24_8_NV_get();
  public static readonly int GL_PER_STAGE_CONSTANTS_NV = libtischPINVOKE.GL_PER_STAGE_CONSTANTS_NV_get();
  public static readonly int GL_TEXTURE_RECTANGLE_NV = libtischPINVOKE.GL_TEXTURE_RECTANGLE_NV_get();
  public static readonly int GL_TEXTURE_BINDING_RECTANGLE_NV = libtischPINVOKE.GL_TEXTURE_BINDING_RECTANGLE_NV_get();
  public static readonly int GL_PROXY_TEXTURE_RECTANGLE_NV = libtischPINVOKE.GL_PROXY_TEXTURE_RECTANGLE_NV_get();
  public static readonly int GL_MAX_RECTANGLE_TEXTURE_SIZE_NV = libtischPINVOKE.GL_MAX_RECTANGLE_TEXTURE_SIZE_NV_get();
  public static readonly int GL_OFFSET_TEXTURE_RECTANGLE_NV = libtischPINVOKE.GL_OFFSET_TEXTURE_RECTANGLE_NV_get();
  public static readonly int GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV = libtischPINVOKE.GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV_get();
  public static readonly int GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV = libtischPINVOKE.GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV_get();
  public static readonly int GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV = libtischPINVOKE.GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV_get();
  public static readonly int GL_UNSIGNED_INT_S8_S8_8_8_NV = libtischPINVOKE.GL_UNSIGNED_INT_S8_S8_8_8_NV_get();
  public static readonly int GL_UNSIGNED_INT_8_8_S8_S8_REV_NV = libtischPINVOKE.GL_UNSIGNED_INT_8_8_S8_S8_REV_NV_get();
  public static readonly int GL_DSDT_MAG_INTENSITY_NV = libtischPINVOKE.GL_DSDT_MAG_INTENSITY_NV_get();
  public static readonly int GL_SHADER_CONSISTENT_NV = libtischPINVOKE.GL_SHADER_CONSISTENT_NV_get();
  public static readonly int GL_TEXTURE_SHADER_NV = libtischPINVOKE.GL_TEXTURE_SHADER_NV_get();
  public static readonly int GL_SHADER_OPERATION_NV = libtischPINVOKE.GL_SHADER_OPERATION_NV_get();
  public static readonly int GL_CULL_MODES_NV = libtischPINVOKE.GL_CULL_MODES_NV_get();
  public static readonly int GL_OFFSET_TEXTURE_MATRIX_NV = libtischPINVOKE.GL_OFFSET_TEXTURE_MATRIX_NV_get();
  public static readonly int GL_OFFSET_TEXTURE_SCALE_NV = libtischPINVOKE.GL_OFFSET_TEXTURE_SCALE_NV_get();
  public static readonly int GL_OFFSET_TEXTURE_BIAS_NV = libtischPINVOKE.GL_OFFSET_TEXTURE_BIAS_NV_get();
  public static readonly int GL_OFFSET_TEXTURE_2D_MATRIX_NV = libtischPINVOKE.GL_OFFSET_TEXTURE_2D_MATRIX_NV_get();
  public static readonly int GL_OFFSET_TEXTURE_2D_SCALE_NV = libtischPINVOKE.GL_OFFSET_TEXTURE_2D_SCALE_NV_get();
  public static readonly int GL_OFFSET_TEXTURE_2D_BIAS_NV = libtischPINVOKE.GL_OFFSET_TEXTURE_2D_BIAS_NV_get();
  public static readonly int GL_PREVIOUS_TEXTURE_INPUT_NV = libtischPINVOKE.GL_PREVIOUS_TEXTURE_INPUT_NV_get();
  public static readonly int GL_CONST_EYE_NV = libtischPINVOKE.GL_CONST_EYE_NV_get();
  public static readonly int GL_PASS_THROUGH_NV = libtischPINVOKE.GL_PASS_THROUGH_NV_get();
  public static readonly int GL_CULL_FRAGMENT_NV = libtischPINVOKE.GL_CULL_FRAGMENT_NV_get();
  public static readonly int GL_OFFSET_TEXTURE_2D_NV = libtischPINVOKE.GL_OFFSET_TEXTURE_2D_NV_get();
  public static readonly int GL_DEPENDENT_AR_TEXTURE_2D_NV = libtischPINVOKE.GL_DEPENDENT_AR_TEXTURE_2D_NV_get();
  public static readonly int GL_DEPENDENT_GB_TEXTURE_2D_NV = libtischPINVOKE.GL_DEPENDENT_GB_TEXTURE_2D_NV_get();
  public static readonly int GL_DOT_PRODUCT_NV = libtischPINVOKE.GL_DOT_PRODUCT_NV_get();
  public static readonly int GL_DOT_PRODUCT_DEPTH_REPLACE_NV = libtischPINVOKE.GL_DOT_PRODUCT_DEPTH_REPLACE_NV_get();
  public static readonly int GL_DOT_PRODUCT_TEXTURE_2D_NV = libtischPINVOKE.GL_DOT_PRODUCT_TEXTURE_2D_NV_get();
  public static readonly int GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV = libtischPINVOKE.GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV_get();
  public static readonly int GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV = libtischPINVOKE.GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV_get();
  public static readonly int GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV = libtischPINVOKE.GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV_get();
  public static readonly int GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV = libtischPINVOKE.GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV_get();
  public static readonly int GL_HILO_NV = libtischPINVOKE.GL_HILO_NV_get();
  public static readonly int GL_DSDT_NV = libtischPINVOKE.GL_DSDT_NV_get();
  public static readonly int GL_DSDT_MAG_NV = libtischPINVOKE.GL_DSDT_MAG_NV_get();
  public static readonly int GL_DSDT_MAG_VIB_NV = libtischPINVOKE.GL_DSDT_MAG_VIB_NV_get();
  public static readonly int GL_HILO16_NV = libtischPINVOKE.GL_HILO16_NV_get();
  public static readonly int GL_SIGNED_HILO_NV = libtischPINVOKE.GL_SIGNED_HILO_NV_get();
  public static readonly int GL_SIGNED_HILO16_NV = libtischPINVOKE.GL_SIGNED_HILO16_NV_get();
  public static readonly int GL_SIGNED_RGBA_NV = libtischPINVOKE.GL_SIGNED_RGBA_NV_get();
  public static readonly int GL_SIGNED_RGBA8_NV = libtischPINVOKE.GL_SIGNED_RGBA8_NV_get();
  public static readonly int GL_SIGNED_RGB_NV = libtischPINVOKE.GL_SIGNED_RGB_NV_get();
  public static readonly int GL_SIGNED_RGB8_NV = libtischPINVOKE.GL_SIGNED_RGB8_NV_get();
  public static readonly int GL_SIGNED_LUMINANCE_NV = libtischPINVOKE.GL_SIGNED_LUMINANCE_NV_get();
  public static readonly int GL_SIGNED_LUMINANCE8_NV = libtischPINVOKE.GL_SIGNED_LUMINANCE8_NV_get();
  public static readonly int GL_SIGNED_LUMINANCE_ALPHA_NV = libtischPINVOKE.GL_SIGNED_LUMINANCE_ALPHA_NV_get();
  public static readonly int GL_SIGNED_LUMINANCE8_ALPHA8_NV = libtischPINVOKE.GL_SIGNED_LUMINANCE8_ALPHA8_NV_get();
  public static readonly int GL_SIGNED_ALPHA_NV = libtischPINVOKE.GL_SIGNED_ALPHA_NV_get();
  public static readonly int GL_SIGNED_ALPHA8_NV = libtischPINVOKE.GL_SIGNED_ALPHA8_NV_get();
  public static readonly int GL_SIGNED_INTENSITY_NV = libtischPINVOKE.GL_SIGNED_INTENSITY_NV_get();
  public static readonly int GL_SIGNED_INTENSITY8_NV = libtischPINVOKE.GL_SIGNED_INTENSITY8_NV_get();
  public static readonly int GL_DSDT8_NV = libtischPINVOKE.GL_DSDT8_NV_get();
  public static readonly int GL_DSDT8_MAG8_NV = libtischPINVOKE.GL_DSDT8_MAG8_NV_get();
  public static readonly int GL_DSDT8_MAG8_INTENSITY8_NV = libtischPINVOKE.GL_DSDT8_MAG8_INTENSITY8_NV_get();
  public static readonly int GL_SIGNED_RGB_UNSIGNED_ALPHA_NV = libtischPINVOKE.GL_SIGNED_RGB_UNSIGNED_ALPHA_NV_get();
  public static readonly int GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV = libtischPINVOKE.GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV_get();
  public static readonly int GL_HI_SCALE_NV = libtischPINVOKE.GL_HI_SCALE_NV_get();
  public static readonly int GL_LO_SCALE_NV = libtischPINVOKE.GL_LO_SCALE_NV_get();
  public static readonly int GL_DS_SCALE_NV = libtischPINVOKE.GL_DS_SCALE_NV_get();
  public static readonly int GL_DT_SCALE_NV = libtischPINVOKE.GL_DT_SCALE_NV_get();
  public static readonly int GL_MAGNITUDE_SCALE_NV = libtischPINVOKE.GL_MAGNITUDE_SCALE_NV_get();
  public static readonly int GL_VIBRANCE_SCALE_NV = libtischPINVOKE.GL_VIBRANCE_SCALE_NV_get();
  public static readonly int GL_HI_BIAS_NV = libtischPINVOKE.GL_HI_BIAS_NV_get();
  public static readonly int GL_LO_BIAS_NV = libtischPINVOKE.GL_LO_BIAS_NV_get();
  public static readonly int GL_DS_BIAS_NV = libtischPINVOKE.GL_DS_BIAS_NV_get();
  public static readonly int GL_DT_BIAS_NV = libtischPINVOKE.GL_DT_BIAS_NV_get();
  public static readonly int GL_MAGNITUDE_BIAS_NV = libtischPINVOKE.GL_MAGNITUDE_BIAS_NV_get();
  public static readonly int GL_VIBRANCE_BIAS_NV = libtischPINVOKE.GL_VIBRANCE_BIAS_NV_get();
  public static readonly int GL_TEXTURE_BORDER_VALUES_NV = libtischPINVOKE.GL_TEXTURE_BORDER_VALUES_NV_get();
  public static readonly int GL_TEXTURE_HI_SIZE_NV = libtischPINVOKE.GL_TEXTURE_HI_SIZE_NV_get();
  public static readonly int GL_TEXTURE_LO_SIZE_NV = libtischPINVOKE.GL_TEXTURE_LO_SIZE_NV_get();
  public static readonly int GL_TEXTURE_DS_SIZE_NV = libtischPINVOKE.GL_TEXTURE_DS_SIZE_NV_get();
  public static readonly int GL_TEXTURE_DT_SIZE_NV = libtischPINVOKE.GL_TEXTURE_DT_SIZE_NV_get();
  public static readonly int GL_TEXTURE_MAG_SIZE_NV = libtischPINVOKE.GL_TEXTURE_MAG_SIZE_NV_get();
  public static readonly int GL_DOT_PRODUCT_TEXTURE_3D_NV = libtischPINVOKE.GL_DOT_PRODUCT_TEXTURE_3D_NV_get();
  public static readonly int GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV = libtischPINVOKE.GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV_get();
  public static readonly int GL_VERTEX_PROGRAM_NV = libtischPINVOKE.GL_VERTEX_PROGRAM_NV_get();
  public static readonly int GL_VERTEX_STATE_PROGRAM_NV = libtischPINVOKE.GL_VERTEX_STATE_PROGRAM_NV_get();
  public static readonly int GL_ATTRIB_ARRAY_SIZE_NV = libtischPINVOKE.GL_ATTRIB_ARRAY_SIZE_NV_get();
  public static readonly int GL_ATTRIB_ARRAY_STRIDE_NV = libtischPINVOKE.GL_ATTRIB_ARRAY_STRIDE_NV_get();
  public static readonly int GL_ATTRIB_ARRAY_TYPE_NV = libtischPINVOKE.GL_ATTRIB_ARRAY_TYPE_NV_get();
  public static readonly int GL_CURRENT_ATTRIB_NV = libtischPINVOKE.GL_CURRENT_ATTRIB_NV_get();
  public static readonly int GL_PROGRAM_LENGTH_NV = libtischPINVOKE.GL_PROGRAM_LENGTH_NV_get();
  public static readonly int GL_PROGRAM_STRING_NV = libtischPINVOKE.GL_PROGRAM_STRING_NV_get();
  public static readonly int GL_MODELVIEW_PROJECTION_NV = libtischPINVOKE.GL_MODELVIEW_PROJECTION_NV_get();
  public static readonly int GL_IDENTITY_NV = libtischPINVOKE.GL_IDENTITY_NV_get();
  public static readonly int GL_INVERSE_NV = libtischPINVOKE.GL_INVERSE_NV_get();
  public static readonly int GL_TRANSPOSE_NV = libtischPINVOKE.GL_TRANSPOSE_NV_get();
  public static readonly int GL_INVERSE_TRANSPOSE_NV = libtischPINVOKE.GL_INVERSE_TRANSPOSE_NV_get();
  public static readonly int GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV = libtischPINVOKE.GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV_get();
  public static readonly int GL_MAX_TRACK_MATRICES_NV = libtischPINVOKE.GL_MAX_TRACK_MATRICES_NV_get();
  public static readonly int GL_MATRIX0_NV = libtischPINVOKE.GL_MATRIX0_NV_get();
  public static readonly int GL_MATRIX1_NV = libtischPINVOKE.GL_MATRIX1_NV_get();
  public static readonly int GL_MATRIX2_NV = libtischPINVOKE.GL_MATRIX2_NV_get();
  public static readonly int GL_MATRIX3_NV = libtischPINVOKE.GL_MATRIX3_NV_get();
  public static readonly int GL_MATRIX4_NV = libtischPINVOKE.GL_MATRIX4_NV_get();
  public static readonly int GL_MATRIX5_NV = libtischPINVOKE.GL_MATRIX5_NV_get();
  public static readonly int GL_MATRIX6_NV = libtischPINVOKE.GL_MATRIX6_NV_get();
  public static readonly int GL_MATRIX7_NV = libtischPINVOKE.GL_MATRIX7_NV_get();
  public static readonly int GL_CURRENT_MATRIX_STACK_DEPTH_NV = libtischPINVOKE.GL_CURRENT_MATRIX_STACK_DEPTH_NV_get();
  public static readonly int GL_CURRENT_MATRIX_NV = libtischPINVOKE.GL_CURRENT_MATRIX_NV_get();
  public static readonly int GL_VERTEX_PROGRAM_POINT_SIZE_NV = libtischPINVOKE.GL_VERTEX_PROGRAM_POINT_SIZE_NV_get();
  public static readonly int GL_VERTEX_PROGRAM_TWO_SIDE_NV = libtischPINVOKE.GL_VERTEX_PROGRAM_TWO_SIDE_NV_get();
  public static readonly int GL_PROGRAM_PARAMETER_NV = libtischPINVOKE.GL_PROGRAM_PARAMETER_NV_get();
  public static readonly int GL_ATTRIB_ARRAY_POINTER_NV = libtischPINVOKE.GL_ATTRIB_ARRAY_POINTER_NV_get();
  public static readonly int GL_PROGRAM_TARGET_NV = libtischPINVOKE.GL_PROGRAM_TARGET_NV_get();
  public static readonly int GL_PROGRAM_RESIDENT_NV = libtischPINVOKE.GL_PROGRAM_RESIDENT_NV_get();
  public static readonly int GL_TRACK_MATRIX_NV = libtischPINVOKE.GL_TRACK_MATRIX_NV_get();
  public static readonly int GL_TRACK_MATRIX_TRANSFORM_NV = libtischPINVOKE.GL_TRACK_MATRIX_TRANSFORM_NV_get();
  public static readonly int GL_VERTEX_PROGRAM_BINDING_NV = libtischPINVOKE.GL_VERTEX_PROGRAM_BINDING_NV_get();
  public static readonly int GL_PROGRAM_ERROR_POSITION_NV = libtischPINVOKE.GL_PROGRAM_ERROR_POSITION_NV_get();
  public static readonly int GL_VERTEX_ATTRIB_ARRAY0_NV = libtischPINVOKE.GL_VERTEX_ATTRIB_ARRAY0_NV_get();
  public static readonly int GL_VERTEX_ATTRIB_ARRAY1_NV = libtischPINVOKE.GL_VERTEX_ATTRIB_ARRAY1_NV_get();
  public static readonly int GL_VERTEX_ATTRIB_ARRAY2_NV = libtischPINVOKE.GL_VERTEX_ATTRIB_ARRAY2_NV_get();
  public static readonly int GL_VERTEX_ATTRIB_ARRAY3_NV = libtischPINVOKE.GL_VERTEX_ATTRIB_ARRAY3_NV_get();
  public static readonly int GL_VERTEX_ATTRIB_ARRAY4_NV = libtischPINVOKE.GL_VERTEX_ATTRIB_ARRAY4_NV_get();
  public static readonly int GL_VERTEX_ATTRIB_ARRAY5_NV = libtischPINVOKE.GL_VERTEX_ATTRIB_ARRAY5_NV_get();
  public static readonly int GL_VERTEX_ATTRIB_ARRAY6_NV = libtischPINVOKE.GL_VERTEX_ATTRIB_ARRAY6_NV_get();
  public static readonly int GL_VERTEX_ATTRIB_ARRAY7_NV = libtischPINVOKE.GL_VERTEX_ATTRIB_ARRAY7_NV_get();
  public static readonly int GL_VERTEX_ATTRIB_ARRAY8_NV = libtischPINVOKE.GL_VERTEX_ATTRIB_ARRAY8_NV_get();
  public static readonly int GL_VERTEX_ATTRIB_ARRAY9_NV = libtischPINVOKE.GL_VERTEX_ATTRIB_ARRAY9_NV_get();
  public static readonly int GL_VERTEX_ATTRIB_ARRAY10_NV = libtischPINVOKE.GL_VERTEX_ATTRIB_ARRAY10_NV_get();
  public static readonly int GL_VERTEX_ATTRIB_ARRAY11_NV = libtischPINVOKE.GL_VERTEX_ATTRIB_ARRAY11_NV_get();
  public static readonly int GL_VERTEX_ATTRIB_ARRAY12_NV = libtischPINVOKE.GL_VERTEX_ATTRIB_ARRAY12_NV_get();
  public static readonly int GL_VERTEX_ATTRIB_ARRAY13_NV = libtischPINVOKE.GL_VERTEX_ATTRIB_ARRAY13_NV_get();
  public static readonly int GL_VERTEX_ATTRIB_ARRAY14_NV = libtischPINVOKE.GL_VERTEX_ATTRIB_ARRAY14_NV_get();
  public static readonly int GL_VERTEX_ATTRIB_ARRAY15_NV = libtischPINVOKE.GL_VERTEX_ATTRIB_ARRAY15_NV_get();
  public static readonly int GL_MAP1_VERTEX_ATTRIB0_4_NV = libtischPINVOKE.GL_MAP1_VERTEX_ATTRIB0_4_NV_get();
  public static readonly int GL_MAP1_VERTEX_ATTRIB1_4_NV = libtischPINVOKE.GL_MAP1_VERTEX_ATTRIB1_4_NV_get();
  public static readonly int GL_MAP1_VERTEX_ATTRIB2_4_NV = libtischPINVOKE.GL_MAP1_VERTEX_ATTRIB2_4_NV_get();
  public static readonly int GL_MAP1_VERTEX_ATTRIB3_4_NV = libtischPINVOKE.GL_MAP1_VERTEX_ATTRIB3_4_NV_get();
  public static readonly int GL_MAP1_VERTEX_ATTRIB4_4_NV = libtischPINVOKE.GL_MAP1_VERTEX_ATTRIB4_4_NV_get();
  public static readonly int GL_MAP1_VERTEX_ATTRIB5_4_NV = libtischPINVOKE.GL_MAP1_VERTEX_ATTRIB5_4_NV_get();
  public static readonly int GL_MAP1_VERTEX_ATTRIB6_4_NV = libtischPINVOKE.GL_MAP1_VERTEX_ATTRIB6_4_NV_get();
  public static readonly int GL_MAP1_VERTEX_ATTRIB7_4_NV = libtischPINVOKE.GL_MAP1_VERTEX_ATTRIB7_4_NV_get();
  public static readonly int GL_MAP1_VERTEX_ATTRIB8_4_NV = libtischPINVOKE.GL_MAP1_VERTEX_ATTRIB8_4_NV_get();
  public static readonly int GL_MAP1_VERTEX_ATTRIB9_4_NV = libtischPINVOKE.GL_MAP1_VERTEX_ATTRIB9_4_NV_get();
  public static readonly int GL_MAP1_VERTEX_ATTRIB10_4_NV = libtischPINVOKE.GL_MAP1_VERTEX_ATTRIB10_4_NV_get();
  public static readonly int GL_MAP1_VERTEX_ATTRIB11_4_NV = libtischPINVOKE.GL_MAP1_VERTEX_ATTRIB11_4_NV_get();
  public static readonly int GL_MAP1_VERTEX_ATTRIB12_4_NV = libtischPINVOKE.GL_MAP1_VERTEX_ATTRIB12_4_NV_get();
  public static readonly int GL_MAP1_VERTEX_ATTRIB13_4_NV = libtischPINVOKE.GL_MAP1_VERTEX_ATTRIB13_4_NV_get();
  public static readonly int GL_MAP1_VERTEX_ATTRIB14_4_NV = libtischPINVOKE.GL_MAP1_VERTEX_ATTRIB14_4_NV_get();
  public static readonly int GL_MAP1_VERTEX_ATTRIB15_4_NV = libtischPINVOKE.GL_MAP1_VERTEX_ATTRIB15_4_NV_get();
  public static readonly int GL_MAP2_VERTEX_ATTRIB0_4_NV = libtischPINVOKE.GL_MAP2_VERTEX_ATTRIB0_4_NV_get();
  public static readonly int GL_MAP2_VERTEX_ATTRIB1_4_NV = libtischPINVOKE.GL_MAP2_VERTEX_ATTRIB1_4_NV_get();
  public static readonly int GL_MAP2_VERTEX_ATTRIB2_4_NV = libtischPINVOKE.GL_MAP2_VERTEX_ATTRIB2_4_NV_get();
  public static readonly int GL_MAP2_VERTEX_ATTRIB3_4_NV = libtischPINVOKE.GL_MAP2_VERTEX_ATTRIB3_4_NV_get();
  public static readonly int GL_MAP2_VERTEX_ATTRIB4_4_NV = libtischPINVOKE.GL_MAP2_VERTEX_ATTRIB4_4_NV_get();
  public static readonly int GL_MAP2_VERTEX_ATTRIB5_4_NV = libtischPINVOKE.GL_MAP2_VERTEX_ATTRIB5_4_NV_get();
  public static readonly int GL_MAP2_VERTEX_ATTRIB6_4_NV = libtischPINVOKE.GL_MAP2_VERTEX_ATTRIB6_4_NV_get();
  public static readonly int GL_MAP2_VERTEX_ATTRIB7_4_NV = libtischPINVOKE.GL_MAP2_VERTEX_ATTRIB7_4_NV_get();
  public static readonly int GL_MAP2_VERTEX_ATTRIB8_4_NV = libtischPINVOKE.GL_MAP2_VERTEX_ATTRIB8_4_NV_get();
  public static readonly int GL_MAP2_VERTEX_ATTRIB9_4_NV = libtischPINVOKE.GL_MAP2_VERTEX_ATTRIB9_4_NV_get();
  public static readonly int GL_MAP2_VERTEX_ATTRIB10_4_NV = libtischPINVOKE.GL_MAP2_VERTEX_ATTRIB10_4_NV_get();
  public static readonly int GL_MAP2_VERTEX_ATTRIB11_4_NV = libtischPINVOKE.GL_MAP2_VERTEX_ATTRIB11_4_NV_get();
  public static readonly int GL_MAP2_VERTEX_ATTRIB12_4_NV = libtischPINVOKE.GL_MAP2_VERTEX_ATTRIB12_4_NV_get();
  public static readonly int GL_MAP2_VERTEX_ATTRIB13_4_NV = libtischPINVOKE.GL_MAP2_VERTEX_ATTRIB13_4_NV_get();
  public static readonly int GL_MAP2_VERTEX_ATTRIB14_4_NV = libtischPINVOKE.GL_MAP2_VERTEX_ATTRIB14_4_NV_get();
  public static readonly int GL_MAP2_VERTEX_ATTRIB15_4_NV = libtischPINVOKE.GL_MAP2_VERTEX_ATTRIB15_4_NV_get();
  public static readonly int GL_TEXTURE_MAX_CLAMP_S_SGIX = libtischPINVOKE.GL_TEXTURE_MAX_CLAMP_S_SGIX_get();
  public static readonly int GL_TEXTURE_MAX_CLAMP_T_SGIX = libtischPINVOKE.GL_TEXTURE_MAX_CLAMP_T_SGIX_get();
  public static readonly int GL_TEXTURE_MAX_CLAMP_R_SGIX = libtischPINVOKE.GL_TEXTURE_MAX_CLAMP_R_SGIX_get();
  public static readonly int GL_SCALEBIAS_HINT_SGIX = libtischPINVOKE.GL_SCALEBIAS_HINT_SGIX_get();
  public static readonly int GL_INTERLACE_OML = libtischPINVOKE.GL_INTERLACE_OML_get();
  public static readonly int GL_INTERLACE_READ_OML = libtischPINVOKE.GL_INTERLACE_READ_OML_get();
  public static readonly int GL_FORMAT_SUBSAMPLE_24_24_OML = libtischPINVOKE.GL_FORMAT_SUBSAMPLE_24_24_OML_get();
  public static readonly int GL_FORMAT_SUBSAMPLE_244_244_OML = libtischPINVOKE.GL_FORMAT_SUBSAMPLE_244_244_OML_get();
  public static readonly int GL_PACK_RESAMPLE_OML = libtischPINVOKE.GL_PACK_RESAMPLE_OML_get();
  public static readonly int GL_UNPACK_RESAMPLE_OML = libtischPINVOKE.GL_UNPACK_RESAMPLE_OML_get();
  public static readonly int GL_RESAMPLE_REPLICATE_OML = libtischPINVOKE.GL_RESAMPLE_REPLICATE_OML_get();
  public static readonly int GL_RESAMPLE_ZERO_FILL_OML = libtischPINVOKE.GL_RESAMPLE_ZERO_FILL_OML_get();
  public static readonly int GL_RESAMPLE_AVERAGE_OML = libtischPINVOKE.GL_RESAMPLE_AVERAGE_OML_get();
  public static readonly int GL_RESAMPLE_DECIMATE_OML = libtischPINVOKE.GL_RESAMPLE_DECIMATE_OML_get();
  public static readonly int GL_DEPTH_STENCIL_TO_RGBA_NV = libtischPINVOKE.GL_DEPTH_STENCIL_TO_RGBA_NV_get();
  public static readonly int GL_DEPTH_STENCIL_TO_BGRA_NV = libtischPINVOKE.GL_DEPTH_STENCIL_TO_BGRA_NV_get();
  public static readonly int GL_BUMP_ROT_MATRIX_ATI = libtischPINVOKE.GL_BUMP_ROT_MATRIX_ATI_get();
  public static readonly int GL_BUMP_ROT_MATRIX_SIZE_ATI = libtischPINVOKE.GL_BUMP_ROT_MATRIX_SIZE_ATI_get();
  public static readonly int GL_BUMP_NUM_TEX_UNITS_ATI = libtischPINVOKE.GL_BUMP_NUM_TEX_UNITS_ATI_get();
  public static readonly int GL_BUMP_TEX_UNITS_ATI = libtischPINVOKE.GL_BUMP_TEX_UNITS_ATI_get();
  public static readonly int GL_DUDV_ATI = libtischPINVOKE.GL_DUDV_ATI_get();
  public static readonly int GL_DU8DV8_ATI = libtischPINVOKE.GL_DU8DV8_ATI_get();
  public static readonly int GL_BUMP_ENVMAP_ATI = libtischPINVOKE.GL_BUMP_ENVMAP_ATI_get();
  public static readonly int GL_BUMP_TARGET_ATI = libtischPINVOKE.GL_BUMP_TARGET_ATI_get();
  public static readonly int GL_FRAGMENT_SHADER_ATI = libtischPINVOKE.GL_FRAGMENT_SHADER_ATI_get();
  public static readonly int GL_REG_0_ATI = libtischPINVOKE.GL_REG_0_ATI_get();
  public static readonly int GL_REG_1_ATI = libtischPINVOKE.GL_REG_1_ATI_get();
  public static readonly int GL_REG_2_ATI = libtischPINVOKE.GL_REG_2_ATI_get();
  public static readonly int GL_REG_3_ATI = libtischPINVOKE.GL_REG_3_ATI_get();
  public static readonly int GL_REG_4_ATI = libtischPINVOKE.GL_REG_4_ATI_get();
  public static readonly int GL_REG_5_ATI = libtischPINVOKE.GL_REG_5_ATI_get();
  public static readonly int GL_REG_6_ATI = libtischPINVOKE.GL_REG_6_ATI_get();
  public static readonly int GL_REG_7_ATI = libtischPINVOKE.GL_REG_7_ATI_get();
  public static readonly int GL_REG_8_ATI = libtischPINVOKE.GL_REG_8_ATI_get();
  public static readonly int GL_REG_9_ATI = libtischPINVOKE.GL_REG_9_ATI_get();
  public static readonly int GL_REG_10_ATI = libtischPINVOKE.GL_REG_10_ATI_get();
  public static readonly int GL_REG_11_ATI = libtischPINVOKE.GL_REG_11_ATI_get();
  public static readonly int GL_REG_12_ATI = libtischPINVOKE.GL_REG_12_ATI_get();
  public static readonly int GL_REG_13_ATI = libtischPINVOKE.GL_REG_13_ATI_get();
  public static readonly int GL_REG_14_ATI = libtischPINVOKE.GL_REG_14_ATI_get();
  public static readonly int GL_REG_15_ATI = libtischPINVOKE.GL_REG_15_ATI_get();
  public static readonly int GL_REG_16_ATI = libtischPINVOKE.GL_REG_16_ATI_get();
  public static readonly int GL_REG_17_ATI = libtischPINVOKE.GL_REG_17_ATI_get();
  public static readonly int GL_REG_18_ATI = libtischPINVOKE.GL_REG_18_ATI_get();
  public static readonly int GL_REG_19_ATI = libtischPINVOKE.GL_REG_19_ATI_get();
  public static readonly int GL_REG_20_ATI = libtischPINVOKE.GL_REG_20_ATI_get();
  public static readonly int GL_REG_21_ATI = libtischPINVOKE.GL_REG_21_ATI_get();
  public static readonly int GL_REG_22_ATI = libtischPINVOKE.GL_REG_22_ATI_get();
  public static readonly int GL_REG_23_ATI = libtischPINVOKE.GL_REG_23_ATI_get();
  public static readonly int GL_REG_24_ATI = libtischPINVOKE.GL_REG_24_ATI_get();
  public static readonly int GL_REG_25_ATI = libtischPINVOKE.GL_REG_25_ATI_get();
  public static readonly int GL_REG_26_ATI = libtischPINVOKE.GL_REG_26_ATI_get();
  public static readonly int GL_REG_27_ATI = libtischPINVOKE.GL_REG_27_ATI_get();
  public static readonly int GL_REG_28_ATI = libtischPINVOKE.GL_REG_28_ATI_get();
  public static readonly int GL_REG_29_ATI = libtischPINVOKE.GL_REG_29_ATI_get();
  public static readonly int GL_REG_30_ATI = libtischPINVOKE.GL_REG_30_ATI_get();
  public static readonly int GL_REG_31_ATI = libtischPINVOKE.GL_REG_31_ATI_get();
  public static readonly int GL_CON_0_ATI = libtischPINVOKE.GL_CON_0_ATI_get();
  public static readonly int GL_CON_1_ATI = libtischPINVOKE.GL_CON_1_ATI_get();
  public static readonly int GL_CON_2_ATI = libtischPINVOKE.GL_CON_2_ATI_get();
  public static readonly int GL_CON_3_ATI = libtischPINVOKE.GL_CON_3_ATI_get();
  public static readonly int GL_CON_4_ATI = libtischPINVOKE.GL_CON_4_ATI_get();
  public static readonly int GL_CON_5_ATI = libtischPINVOKE.GL_CON_5_ATI_get();
  public static readonly int GL_CON_6_ATI = libtischPINVOKE.GL_CON_6_ATI_get();
  public static readonly int GL_CON_7_ATI = libtischPINVOKE.GL_CON_7_ATI_get();
  public static readonly int GL_CON_8_ATI = libtischPINVOKE.GL_CON_8_ATI_get();
  public static readonly int GL_CON_9_ATI = libtischPINVOKE.GL_CON_9_ATI_get();
  public static readonly int GL_CON_10_ATI = libtischPINVOKE.GL_CON_10_ATI_get();
  public static readonly int GL_CON_11_ATI = libtischPINVOKE.GL_CON_11_ATI_get();
  public static readonly int GL_CON_12_ATI = libtischPINVOKE.GL_CON_12_ATI_get();
  public static readonly int GL_CON_13_ATI = libtischPINVOKE.GL_CON_13_ATI_get();
  public static readonly int GL_CON_14_ATI = libtischPINVOKE.GL_CON_14_ATI_get();
  public static readonly int GL_CON_15_ATI = libtischPINVOKE.GL_CON_15_ATI_get();
  public static readonly int GL_CON_16_ATI = libtischPINVOKE.GL_CON_16_ATI_get();
  public static readonly int GL_CON_17_ATI = libtischPINVOKE.GL_CON_17_ATI_get();
  public static readonly int GL_CON_18_ATI = libtischPINVOKE.GL_CON_18_ATI_get();
  public static readonly int GL_CON_19_ATI = libtischPINVOKE.GL_CON_19_ATI_get();
  public static readonly int GL_CON_20_ATI = libtischPINVOKE.GL_CON_20_ATI_get();
  public static readonly int GL_CON_21_ATI = libtischPINVOKE.GL_CON_21_ATI_get();
  public static readonly int GL_CON_22_ATI = libtischPINVOKE.GL_CON_22_ATI_get();
  public static readonly int GL_CON_23_ATI = libtischPINVOKE.GL_CON_23_ATI_get();
  public static readonly int GL_CON_24_ATI = libtischPINVOKE.GL_CON_24_ATI_get();
  public static readonly int GL_CON_25_ATI = libtischPINVOKE.GL_CON_25_ATI_get();
  public static readonly int GL_CON_26_ATI = libtischPINVOKE.GL_CON_26_ATI_get();
  public static readonly int GL_CON_27_ATI = libtischPINVOKE.GL_CON_27_ATI_get();
  public static readonly int GL_CON_28_ATI = libtischPINVOKE.GL_CON_28_ATI_get();
  public static readonly int GL_CON_29_ATI = libtischPINVOKE.GL_CON_29_ATI_get();
  public static readonly int GL_CON_30_ATI = libtischPINVOKE.GL_CON_30_ATI_get();
  public static readonly int GL_CON_31_ATI = libtischPINVOKE.GL_CON_31_ATI_get();
  public static readonly int GL_MOV_ATI = libtischPINVOKE.GL_MOV_ATI_get();
  public static readonly int GL_ADD_ATI = libtischPINVOKE.GL_ADD_ATI_get();
  public static readonly int GL_MUL_ATI = libtischPINVOKE.GL_MUL_ATI_get();
  public static readonly int GL_SUB_ATI = libtischPINVOKE.GL_SUB_ATI_get();
  public static readonly int GL_DOT3_ATI = libtischPINVOKE.GL_DOT3_ATI_get();
  public static readonly int GL_DOT4_ATI = libtischPINVOKE.GL_DOT4_ATI_get();
  public static readonly int GL_MAD_ATI = libtischPINVOKE.GL_MAD_ATI_get();
  public static readonly int GL_LERP_ATI = libtischPINVOKE.GL_LERP_ATI_get();
  public static readonly int GL_CND_ATI = libtischPINVOKE.GL_CND_ATI_get();
  public static readonly int GL_CND0_ATI = libtischPINVOKE.GL_CND0_ATI_get();
  public static readonly int GL_DOT2_ADD_ATI = libtischPINVOKE.GL_DOT2_ADD_ATI_get();
  public static readonly int GL_SECONDARY_INTERPOLATOR_ATI = libtischPINVOKE.GL_SECONDARY_INTERPOLATOR_ATI_get();
  public static readonly int GL_NUM_FRAGMENT_REGISTERS_ATI = libtischPINVOKE.GL_NUM_FRAGMENT_REGISTERS_ATI_get();
  public static readonly int GL_NUM_FRAGMENT_CONSTANTS_ATI = libtischPINVOKE.GL_NUM_FRAGMENT_CONSTANTS_ATI_get();
  public static readonly int GL_NUM_PASSES_ATI = libtischPINVOKE.GL_NUM_PASSES_ATI_get();
  public static readonly int GL_NUM_INSTRUCTIONS_PER_PASS_ATI = libtischPINVOKE.GL_NUM_INSTRUCTIONS_PER_PASS_ATI_get();
  public static readonly int GL_NUM_INSTRUCTIONS_TOTAL_ATI = libtischPINVOKE.GL_NUM_INSTRUCTIONS_TOTAL_ATI_get();
  public static readonly int GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI = libtischPINVOKE.GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI_get();
  public static readonly int GL_NUM_LOOPBACK_COMPONENTS_ATI = libtischPINVOKE.GL_NUM_LOOPBACK_COMPONENTS_ATI_get();
  public static readonly int GL_COLOR_ALPHA_PAIRING_ATI = libtischPINVOKE.GL_COLOR_ALPHA_PAIRING_ATI_get();
  public static readonly int GL_SWIZZLE_STR_ATI = libtischPINVOKE.GL_SWIZZLE_STR_ATI_get();
  public static readonly int GL_SWIZZLE_STQ_ATI = libtischPINVOKE.GL_SWIZZLE_STQ_ATI_get();
  public static readonly int GL_SWIZZLE_STR_DR_ATI = libtischPINVOKE.GL_SWIZZLE_STR_DR_ATI_get();
  public static readonly int GL_SWIZZLE_STQ_DQ_ATI = libtischPINVOKE.GL_SWIZZLE_STQ_DQ_ATI_get();
  public static readonly int GL_SWIZZLE_STRQ_ATI = libtischPINVOKE.GL_SWIZZLE_STRQ_ATI_get();
  public static readonly int GL_SWIZZLE_STRQ_DQ_ATI = libtischPINVOKE.GL_SWIZZLE_STRQ_DQ_ATI_get();
  public static readonly int GL_RED_BIT_ATI = libtischPINVOKE.GL_RED_BIT_ATI_get();
  public static readonly int GL_GREEN_BIT_ATI = libtischPINVOKE.GL_GREEN_BIT_ATI_get();
  public static readonly int GL_BLUE_BIT_ATI = libtischPINVOKE.GL_BLUE_BIT_ATI_get();
  public static readonly int GL_2X_BIT_ATI = libtischPINVOKE.GL_2X_BIT_ATI_get();
  public static readonly int GL_4X_BIT_ATI = libtischPINVOKE.GL_4X_BIT_ATI_get();
  public static readonly int GL_8X_BIT_ATI = libtischPINVOKE.GL_8X_BIT_ATI_get();
  public static readonly int GL_HALF_BIT_ATI = libtischPINVOKE.GL_HALF_BIT_ATI_get();
  public static readonly int GL_QUARTER_BIT_ATI = libtischPINVOKE.GL_QUARTER_BIT_ATI_get();
  public static readonly int GL_EIGHTH_BIT_ATI = libtischPINVOKE.GL_EIGHTH_BIT_ATI_get();
  public static readonly int GL_SATURATE_BIT_ATI = libtischPINVOKE.GL_SATURATE_BIT_ATI_get();
  public static readonly int GL_COMP_BIT_ATI = libtischPINVOKE.GL_COMP_BIT_ATI_get();
  public static readonly int GL_NEGATE_BIT_ATI = libtischPINVOKE.GL_NEGATE_BIT_ATI_get();
  public static readonly int GL_BIAS_BIT_ATI = libtischPINVOKE.GL_BIAS_BIT_ATI_get();
  public static readonly int GL_PN_TRIANGLES_ATI = libtischPINVOKE.GL_PN_TRIANGLES_ATI_get();
  public static readonly int GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI = libtischPINVOKE.GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI_get();
  public static readonly int GL_PN_TRIANGLES_POINT_MODE_ATI = libtischPINVOKE.GL_PN_TRIANGLES_POINT_MODE_ATI_get();
  public static readonly int GL_PN_TRIANGLES_NORMAL_MODE_ATI = libtischPINVOKE.GL_PN_TRIANGLES_NORMAL_MODE_ATI_get();
  public static readonly int GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI = libtischPINVOKE.GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI_get();
  public static readonly int GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI = libtischPINVOKE.GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI_get();
  public static readonly int GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI = libtischPINVOKE.GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI_get();
  public static readonly int GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI = libtischPINVOKE.GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI_get();
  public static readonly int GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI = libtischPINVOKE.GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI_get();
  public static readonly int GL_STATIC_ATI = libtischPINVOKE.GL_STATIC_ATI_get();
  public static readonly int GL_DYNAMIC_ATI = libtischPINVOKE.GL_DYNAMIC_ATI_get();
  public static readonly int GL_PRESERVE_ATI = libtischPINVOKE.GL_PRESERVE_ATI_get();
  public static readonly int GL_DISCARD_ATI = libtischPINVOKE.GL_DISCARD_ATI_get();
  public static readonly int GL_OBJECT_BUFFER_SIZE_ATI = libtischPINVOKE.GL_OBJECT_BUFFER_SIZE_ATI_get();
  public static readonly int GL_OBJECT_BUFFER_USAGE_ATI = libtischPINVOKE.GL_OBJECT_BUFFER_USAGE_ATI_get();
  public static readonly int GL_ARRAY_OBJECT_BUFFER_ATI = libtischPINVOKE.GL_ARRAY_OBJECT_BUFFER_ATI_get();
  public static readonly int GL_ARRAY_OBJECT_OFFSET_ATI = libtischPINVOKE.GL_ARRAY_OBJECT_OFFSET_ATI_get();
  public static readonly int GL_VERTEX_SHADER_EXT = libtischPINVOKE.GL_VERTEX_SHADER_EXT_get();
  public static readonly int GL_VERTEX_SHADER_BINDING_EXT = libtischPINVOKE.GL_VERTEX_SHADER_BINDING_EXT_get();
  public static readonly int GL_OP_INDEX_EXT = libtischPINVOKE.GL_OP_INDEX_EXT_get();
  public static readonly int GL_OP_NEGATE_EXT = libtischPINVOKE.GL_OP_NEGATE_EXT_get();
  public static readonly int GL_OP_DOT3_EXT = libtischPINVOKE.GL_OP_DOT3_EXT_get();
  public static readonly int GL_OP_DOT4_EXT = libtischPINVOKE.GL_OP_DOT4_EXT_get();
  public static readonly int GL_OP_MUL_EXT = libtischPINVOKE.GL_OP_MUL_EXT_get();
  public static readonly int GL_OP_ADD_EXT = libtischPINVOKE.GL_OP_ADD_EXT_get();
  public static readonly int GL_OP_MADD_EXT = libtischPINVOKE.GL_OP_MADD_EXT_get();
  public static readonly int GL_OP_FRAC_EXT = libtischPINVOKE.GL_OP_FRAC_EXT_get();
  public static readonly int GL_OP_MAX_EXT = libtischPINVOKE.GL_OP_MAX_EXT_get();
  public static readonly int GL_OP_MIN_EXT = libtischPINVOKE.GL_OP_MIN_EXT_get();
  public static readonly int GL_OP_SET_GE_EXT = libtischPINVOKE.GL_OP_SET_GE_EXT_get();
  public static readonly int GL_OP_SET_LT_EXT = libtischPINVOKE.GL_OP_SET_LT_EXT_get();
  public static readonly int GL_OP_CLAMP_EXT = libtischPINVOKE.GL_OP_CLAMP_EXT_get();
  public static readonly int GL_OP_FLOOR_EXT = libtischPINVOKE.GL_OP_FLOOR_EXT_get();
  public static readonly int GL_OP_ROUND_EXT = libtischPINVOKE.GL_OP_ROUND_EXT_get();
  public static readonly int GL_OP_EXP_BASE_2_EXT = libtischPINVOKE.GL_OP_EXP_BASE_2_EXT_get();
  public static readonly int GL_OP_LOG_BASE_2_EXT = libtischPINVOKE.GL_OP_LOG_BASE_2_EXT_get();
  public static readonly int GL_OP_POWER_EXT = libtischPINVOKE.GL_OP_POWER_EXT_get();
  public static readonly int GL_OP_RECIP_EXT = libtischPINVOKE.GL_OP_RECIP_EXT_get();
  public static readonly int GL_OP_RECIP_SQRT_EXT = libtischPINVOKE.GL_OP_RECIP_SQRT_EXT_get();
  public static readonly int GL_OP_SUB_EXT = libtischPINVOKE.GL_OP_SUB_EXT_get();
  public static readonly int GL_OP_CROSS_PRODUCT_EXT = libtischPINVOKE.GL_OP_CROSS_PRODUCT_EXT_get();
  public static readonly int GL_OP_MULTIPLY_MATRIX_EXT = libtischPINVOKE.GL_OP_MULTIPLY_MATRIX_EXT_get();
  public static readonly int GL_OP_MOV_EXT = libtischPINVOKE.GL_OP_MOV_EXT_get();
  public static readonly int GL_OUTPUT_VERTEX_EXT = libtischPINVOKE.GL_OUTPUT_VERTEX_EXT_get();
  public static readonly int GL_OUTPUT_COLOR0_EXT = libtischPINVOKE.GL_OUTPUT_COLOR0_EXT_get();
  public static readonly int GL_OUTPUT_COLOR1_EXT = libtischPINVOKE.GL_OUTPUT_COLOR1_EXT_get();
  public static readonly int GL_OUTPUT_TEXTURE_COORD0_EXT = libtischPINVOKE.GL_OUTPUT_TEXTURE_COORD0_EXT_get();
  public static readonly int GL_OUTPUT_TEXTURE_COORD1_EXT = libtischPINVOKE.GL_OUTPUT_TEXTURE_COORD1_EXT_get();
  public static readonly int GL_OUTPUT_TEXTURE_COORD2_EXT = libtischPINVOKE.GL_OUTPUT_TEXTURE_COORD2_EXT_get();
  public static readonly int GL_OUTPUT_TEXTURE_COORD3_EXT = libtischPINVOKE.GL_OUTPUT_TEXTURE_COORD3_EXT_get();
  public static readonly int GL_OUTPUT_TEXTURE_COORD4_EXT = libtischPINVOKE.GL_OUTPUT_TEXTURE_COORD4_EXT_get();
  public static readonly int GL_OUTPUT_TEXTURE_COORD5_EXT = libtischPINVOKE.GL_OUTPUT_TEXTURE_COORD5_EXT_get();
  public static readonly int GL_OUTPUT_TEXTURE_COORD6_EXT = libtischPINVOKE.GL_OUTPUT_TEXTURE_COORD6_EXT_get();
  public static readonly int GL_OUTPUT_TEXTURE_COORD7_EXT = libtischPINVOKE.GL_OUTPUT_TEXTURE_COORD7_EXT_get();
  public static readonly int GL_OUTPUT_TEXTURE_COORD8_EXT = libtischPINVOKE.GL_OUTPUT_TEXTURE_COORD8_EXT_get();
  public static readonly int GL_OUTPUT_TEXTURE_COORD9_EXT = libtischPINVOKE.GL_OUTPUT_TEXTURE_COORD9_EXT_get();
  public static readonly int GL_OUTPUT_TEXTURE_COORD10_EXT = libtischPINVOKE.GL_OUTPUT_TEXTURE_COORD10_EXT_get();
  public static readonly int GL_OUTPUT_TEXTURE_COORD11_EXT = libtischPINVOKE.GL_OUTPUT_TEXTURE_COORD11_EXT_get();
  public static readonly int GL_OUTPUT_TEXTURE_COORD12_EXT = libtischPINVOKE.GL_OUTPUT_TEXTURE_COORD12_EXT_get();
  public static readonly int GL_OUTPUT_TEXTURE_COORD13_EXT = libtischPINVOKE.GL_OUTPUT_TEXTURE_COORD13_EXT_get();
  public static readonly int GL_OUTPUT_TEXTURE_COORD14_EXT = libtischPINVOKE.GL_OUTPUT_TEXTURE_COORD14_EXT_get();
  public static readonly int GL_OUTPUT_TEXTURE_COORD15_EXT = libtischPINVOKE.GL_OUTPUT_TEXTURE_COORD15_EXT_get();
  public static readonly int GL_OUTPUT_TEXTURE_COORD16_EXT = libtischPINVOKE.GL_OUTPUT_TEXTURE_COORD16_EXT_get();
  public static readonly int GL_OUTPUT_TEXTURE_COORD17_EXT = libtischPINVOKE.GL_OUTPUT_TEXTURE_COORD17_EXT_get();
  public static readonly int GL_OUTPUT_TEXTURE_COORD18_EXT = libtischPINVOKE.GL_OUTPUT_TEXTURE_COORD18_EXT_get();
  public static readonly int GL_OUTPUT_TEXTURE_COORD19_EXT = libtischPINVOKE.GL_OUTPUT_TEXTURE_COORD19_EXT_get();
  public static readonly int GL_OUTPUT_TEXTURE_COORD20_EXT = libtischPINVOKE.GL_OUTPUT_TEXTURE_COORD20_EXT_get();
  public static readonly int GL_OUTPUT_TEXTURE_COORD21_EXT = libtischPINVOKE.GL_OUTPUT_TEXTURE_COORD21_EXT_get();
  public static readonly int GL_OUTPUT_TEXTURE_COORD22_EXT = libtischPINVOKE.GL_OUTPUT_TEXTURE_COORD22_EXT_get();
  public static readonly int GL_OUTPUT_TEXTURE_COORD23_EXT = libtischPINVOKE.GL_OUTPUT_TEXTURE_COORD23_EXT_get();
  public static readonly int GL_OUTPUT_TEXTURE_COORD24_EXT = libtischPINVOKE.GL_OUTPUT_TEXTURE_COORD24_EXT_get();
  public static readonly int GL_OUTPUT_TEXTURE_COORD25_EXT = libtischPINVOKE.GL_OUTPUT_TEXTURE_COORD25_EXT_get();
  public static readonly int GL_OUTPUT_TEXTURE_COORD26_EXT = libtischPINVOKE.GL_OUTPUT_TEXTURE_COORD26_EXT_get();
  public static readonly int GL_OUTPUT_TEXTURE_COORD27_EXT = libtischPINVOKE.GL_OUTPUT_TEXTURE_COORD27_EXT_get();
  public static readonly int GL_OUTPUT_TEXTURE_COORD28_EXT = libtischPINVOKE.GL_OUTPUT_TEXTURE_COORD28_EXT_get();
  public static readonly int GL_OUTPUT_TEXTURE_COORD29_EXT = libtischPINVOKE.GL_OUTPUT_TEXTURE_COORD29_EXT_get();
  public static readonly int GL_OUTPUT_TEXTURE_COORD30_EXT = libtischPINVOKE.GL_OUTPUT_TEXTURE_COORD30_EXT_get();
  public static readonly int GL_OUTPUT_TEXTURE_COORD31_EXT = libtischPINVOKE.GL_OUTPUT_TEXTURE_COORD31_EXT_get();
  public static readonly int GL_OUTPUT_FOG_EXT = libtischPINVOKE.GL_OUTPUT_FOG_EXT_get();
  public static readonly int GL_SCALAR_EXT = libtischPINVOKE.GL_SCALAR_EXT_get();
  public static readonly int GL_VECTOR_EXT = libtischPINVOKE.GL_VECTOR_EXT_get();
  public static readonly int GL_MATRIX_EXT = libtischPINVOKE.GL_MATRIX_EXT_get();
  public static readonly int GL_VARIANT_EXT = libtischPINVOKE.GL_VARIANT_EXT_get();
  public static readonly int GL_INVARIANT_EXT = libtischPINVOKE.GL_INVARIANT_EXT_get();
  public static readonly int GL_LOCAL_CONSTANT_EXT = libtischPINVOKE.GL_LOCAL_CONSTANT_EXT_get();
  public static readonly int GL_LOCAL_EXT = libtischPINVOKE.GL_LOCAL_EXT_get();
  public static readonly int GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT = libtischPINVOKE.GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT_get();
  public static readonly int GL_MAX_VERTEX_SHADER_VARIANTS_EXT = libtischPINVOKE.GL_MAX_VERTEX_SHADER_VARIANTS_EXT_get();
  public static readonly int GL_MAX_VERTEX_SHADER_INVARIANTS_EXT = libtischPINVOKE.GL_MAX_VERTEX_SHADER_INVARIANTS_EXT_get();
  public static readonly int GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = libtischPINVOKE.GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT_get();
  public static readonly int GL_MAX_VERTEX_SHADER_LOCALS_EXT = libtischPINVOKE.GL_MAX_VERTEX_SHADER_LOCALS_EXT_get();
  public static readonly int GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT = libtischPINVOKE.GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT_get();
  public static readonly int GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT = libtischPINVOKE.GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT_get();
  public static readonly int GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = libtischPINVOKE.GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT_get();
  public static readonly int GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT = libtischPINVOKE.GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT_get();
  public static readonly int GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT = libtischPINVOKE.GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT_get();
  public static readonly int GL_VERTEX_SHADER_INSTRUCTIONS_EXT = libtischPINVOKE.GL_VERTEX_SHADER_INSTRUCTIONS_EXT_get();
  public static readonly int GL_VERTEX_SHADER_VARIANTS_EXT = libtischPINVOKE.GL_VERTEX_SHADER_VARIANTS_EXT_get();
  public static readonly int GL_VERTEX_SHADER_INVARIANTS_EXT = libtischPINVOKE.GL_VERTEX_SHADER_INVARIANTS_EXT_get();
  public static readonly int GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = libtischPINVOKE.GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT_get();
  public static readonly int GL_VERTEX_SHADER_LOCALS_EXT = libtischPINVOKE.GL_VERTEX_SHADER_LOCALS_EXT_get();
  public static readonly int GL_VERTEX_SHADER_OPTIMIZED_EXT = libtischPINVOKE.GL_VERTEX_SHADER_OPTIMIZED_EXT_get();
  public static readonly int GL_X_EXT = libtischPINVOKE.GL_X_EXT_get();
  public static readonly int GL_Y_EXT = libtischPINVOKE.GL_Y_EXT_get();
  public static readonly int GL_Z_EXT = libtischPINVOKE.GL_Z_EXT_get();
  public static readonly int GL_W_EXT = libtischPINVOKE.GL_W_EXT_get();
  public static readonly int GL_NEGATIVE_X_EXT = libtischPINVOKE.GL_NEGATIVE_X_EXT_get();
  public static readonly int GL_NEGATIVE_Y_EXT = libtischPINVOKE.GL_NEGATIVE_Y_EXT_get();
  public static readonly int GL_NEGATIVE_Z_EXT = libtischPINVOKE.GL_NEGATIVE_Z_EXT_get();
  public static readonly int GL_NEGATIVE_W_EXT = libtischPINVOKE.GL_NEGATIVE_W_EXT_get();
  public static readonly int GL_ZERO_EXT = libtischPINVOKE.GL_ZERO_EXT_get();
  public static readonly int GL_ONE_EXT = libtischPINVOKE.GL_ONE_EXT_get();
  public static readonly int GL_NEGATIVE_ONE_EXT = libtischPINVOKE.GL_NEGATIVE_ONE_EXT_get();
  public static readonly int GL_NORMALIZED_RANGE_EXT = libtischPINVOKE.GL_NORMALIZED_RANGE_EXT_get();
  public static readonly int GL_FULL_RANGE_EXT = libtischPINVOKE.GL_FULL_RANGE_EXT_get();
  public static readonly int GL_CURRENT_VERTEX_EXT = libtischPINVOKE.GL_CURRENT_VERTEX_EXT_get();
  public static readonly int GL_MVP_MATRIX_EXT = libtischPINVOKE.GL_MVP_MATRIX_EXT_get();
  public static readonly int GL_VARIANT_VALUE_EXT = libtischPINVOKE.GL_VARIANT_VALUE_EXT_get();
  public static readonly int GL_VARIANT_DATATYPE_EXT = libtischPINVOKE.GL_VARIANT_DATATYPE_EXT_get();
  public static readonly int GL_VARIANT_ARRAY_STRIDE_EXT = libtischPINVOKE.GL_VARIANT_ARRAY_STRIDE_EXT_get();
  public static readonly int GL_VARIANT_ARRAY_TYPE_EXT = libtischPINVOKE.GL_VARIANT_ARRAY_TYPE_EXT_get();
  public static readonly int GL_VARIANT_ARRAY_EXT = libtischPINVOKE.GL_VARIANT_ARRAY_EXT_get();
  public static readonly int GL_VARIANT_ARRAY_POINTER_EXT = libtischPINVOKE.GL_VARIANT_ARRAY_POINTER_EXT_get();
  public static readonly int GL_INVARIANT_VALUE_EXT = libtischPINVOKE.GL_INVARIANT_VALUE_EXT_get();
  public static readonly int GL_INVARIANT_DATATYPE_EXT = libtischPINVOKE.GL_INVARIANT_DATATYPE_EXT_get();
  public static readonly int GL_LOCAL_CONSTANT_VALUE_EXT = libtischPINVOKE.GL_LOCAL_CONSTANT_VALUE_EXT_get();
  public static readonly int GL_LOCAL_CONSTANT_DATATYPE_EXT = libtischPINVOKE.GL_LOCAL_CONSTANT_DATATYPE_EXT_get();
  public static readonly int GL_MAX_VERTEX_STREAMS_ATI = libtischPINVOKE.GL_MAX_VERTEX_STREAMS_ATI_get();
  public static readonly int GL_VERTEX_STREAM0_ATI = libtischPINVOKE.GL_VERTEX_STREAM0_ATI_get();
  public static readonly int GL_VERTEX_STREAM1_ATI = libtischPINVOKE.GL_VERTEX_STREAM1_ATI_get();
  public static readonly int GL_VERTEX_STREAM2_ATI = libtischPINVOKE.GL_VERTEX_STREAM2_ATI_get();
  public static readonly int GL_VERTEX_STREAM3_ATI = libtischPINVOKE.GL_VERTEX_STREAM3_ATI_get();
  public static readonly int GL_VERTEX_STREAM4_ATI = libtischPINVOKE.GL_VERTEX_STREAM4_ATI_get();
  public static readonly int GL_VERTEX_STREAM5_ATI = libtischPINVOKE.GL_VERTEX_STREAM5_ATI_get();
  public static readonly int GL_VERTEX_STREAM6_ATI = libtischPINVOKE.GL_VERTEX_STREAM6_ATI_get();
  public static readonly int GL_VERTEX_STREAM7_ATI = libtischPINVOKE.GL_VERTEX_STREAM7_ATI_get();
  public static readonly int GL_VERTEX_SOURCE_ATI = libtischPINVOKE.GL_VERTEX_SOURCE_ATI_get();
  public static readonly int GL_ELEMENT_ARRAY_ATI = libtischPINVOKE.GL_ELEMENT_ARRAY_ATI_get();
  public static readonly int GL_ELEMENT_ARRAY_TYPE_ATI = libtischPINVOKE.GL_ELEMENT_ARRAY_TYPE_ATI_get();
  public static readonly int GL_ELEMENT_ARRAY_POINTER_ATI = libtischPINVOKE.GL_ELEMENT_ARRAY_POINTER_ATI_get();
  public static readonly int GL_QUAD_MESH_SUN = libtischPINVOKE.GL_QUAD_MESH_SUN_get();
  public static readonly int GL_TRIANGLE_MESH_SUN = libtischPINVOKE.GL_TRIANGLE_MESH_SUN_get();
  public static readonly int GL_SLICE_ACCUM_SUN = libtischPINVOKE.GL_SLICE_ACCUM_SUN_get();
  public static readonly int GL_MULTISAMPLE_FILTER_HINT_NV = libtischPINVOKE.GL_MULTISAMPLE_FILTER_HINT_NV_get();
  public static readonly int GL_DEPTH_CLAMP_NV = libtischPINVOKE.GL_DEPTH_CLAMP_NV_get();
  public static readonly int GL_PIXEL_COUNTER_BITS_NV = libtischPINVOKE.GL_PIXEL_COUNTER_BITS_NV_get();
  public static readonly int GL_CURRENT_OCCLUSION_QUERY_ID_NV = libtischPINVOKE.GL_CURRENT_OCCLUSION_QUERY_ID_NV_get();
  public static readonly int GL_PIXEL_COUNT_NV = libtischPINVOKE.GL_PIXEL_COUNT_NV_get();
  public static readonly int GL_PIXEL_COUNT_AVAILABLE_NV = libtischPINVOKE.GL_PIXEL_COUNT_AVAILABLE_NV_get();
  public static readonly int GL_POINT_SPRITE_NV = libtischPINVOKE.GL_POINT_SPRITE_NV_get();
  public static readonly int GL_COORD_REPLACE_NV = libtischPINVOKE.GL_COORD_REPLACE_NV_get();
  public static readonly int GL_POINT_SPRITE_R_MODE_NV = libtischPINVOKE.GL_POINT_SPRITE_R_MODE_NV_get();
  public static readonly int GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV = libtischPINVOKE.GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV_get();
  public static readonly int GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV = libtischPINVOKE.GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV_get();
  public static readonly int GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV = libtischPINVOKE.GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV_get();
  public static readonly int GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV = libtischPINVOKE.GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV_get();
  public static readonly int GL_OFFSET_HILO_TEXTURE_2D_NV = libtischPINVOKE.GL_OFFSET_HILO_TEXTURE_2D_NV_get();
  public static readonly int GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV = libtischPINVOKE.GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV_get();
  public static readonly int GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV = libtischPINVOKE.GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV_get();
  public static readonly int GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV = libtischPINVOKE.GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV_get();
  public static readonly int GL_DEPENDENT_HILO_TEXTURE_2D_NV = libtischPINVOKE.GL_DEPENDENT_HILO_TEXTURE_2D_NV_get();
  public static readonly int GL_DEPENDENT_RGB_TEXTURE_3D_NV = libtischPINVOKE.GL_DEPENDENT_RGB_TEXTURE_3D_NV_get();
  public static readonly int GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV = libtischPINVOKE.GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV_get();
  public static readonly int GL_DOT_PRODUCT_PASS_THROUGH_NV = libtischPINVOKE.GL_DOT_PRODUCT_PASS_THROUGH_NV_get();
  public static readonly int GL_DOT_PRODUCT_TEXTURE_1D_NV = libtischPINVOKE.GL_DOT_PRODUCT_TEXTURE_1D_NV_get();
  public static readonly int GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV = libtischPINVOKE.GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV_get();
  public static readonly int GL_HILO8_NV = libtischPINVOKE.GL_HILO8_NV_get();
  public static readonly int GL_SIGNED_HILO8_NV = libtischPINVOKE.GL_SIGNED_HILO8_NV_get();
  public static readonly int GL_FORCE_BLUE_TO_ONE_NV = libtischPINVOKE.GL_FORCE_BLUE_TO_ONE_NV_get();
  public static readonly int GL_STENCIL_TEST_TWO_SIDE_EXT = libtischPINVOKE.GL_STENCIL_TEST_TWO_SIDE_EXT_get();
  public static readonly int GL_ACTIVE_STENCIL_FACE_EXT = libtischPINVOKE.GL_ACTIVE_STENCIL_FACE_EXT_get();
  public static readonly int GL_TEXT_FRAGMENT_SHADER_ATI = libtischPINVOKE.GL_TEXT_FRAGMENT_SHADER_ATI_get();
  public static readonly int GL_UNPACK_CLIENT_STORAGE_APPLE = libtischPINVOKE.GL_UNPACK_CLIENT_STORAGE_APPLE_get();
  public static readonly int GL_ELEMENT_ARRAY_APPLE = libtischPINVOKE.GL_ELEMENT_ARRAY_APPLE_get();
  public static readonly int GL_ELEMENT_ARRAY_TYPE_APPLE = libtischPINVOKE.GL_ELEMENT_ARRAY_TYPE_APPLE_get();
  public static readonly int GL_ELEMENT_ARRAY_POINTER_APPLE = libtischPINVOKE.GL_ELEMENT_ARRAY_POINTER_APPLE_get();
  public static readonly int GL_DRAW_PIXELS_APPLE = libtischPINVOKE.GL_DRAW_PIXELS_APPLE_get();
  public static readonly int GL_FENCE_APPLE = libtischPINVOKE.GL_FENCE_APPLE_get();
  public static readonly int GL_VERTEX_ARRAY_BINDING_APPLE = libtischPINVOKE.GL_VERTEX_ARRAY_BINDING_APPLE_get();
  public static readonly int GL_VERTEX_ARRAY_RANGE_APPLE = libtischPINVOKE.GL_VERTEX_ARRAY_RANGE_APPLE_get();
  public static readonly int GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE = libtischPINVOKE.GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE_get();
  public static readonly int GL_VERTEX_ARRAY_STORAGE_HINT_APPLE = libtischPINVOKE.GL_VERTEX_ARRAY_STORAGE_HINT_APPLE_get();
  public static readonly int GL_VERTEX_ARRAY_RANGE_POINTER_APPLE = libtischPINVOKE.GL_VERTEX_ARRAY_RANGE_POINTER_APPLE_get();
  public static readonly int GL_STORAGE_CACHED_APPLE = libtischPINVOKE.GL_STORAGE_CACHED_APPLE_get();
  public static readonly int GL_STORAGE_SHARED_APPLE = libtischPINVOKE.GL_STORAGE_SHARED_APPLE_get();
  public static readonly int GL_YCBCR_422_APPLE = libtischPINVOKE.GL_YCBCR_422_APPLE_get();
  public static readonly int GL_UNSIGNED_SHORT_8_8_APPLE = libtischPINVOKE.GL_UNSIGNED_SHORT_8_8_APPLE_get();
  public static readonly int GL_UNSIGNED_SHORT_8_8_REV_APPLE = libtischPINVOKE.GL_UNSIGNED_SHORT_8_8_REV_APPLE_get();
  public static readonly int GL_RGB_S3TC = libtischPINVOKE.GL_RGB_S3TC_get();
  public static readonly int GL_RGB4_S3TC = libtischPINVOKE.GL_RGB4_S3TC_get();
  public static readonly int GL_RGBA_S3TC = libtischPINVOKE.GL_RGBA_S3TC_get();
  public static readonly int GL_RGBA4_S3TC = libtischPINVOKE.GL_RGBA4_S3TC_get();
  public static readonly int GL_MAX_DRAW_BUFFERS_ATI = libtischPINVOKE.GL_MAX_DRAW_BUFFERS_ATI_get();
  public static readonly int GL_DRAW_BUFFER0_ATI = libtischPINVOKE.GL_DRAW_BUFFER0_ATI_get();
  public static readonly int GL_DRAW_BUFFER1_ATI = libtischPINVOKE.GL_DRAW_BUFFER1_ATI_get();
  public static readonly int GL_DRAW_BUFFER2_ATI = libtischPINVOKE.GL_DRAW_BUFFER2_ATI_get();
  public static readonly int GL_DRAW_BUFFER3_ATI = libtischPINVOKE.GL_DRAW_BUFFER3_ATI_get();
  public static readonly int GL_DRAW_BUFFER4_ATI = libtischPINVOKE.GL_DRAW_BUFFER4_ATI_get();
  public static readonly int GL_DRAW_BUFFER5_ATI = libtischPINVOKE.GL_DRAW_BUFFER5_ATI_get();
  public static readonly int GL_DRAW_BUFFER6_ATI = libtischPINVOKE.GL_DRAW_BUFFER6_ATI_get();
  public static readonly int GL_DRAW_BUFFER7_ATI = libtischPINVOKE.GL_DRAW_BUFFER7_ATI_get();
  public static readonly int GL_DRAW_BUFFER8_ATI = libtischPINVOKE.GL_DRAW_BUFFER8_ATI_get();
  public static readonly int GL_DRAW_BUFFER9_ATI = libtischPINVOKE.GL_DRAW_BUFFER9_ATI_get();
  public static readonly int GL_DRAW_BUFFER10_ATI = libtischPINVOKE.GL_DRAW_BUFFER10_ATI_get();
  public static readonly int GL_DRAW_BUFFER11_ATI = libtischPINVOKE.GL_DRAW_BUFFER11_ATI_get();
  public static readonly int GL_DRAW_BUFFER12_ATI = libtischPINVOKE.GL_DRAW_BUFFER12_ATI_get();
  public static readonly int GL_DRAW_BUFFER13_ATI = libtischPINVOKE.GL_DRAW_BUFFER13_ATI_get();
  public static readonly int GL_DRAW_BUFFER14_ATI = libtischPINVOKE.GL_DRAW_BUFFER14_ATI_get();
  public static readonly int GL_DRAW_BUFFER15_ATI = libtischPINVOKE.GL_DRAW_BUFFER15_ATI_get();
  public static readonly int GL_TYPE_RGBA_FLOAT_ATI = libtischPINVOKE.GL_TYPE_RGBA_FLOAT_ATI_get();
  public static readonly int GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI = libtischPINVOKE.GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI_get();
  public static readonly int GL_MODULATE_ADD_ATI = libtischPINVOKE.GL_MODULATE_ADD_ATI_get();
  public static readonly int GL_MODULATE_SIGNED_ADD_ATI = libtischPINVOKE.GL_MODULATE_SIGNED_ADD_ATI_get();
  public static readonly int GL_MODULATE_SUBTRACT_ATI = libtischPINVOKE.GL_MODULATE_SUBTRACT_ATI_get();
  public static readonly int GL_RGBA_FLOAT32_ATI = libtischPINVOKE.GL_RGBA_FLOAT32_ATI_get();
  public static readonly int GL_RGB_FLOAT32_ATI = libtischPINVOKE.GL_RGB_FLOAT32_ATI_get();
  public static readonly int GL_ALPHA_FLOAT32_ATI = libtischPINVOKE.GL_ALPHA_FLOAT32_ATI_get();
  public static readonly int GL_INTENSITY_FLOAT32_ATI = libtischPINVOKE.GL_INTENSITY_FLOAT32_ATI_get();
  public static readonly int GL_LUMINANCE_FLOAT32_ATI = libtischPINVOKE.GL_LUMINANCE_FLOAT32_ATI_get();
  public static readonly int GL_LUMINANCE_ALPHA_FLOAT32_ATI = libtischPINVOKE.GL_LUMINANCE_ALPHA_FLOAT32_ATI_get();
  public static readonly int GL_RGBA_FLOAT16_ATI = libtischPINVOKE.GL_RGBA_FLOAT16_ATI_get();
  public static readonly int GL_RGB_FLOAT16_ATI = libtischPINVOKE.GL_RGB_FLOAT16_ATI_get();
  public static readonly int GL_ALPHA_FLOAT16_ATI = libtischPINVOKE.GL_ALPHA_FLOAT16_ATI_get();
  public static readonly int GL_INTENSITY_FLOAT16_ATI = libtischPINVOKE.GL_INTENSITY_FLOAT16_ATI_get();
  public static readonly int GL_LUMINANCE_FLOAT16_ATI = libtischPINVOKE.GL_LUMINANCE_FLOAT16_ATI_get();
  public static readonly int GL_LUMINANCE_ALPHA_FLOAT16_ATI = libtischPINVOKE.GL_LUMINANCE_ALPHA_FLOAT16_ATI_get();
  public static readonly int GL_FLOAT_R_NV = libtischPINVOKE.GL_FLOAT_R_NV_get();
  public static readonly int GL_FLOAT_RG_NV = libtischPINVOKE.GL_FLOAT_RG_NV_get();
  public static readonly int GL_FLOAT_RGB_NV = libtischPINVOKE.GL_FLOAT_RGB_NV_get();
  public static readonly int GL_FLOAT_RGBA_NV = libtischPINVOKE.GL_FLOAT_RGBA_NV_get();
  public static readonly int GL_FLOAT_R16_NV = libtischPINVOKE.GL_FLOAT_R16_NV_get();
  public static readonly int GL_FLOAT_R32_NV = libtischPINVOKE.GL_FLOAT_R32_NV_get();
  public static readonly int GL_FLOAT_RG16_NV = libtischPINVOKE.GL_FLOAT_RG16_NV_get();
  public static readonly int GL_FLOAT_RG32_NV = libtischPINVOKE.GL_FLOAT_RG32_NV_get();
  public static readonly int GL_FLOAT_RGB16_NV = libtischPINVOKE.GL_FLOAT_RGB16_NV_get();
  public static readonly int GL_FLOAT_RGB32_NV = libtischPINVOKE.GL_FLOAT_RGB32_NV_get();
  public static readonly int GL_FLOAT_RGBA16_NV = libtischPINVOKE.GL_FLOAT_RGBA16_NV_get();
  public static readonly int GL_FLOAT_RGBA32_NV = libtischPINVOKE.GL_FLOAT_RGBA32_NV_get();
  public static readonly int GL_TEXTURE_FLOAT_COMPONENTS_NV = libtischPINVOKE.GL_TEXTURE_FLOAT_COMPONENTS_NV_get();
  public static readonly int GL_FLOAT_CLEAR_COLOR_VALUE_NV = libtischPINVOKE.GL_FLOAT_CLEAR_COLOR_VALUE_NV_get();
  public static readonly int GL_FLOAT_RGBA_MODE_NV = libtischPINVOKE.GL_FLOAT_RGBA_MODE_NV_get();
  public static readonly int GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV = libtischPINVOKE.GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV_get();
  public static readonly int GL_FRAGMENT_PROGRAM_NV = libtischPINVOKE.GL_FRAGMENT_PROGRAM_NV_get();
  public static readonly int GL_MAX_TEXTURE_COORDS_NV = libtischPINVOKE.GL_MAX_TEXTURE_COORDS_NV_get();
  public static readonly int GL_MAX_TEXTURE_IMAGE_UNITS_NV = libtischPINVOKE.GL_MAX_TEXTURE_IMAGE_UNITS_NV_get();
  public static readonly int GL_FRAGMENT_PROGRAM_BINDING_NV = libtischPINVOKE.GL_FRAGMENT_PROGRAM_BINDING_NV_get();
  public static readonly int GL_PROGRAM_ERROR_STRING_NV = libtischPINVOKE.GL_PROGRAM_ERROR_STRING_NV_get();
  public static readonly int GL_HALF_FLOAT_NV = libtischPINVOKE.GL_HALF_FLOAT_NV_get();
  public static readonly int GL_WRITE_PIXEL_DATA_RANGE_NV = libtischPINVOKE.GL_WRITE_PIXEL_DATA_RANGE_NV_get();
  public static readonly int GL_READ_PIXEL_DATA_RANGE_NV = libtischPINVOKE.GL_READ_PIXEL_DATA_RANGE_NV_get();
  public static readonly int GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV = libtischPINVOKE.GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV_get();
  public static readonly int GL_READ_PIXEL_DATA_RANGE_LENGTH_NV = libtischPINVOKE.GL_READ_PIXEL_DATA_RANGE_LENGTH_NV_get();
  public static readonly int GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV = libtischPINVOKE.GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV_get();
  public static readonly int GL_READ_PIXEL_DATA_RANGE_POINTER_NV = libtischPINVOKE.GL_READ_PIXEL_DATA_RANGE_POINTER_NV_get();
  public static readonly int GL_PRIMITIVE_RESTART_NV = libtischPINVOKE.GL_PRIMITIVE_RESTART_NV_get();
  public static readonly int GL_PRIMITIVE_RESTART_INDEX_NV = libtischPINVOKE.GL_PRIMITIVE_RESTART_INDEX_NV_get();
  public static readonly int GL_TEXTURE_UNSIGNED_REMAP_MODE_NV = libtischPINVOKE.GL_TEXTURE_UNSIGNED_REMAP_MODE_NV_get();
  public static readonly int GL_STENCIL_BACK_FUNC_ATI = libtischPINVOKE.GL_STENCIL_BACK_FUNC_ATI_get();
  public static readonly int GL_STENCIL_BACK_FAIL_ATI = libtischPINVOKE.GL_STENCIL_BACK_FAIL_ATI_get();
  public static readonly int GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI = libtischPINVOKE.GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI_get();
  public static readonly int GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI = libtischPINVOKE.GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI_get();
  public static readonly int GL_IMPLEMENTATION_COLOR_READ_TYPE_OES = libtischPINVOKE.GL_IMPLEMENTATION_COLOR_READ_TYPE_OES_get();
  public static readonly int GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES = libtischPINVOKE.GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES_get();
  public static readonly int GL_DEPTH_BOUNDS_TEST_EXT = libtischPINVOKE.GL_DEPTH_BOUNDS_TEST_EXT_get();
  public static readonly int GL_DEPTH_BOUNDS_EXT = libtischPINVOKE.GL_DEPTH_BOUNDS_EXT_get();
  public static readonly int GL_MIRROR_CLAMP_EXT = libtischPINVOKE.GL_MIRROR_CLAMP_EXT_get();
  public static readonly int GL_MIRROR_CLAMP_TO_EDGE_EXT = libtischPINVOKE.GL_MIRROR_CLAMP_TO_EDGE_EXT_get();
  public static readonly int GL_MIRROR_CLAMP_TO_BORDER_EXT = libtischPINVOKE.GL_MIRROR_CLAMP_TO_BORDER_EXT_get();
  public static readonly int GL_BLEND_EQUATION_RGB_EXT = libtischPINVOKE.GL_BLEND_EQUATION_RGB_EXT_get();
  public static readonly int GL_BLEND_EQUATION_ALPHA_EXT = libtischPINVOKE.GL_BLEND_EQUATION_ALPHA_EXT_get();
  public static readonly int GL_PACK_INVERT_MESA = libtischPINVOKE.GL_PACK_INVERT_MESA_get();
  public static readonly int GL_UNSIGNED_SHORT_8_8_MESA = libtischPINVOKE.GL_UNSIGNED_SHORT_8_8_MESA_get();
  public static readonly int GL_UNSIGNED_SHORT_8_8_REV_MESA = libtischPINVOKE.GL_UNSIGNED_SHORT_8_8_REV_MESA_get();
  public static readonly int GL_YCBCR_MESA = libtischPINVOKE.GL_YCBCR_MESA_get();
  public static readonly int GL_PIXEL_PACK_BUFFER_EXT = libtischPINVOKE.GL_PIXEL_PACK_BUFFER_EXT_get();
  public static readonly int GL_PIXEL_UNPACK_BUFFER_EXT = libtischPINVOKE.GL_PIXEL_UNPACK_BUFFER_EXT_get();
  public static readonly int GL_PIXEL_PACK_BUFFER_BINDING_EXT = libtischPINVOKE.GL_PIXEL_PACK_BUFFER_BINDING_EXT_get();
  public static readonly int GL_PIXEL_UNPACK_BUFFER_BINDING_EXT = libtischPINVOKE.GL_PIXEL_UNPACK_BUFFER_BINDING_EXT_get();
  public static readonly int GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV = libtischPINVOKE.GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV_get();
  public static readonly int GL_MAX_PROGRAM_CALL_DEPTH_NV = libtischPINVOKE.GL_MAX_PROGRAM_CALL_DEPTH_NV_get();
  public static readonly int GL_MAX_PROGRAM_IF_DEPTH_NV = libtischPINVOKE.GL_MAX_PROGRAM_IF_DEPTH_NV_get();
  public static readonly int GL_MAX_PROGRAM_LOOP_DEPTH_NV = libtischPINVOKE.GL_MAX_PROGRAM_LOOP_DEPTH_NV_get();
  public static readonly int GL_MAX_PROGRAM_LOOP_COUNT_NV = libtischPINVOKE.GL_MAX_PROGRAM_LOOP_COUNT_NV_get();
  public static readonly int GL_INVALID_FRAMEBUFFER_OPERATION_EXT = libtischPINVOKE.GL_INVALID_FRAMEBUFFER_OPERATION_EXT_get();
  public static readonly int GL_MAX_RENDERBUFFER_SIZE_EXT = libtischPINVOKE.GL_MAX_RENDERBUFFER_SIZE_EXT_get();
  public static readonly int GL_FRAMEBUFFER_BINDING_EXT = libtischPINVOKE.GL_FRAMEBUFFER_BINDING_EXT_get();
  public static readonly int GL_RENDERBUFFER_BINDING_EXT = libtischPINVOKE.GL_RENDERBUFFER_BINDING_EXT_get();
  public static readonly int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT = libtischPINVOKE.GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT_get();
  public static readonly int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT = libtischPINVOKE.GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT_get();
  public static readonly int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT = libtischPINVOKE.GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT_get();
  public static readonly int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT = libtischPINVOKE.GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT_get();
  public static readonly int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT = libtischPINVOKE.GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT_get();
  public static readonly int GL_FRAMEBUFFER_COMPLETE_EXT = libtischPINVOKE.GL_FRAMEBUFFER_COMPLETE_EXT_get();
  public static readonly int GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT = libtischPINVOKE.GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT_get();
  public static readonly int GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT = libtischPINVOKE.GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT_get();
  public static readonly int GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT = libtischPINVOKE.GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT_get();
  public static readonly int GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT = libtischPINVOKE.GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT_get();
  public static readonly int GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT = libtischPINVOKE.GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT_get();
  public static readonly int GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT = libtischPINVOKE.GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT_get();
  public static readonly int GL_FRAMEBUFFER_UNSUPPORTED_EXT = libtischPINVOKE.GL_FRAMEBUFFER_UNSUPPORTED_EXT_get();
  public static readonly int GL_MAX_COLOR_ATTACHMENTS_EXT = libtischPINVOKE.GL_MAX_COLOR_ATTACHMENTS_EXT_get();
  public static readonly int GL_COLOR_ATTACHMENT0_EXT = libtischPINVOKE.GL_COLOR_ATTACHMENT0_EXT_get();
  public static readonly int GL_COLOR_ATTACHMENT1_EXT = libtischPINVOKE.GL_COLOR_ATTACHMENT1_EXT_get();
  public static readonly int GL_COLOR_ATTACHMENT2_EXT = libtischPINVOKE.GL_COLOR_ATTACHMENT2_EXT_get();
  public static readonly int GL_COLOR_ATTACHMENT3_EXT = libtischPINVOKE.GL_COLOR_ATTACHMENT3_EXT_get();
  public static readonly int GL_COLOR_ATTACHMENT4_EXT = libtischPINVOKE.GL_COLOR_ATTACHMENT4_EXT_get();
  public static readonly int GL_COLOR_ATTACHMENT5_EXT = libtischPINVOKE.GL_COLOR_ATTACHMENT5_EXT_get();
  public static readonly int GL_COLOR_ATTACHMENT6_EXT = libtischPINVOKE.GL_COLOR_ATTACHMENT6_EXT_get();
  public static readonly int GL_COLOR_ATTACHMENT7_EXT = libtischPINVOKE.GL_COLOR_ATTACHMENT7_EXT_get();
  public static readonly int GL_COLOR_ATTACHMENT8_EXT = libtischPINVOKE.GL_COLOR_ATTACHMENT8_EXT_get();
  public static readonly int GL_COLOR_ATTACHMENT9_EXT = libtischPINVOKE.GL_COLOR_ATTACHMENT9_EXT_get();
  public static readonly int GL_COLOR_ATTACHMENT10_EXT = libtischPINVOKE.GL_COLOR_ATTACHMENT10_EXT_get();
  public static readonly int GL_COLOR_ATTACHMENT11_EXT = libtischPINVOKE.GL_COLOR_ATTACHMENT11_EXT_get();
  public static readonly int GL_COLOR_ATTACHMENT12_EXT = libtischPINVOKE.GL_COLOR_ATTACHMENT12_EXT_get();
  public static readonly int GL_COLOR_ATTACHMENT13_EXT = libtischPINVOKE.GL_COLOR_ATTACHMENT13_EXT_get();
  public static readonly int GL_COLOR_ATTACHMENT14_EXT = libtischPINVOKE.GL_COLOR_ATTACHMENT14_EXT_get();
  public static readonly int GL_COLOR_ATTACHMENT15_EXT = libtischPINVOKE.GL_COLOR_ATTACHMENT15_EXT_get();
  public static readonly int GL_DEPTH_ATTACHMENT_EXT = libtischPINVOKE.GL_DEPTH_ATTACHMENT_EXT_get();
  public static readonly int GL_STENCIL_ATTACHMENT_EXT = libtischPINVOKE.GL_STENCIL_ATTACHMENT_EXT_get();
  public static readonly int GL_FRAMEBUFFER_EXT = libtischPINVOKE.GL_FRAMEBUFFER_EXT_get();
  public static readonly int GL_RENDERBUFFER_EXT = libtischPINVOKE.GL_RENDERBUFFER_EXT_get();
  public static readonly int GL_RENDERBUFFER_WIDTH_EXT = libtischPINVOKE.GL_RENDERBUFFER_WIDTH_EXT_get();
  public static readonly int GL_RENDERBUFFER_HEIGHT_EXT = libtischPINVOKE.GL_RENDERBUFFER_HEIGHT_EXT_get();
  public static readonly int GL_RENDERBUFFER_INTERNAL_FORMAT_EXT = libtischPINVOKE.GL_RENDERBUFFER_INTERNAL_FORMAT_EXT_get();
  public static readonly int GL_STENCIL_INDEX1_EXT = libtischPINVOKE.GL_STENCIL_INDEX1_EXT_get();
  public static readonly int GL_STENCIL_INDEX4_EXT = libtischPINVOKE.GL_STENCIL_INDEX4_EXT_get();
  public static readonly int GL_STENCIL_INDEX8_EXT = libtischPINVOKE.GL_STENCIL_INDEX8_EXT_get();
  public static readonly int GL_STENCIL_INDEX16_EXT = libtischPINVOKE.GL_STENCIL_INDEX16_EXT_get();
  public static readonly int GL_RENDERBUFFER_RED_SIZE_EXT = libtischPINVOKE.GL_RENDERBUFFER_RED_SIZE_EXT_get();
  public static readonly int GL_RENDERBUFFER_GREEN_SIZE_EXT = libtischPINVOKE.GL_RENDERBUFFER_GREEN_SIZE_EXT_get();
  public static readonly int GL_RENDERBUFFER_BLUE_SIZE_EXT = libtischPINVOKE.GL_RENDERBUFFER_BLUE_SIZE_EXT_get();
  public static readonly int GL_RENDERBUFFER_ALPHA_SIZE_EXT = libtischPINVOKE.GL_RENDERBUFFER_ALPHA_SIZE_EXT_get();
  public static readonly int GL_RENDERBUFFER_DEPTH_SIZE_EXT = libtischPINVOKE.GL_RENDERBUFFER_DEPTH_SIZE_EXT_get();
  public static readonly int GL_RENDERBUFFER_STENCIL_SIZE_EXT = libtischPINVOKE.GL_RENDERBUFFER_STENCIL_SIZE_EXT_get();
  public static readonly int GL_DEPTH_STENCIL_EXT = libtischPINVOKE.GL_DEPTH_STENCIL_EXT_get();
  public static readonly int GL_UNSIGNED_INT_24_8_EXT = libtischPINVOKE.GL_UNSIGNED_INT_24_8_EXT_get();
  public static readonly int GL_DEPTH24_STENCIL8_EXT = libtischPINVOKE.GL_DEPTH24_STENCIL8_EXT_get();
  public static readonly int GL_TEXTURE_STENCIL_SIZE_EXT = libtischPINVOKE.GL_TEXTURE_STENCIL_SIZE_EXT_get();
  public static readonly int GL_STENCIL_TAG_BITS_EXT = libtischPINVOKE.GL_STENCIL_TAG_BITS_EXT_get();
  public static readonly int GL_STENCIL_CLEAR_TAG_VALUE_EXT = libtischPINVOKE.GL_STENCIL_CLEAR_TAG_VALUE_EXT_get();
  public static readonly int GL_SRGB_EXT = libtischPINVOKE.GL_SRGB_EXT_get();
  public static readonly int GL_SRGB8_EXT = libtischPINVOKE.GL_SRGB8_EXT_get();
  public static readonly int GL_SRGB_ALPHA_EXT = libtischPINVOKE.GL_SRGB_ALPHA_EXT_get();
  public static readonly int GL_SRGB8_ALPHA8_EXT = libtischPINVOKE.GL_SRGB8_ALPHA8_EXT_get();
  public static readonly int GL_SLUMINANCE_ALPHA_EXT = libtischPINVOKE.GL_SLUMINANCE_ALPHA_EXT_get();
  public static readonly int GL_SLUMINANCE8_ALPHA8_EXT = libtischPINVOKE.GL_SLUMINANCE8_ALPHA8_EXT_get();
  public static readonly int GL_SLUMINANCE_EXT = libtischPINVOKE.GL_SLUMINANCE_EXT_get();
  public static readonly int GL_SLUMINANCE8_EXT = libtischPINVOKE.GL_SLUMINANCE8_EXT_get();
  public static readonly int GL_COMPRESSED_SRGB_EXT = libtischPINVOKE.GL_COMPRESSED_SRGB_EXT_get();
  public static readonly int GL_COMPRESSED_SRGB_ALPHA_EXT = libtischPINVOKE.GL_COMPRESSED_SRGB_ALPHA_EXT_get();
  public static readonly int GL_COMPRESSED_SLUMINANCE_EXT = libtischPINVOKE.GL_COMPRESSED_SLUMINANCE_EXT_get();
  public static readonly int GL_COMPRESSED_SLUMINANCE_ALPHA_EXT = libtischPINVOKE.GL_COMPRESSED_SLUMINANCE_ALPHA_EXT_get();
  public static readonly int GL_COMPRESSED_SRGB_S3TC_DXT1_EXT = libtischPINVOKE.GL_COMPRESSED_SRGB_S3TC_DXT1_EXT_get();
  public static readonly int GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = libtischPINVOKE.GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT_get();
  public static readonly int GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = libtischPINVOKE.GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT_get();
  public static readonly int GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = libtischPINVOKE.GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT_get();
  public static readonly int GL_READ_FRAMEBUFFER_EXT = libtischPINVOKE.GL_READ_FRAMEBUFFER_EXT_get();
  public static readonly int GL_DRAW_FRAMEBUFFER_EXT = libtischPINVOKE.GL_DRAW_FRAMEBUFFER_EXT_get();
  public static readonly int GL_DRAW_FRAMEBUFFER_BINDING_EXT = libtischPINVOKE.GL_DRAW_FRAMEBUFFER_BINDING_EXT_get();
  public static readonly int GL_READ_FRAMEBUFFER_BINDING_EXT = libtischPINVOKE.GL_READ_FRAMEBUFFER_BINDING_EXT_get();
  public static readonly int GL_RENDERBUFFER_SAMPLES_EXT = libtischPINVOKE.GL_RENDERBUFFER_SAMPLES_EXT_get();
  public static readonly int GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT = libtischPINVOKE.GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT_get();
  public static readonly int GL_MAX_SAMPLES_EXT = libtischPINVOKE.GL_MAX_SAMPLES_EXT_get();
  public static readonly int GL_TEXTURE_1D_STACK_MESAX = libtischPINVOKE.GL_TEXTURE_1D_STACK_MESAX_get();
  public static readonly int GL_TEXTURE_2D_STACK_MESAX = libtischPINVOKE.GL_TEXTURE_2D_STACK_MESAX_get();
  public static readonly int GL_PROXY_TEXTURE_1D_STACK_MESAX = libtischPINVOKE.GL_PROXY_TEXTURE_1D_STACK_MESAX_get();
  public static readonly int GL_PROXY_TEXTURE_2D_STACK_MESAX = libtischPINVOKE.GL_PROXY_TEXTURE_2D_STACK_MESAX_get();
  public static readonly int GL_TEXTURE_1D_STACK_BINDING_MESAX = libtischPINVOKE.GL_TEXTURE_1D_STACK_BINDING_MESAX_get();
  public static readonly int GL_TEXTURE_2D_STACK_BINDING_MESAX = libtischPINVOKE.GL_TEXTURE_2D_STACK_BINDING_MESAX_get();
  public static readonly int GL_TIME_ELAPSED_EXT = libtischPINVOKE.GL_TIME_ELAPSED_EXT_get();
  public static readonly int GL_BUFFER_SERIALIZED_MODIFY_APPLE = libtischPINVOKE.GL_BUFFER_SERIALIZED_MODIFY_APPLE_get();
  public static readonly int GL_BUFFER_FLUSHING_UNMAP_APPLE = libtischPINVOKE.GL_BUFFER_FLUSHING_UNMAP_APPLE_get();
  public static readonly int GL_MIN_PROGRAM_TEXEL_OFFSET_NV = libtischPINVOKE.GL_MIN_PROGRAM_TEXEL_OFFSET_NV_get();
  public static readonly int GL_MAX_PROGRAM_TEXEL_OFFSET_NV = libtischPINVOKE.GL_MAX_PROGRAM_TEXEL_OFFSET_NV_get();
  public static readonly int GL_PROGRAM_ATTRIB_COMPONENTS_NV = libtischPINVOKE.GL_PROGRAM_ATTRIB_COMPONENTS_NV_get();
  public static readonly int GL_PROGRAM_RESULT_COMPONENTS_NV = libtischPINVOKE.GL_PROGRAM_RESULT_COMPONENTS_NV_get();
  public static readonly int GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV = libtischPINVOKE.GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV_get();
  public static readonly int GL_MAX_PROGRAM_RESULT_COMPONENTS_NV = libtischPINVOKE.GL_MAX_PROGRAM_RESULT_COMPONENTS_NV_get();
  public static readonly int GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV = libtischPINVOKE.GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV_get();
  public static readonly int GL_MAX_PROGRAM_GENERIC_RESULTS_NV = libtischPINVOKE.GL_MAX_PROGRAM_GENERIC_RESULTS_NV_get();
  public static readonly int GL_LINES_ADJACENCY_EXT = libtischPINVOKE.GL_LINES_ADJACENCY_EXT_get();
  public static readonly int GL_LINE_STRIP_ADJACENCY_EXT = libtischPINVOKE.GL_LINE_STRIP_ADJACENCY_EXT_get();
  public static readonly int GL_TRIANGLES_ADJACENCY_EXT = libtischPINVOKE.GL_TRIANGLES_ADJACENCY_EXT_get();
  public static readonly int GL_TRIANGLE_STRIP_ADJACENCY_EXT = libtischPINVOKE.GL_TRIANGLE_STRIP_ADJACENCY_EXT_get();
  public static readonly int GL_GEOMETRY_PROGRAM_NV = libtischPINVOKE.GL_GEOMETRY_PROGRAM_NV_get();
  public static readonly int GL_MAX_PROGRAM_OUTPUT_VERTICES_NV = libtischPINVOKE.GL_MAX_PROGRAM_OUTPUT_VERTICES_NV_get();
  public static readonly int GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV = libtischPINVOKE.GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV_get();
  public static readonly int GL_GEOMETRY_VERTICES_OUT_EXT = libtischPINVOKE.GL_GEOMETRY_VERTICES_OUT_EXT_get();
  public static readonly int GL_GEOMETRY_INPUT_TYPE_EXT = libtischPINVOKE.GL_GEOMETRY_INPUT_TYPE_EXT_get();
  public static readonly int GL_GEOMETRY_OUTPUT_TYPE_EXT = libtischPINVOKE.GL_GEOMETRY_OUTPUT_TYPE_EXT_get();
  public static readonly int GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT = libtischPINVOKE.GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT_get();
  public static readonly int GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT = libtischPINVOKE.GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT_get();
  public static readonly int GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT = libtischPINVOKE.GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT_get();
  public static readonly int GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT = libtischPINVOKE.GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT_get();
  public static readonly int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT = libtischPINVOKE.GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT_get();
  public static readonly int GL_PROGRAM_POINT_SIZE_EXT = libtischPINVOKE.GL_PROGRAM_POINT_SIZE_EXT_get();
  public static readonly int GL_GEOMETRY_SHADER_EXT = libtischPINVOKE.GL_GEOMETRY_SHADER_EXT_get();
  public static readonly int GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT = libtischPINVOKE.GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT_get();
  public static readonly int GL_MAX_VERTEX_VARYING_COMPONENTS_EXT = libtischPINVOKE.GL_MAX_VERTEX_VARYING_COMPONENTS_EXT_get();
  public static readonly int GL_MAX_VARYING_COMPONENTS_EXT = libtischPINVOKE.GL_MAX_VARYING_COMPONENTS_EXT_get();
  public static readonly int GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT = libtischPINVOKE.GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT_get();
  public static readonly int GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT = libtischPINVOKE.GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT_get();
  public static readonly int GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT = libtischPINVOKE.GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT_get();
  public static readonly int GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV = libtischPINVOKE.GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV_get();
  public static readonly int GL_SAMPLER_1D_ARRAY_EXT = libtischPINVOKE.GL_SAMPLER_1D_ARRAY_EXT_get();
  public static readonly int GL_SAMPLER_2D_ARRAY_EXT = libtischPINVOKE.GL_SAMPLER_2D_ARRAY_EXT_get();
  public static readonly int GL_SAMPLER_BUFFER_EXT = libtischPINVOKE.GL_SAMPLER_BUFFER_EXT_get();
  public static readonly int GL_SAMPLER_1D_ARRAY_SHADOW_EXT = libtischPINVOKE.GL_SAMPLER_1D_ARRAY_SHADOW_EXT_get();
  public static readonly int GL_SAMPLER_2D_ARRAY_SHADOW_EXT = libtischPINVOKE.GL_SAMPLER_2D_ARRAY_SHADOW_EXT_get();
  public static readonly int GL_SAMPLER_CUBE_SHADOW_EXT = libtischPINVOKE.GL_SAMPLER_CUBE_SHADOW_EXT_get();
  public static readonly int GL_UNSIGNED_INT_VEC2_EXT = libtischPINVOKE.GL_UNSIGNED_INT_VEC2_EXT_get();
  public static readonly int GL_UNSIGNED_INT_VEC3_EXT = libtischPINVOKE.GL_UNSIGNED_INT_VEC3_EXT_get();
  public static readonly int GL_UNSIGNED_INT_VEC4_EXT = libtischPINVOKE.GL_UNSIGNED_INT_VEC4_EXT_get();
  public static readonly int GL_INT_SAMPLER_1D_EXT = libtischPINVOKE.GL_INT_SAMPLER_1D_EXT_get();
  public static readonly int GL_INT_SAMPLER_2D_EXT = libtischPINVOKE.GL_INT_SAMPLER_2D_EXT_get();
  public static readonly int GL_INT_SAMPLER_3D_EXT = libtischPINVOKE.GL_INT_SAMPLER_3D_EXT_get();
  public static readonly int GL_INT_SAMPLER_CUBE_EXT = libtischPINVOKE.GL_INT_SAMPLER_CUBE_EXT_get();
  public static readonly int GL_INT_SAMPLER_2D_RECT_EXT = libtischPINVOKE.GL_INT_SAMPLER_2D_RECT_EXT_get();
  public static readonly int GL_INT_SAMPLER_1D_ARRAY_EXT = libtischPINVOKE.GL_INT_SAMPLER_1D_ARRAY_EXT_get();
  public static readonly int GL_INT_SAMPLER_2D_ARRAY_EXT = libtischPINVOKE.GL_INT_SAMPLER_2D_ARRAY_EXT_get();
  public static readonly int GL_INT_SAMPLER_BUFFER_EXT = libtischPINVOKE.GL_INT_SAMPLER_BUFFER_EXT_get();
  public static readonly int GL_UNSIGNED_INT_SAMPLER_1D_EXT = libtischPINVOKE.GL_UNSIGNED_INT_SAMPLER_1D_EXT_get();
  public static readonly int GL_UNSIGNED_INT_SAMPLER_2D_EXT = libtischPINVOKE.GL_UNSIGNED_INT_SAMPLER_2D_EXT_get();
  public static readonly int GL_UNSIGNED_INT_SAMPLER_3D_EXT = libtischPINVOKE.GL_UNSIGNED_INT_SAMPLER_3D_EXT_get();
  public static readonly int GL_UNSIGNED_INT_SAMPLER_CUBE_EXT = libtischPINVOKE.GL_UNSIGNED_INT_SAMPLER_CUBE_EXT_get();
  public static readonly int GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT = libtischPINVOKE.GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT_get();
  public static readonly int GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT = libtischPINVOKE.GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT_get();
  public static readonly int GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT = libtischPINVOKE.GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT_get();
  public static readonly int GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT = libtischPINVOKE.GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT_get();
  public static readonly int GL_R11F_G11F_B10F_EXT = libtischPINVOKE.GL_R11F_G11F_B10F_EXT_get();
  public static readonly int GL_UNSIGNED_INT_10F_11F_11F_REV_EXT = libtischPINVOKE.GL_UNSIGNED_INT_10F_11F_11F_REV_EXT_get();
  public static readonly int GL_RGBA_SIGNED_COMPONENTS_EXT = libtischPINVOKE.GL_RGBA_SIGNED_COMPONENTS_EXT_get();
  public static readonly int GL_TEXTURE_1D_ARRAY_EXT = libtischPINVOKE.GL_TEXTURE_1D_ARRAY_EXT_get();
  public static readonly int GL_PROXY_TEXTURE_1D_ARRAY_EXT = libtischPINVOKE.GL_PROXY_TEXTURE_1D_ARRAY_EXT_get();
  public static readonly int GL_TEXTURE_2D_ARRAY_EXT = libtischPINVOKE.GL_TEXTURE_2D_ARRAY_EXT_get();
  public static readonly int GL_PROXY_TEXTURE_2D_ARRAY_EXT = libtischPINVOKE.GL_PROXY_TEXTURE_2D_ARRAY_EXT_get();
  public static readonly int GL_TEXTURE_BINDING_1D_ARRAY_EXT = libtischPINVOKE.GL_TEXTURE_BINDING_1D_ARRAY_EXT_get();
  public static readonly int GL_TEXTURE_BINDING_2D_ARRAY_EXT = libtischPINVOKE.GL_TEXTURE_BINDING_2D_ARRAY_EXT_get();
  public static readonly int GL_MAX_ARRAY_TEXTURE_LAYERS_EXT = libtischPINVOKE.GL_MAX_ARRAY_TEXTURE_LAYERS_EXT_get();
  public static readonly int GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT = libtischPINVOKE.GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT_get();
  public static readonly int GL_TEXTURE_BUFFER_EXT = libtischPINVOKE.GL_TEXTURE_BUFFER_EXT_get();
  public static readonly int GL_MAX_TEXTURE_BUFFER_SIZE_EXT = libtischPINVOKE.GL_MAX_TEXTURE_BUFFER_SIZE_EXT_get();
  public static readonly int GL_TEXTURE_BINDING_BUFFER_EXT = libtischPINVOKE.GL_TEXTURE_BINDING_BUFFER_EXT_get();
  public static readonly int GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT = libtischPINVOKE.GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT_get();
  public static readonly int GL_TEXTURE_BUFFER_FORMAT_EXT = libtischPINVOKE.GL_TEXTURE_BUFFER_FORMAT_EXT_get();
  public static readonly int GL_COMPRESSED_LUMINANCE_LATC1_EXT = libtischPINVOKE.GL_COMPRESSED_LUMINANCE_LATC1_EXT_get();
  public static readonly int GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT = libtischPINVOKE.GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT_get();
  public static readonly int GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT = libtischPINVOKE.GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT_get();
  public static readonly int GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT = libtischPINVOKE.GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT_get();
  public static readonly int GL_COMPRESSED_RED_RGTC1_EXT = libtischPINVOKE.GL_COMPRESSED_RED_RGTC1_EXT_get();
  public static readonly int GL_COMPRESSED_SIGNED_RED_RGTC1_EXT = libtischPINVOKE.GL_COMPRESSED_SIGNED_RED_RGTC1_EXT_get();
  public static readonly int GL_COMPRESSED_RED_GREEN_RGTC2_EXT = libtischPINVOKE.GL_COMPRESSED_RED_GREEN_RGTC2_EXT_get();
  public static readonly int GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT = libtischPINVOKE.GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT_get();
  public static readonly int GL_RGB9_E5_EXT = libtischPINVOKE.GL_RGB9_E5_EXT_get();
  public static readonly int GL_UNSIGNED_INT_5_9_9_9_REV_EXT = libtischPINVOKE.GL_UNSIGNED_INT_5_9_9_9_REV_EXT_get();
  public static readonly int GL_TEXTURE_SHARED_SIZE_EXT = libtischPINVOKE.GL_TEXTURE_SHARED_SIZE_EXT_get();
  public static readonly int GL_DEPTH_COMPONENT32F_NV = libtischPINVOKE.GL_DEPTH_COMPONENT32F_NV_get();
  public static readonly int GL_DEPTH32F_STENCIL8_NV = libtischPINVOKE.GL_DEPTH32F_STENCIL8_NV_get();
  public static readonly int GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV = libtischPINVOKE.GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV_get();
  public static readonly int GL_DEPTH_BUFFER_FLOAT_MODE_NV = libtischPINVOKE.GL_DEPTH_BUFFER_FLOAT_MODE_NV_get();
  public static readonly int GL_RENDERBUFFER_COVERAGE_SAMPLES_NV = libtischPINVOKE.GL_RENDERBUFFER_COVERAGE_SAMPLES_NV_get();
  public static readonly int GL_RENDERBUFFER_COLOR_SAMPLES_NV = libtischPINVOKE.GL_RENDERBUFFER_COLOR_SAMPLES_NV_get();
  public static readonly int GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV = libtischPINVOKE.GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV_get();
  public static readonly int GL_MULTISAMPLE_COVERAGE_MODES_NV = libtischPINVOKE.GL_MULTISAMPLE_COVERAGE_MODES_NV_get();
  public static readonly int GL_FRAMEBUFFER_SRGB_EXT = libtischPINVOKE.GL_FRAMEBUFFER_SRGB_EXT_get();
  public static readonly int GL_FRAMEBUFFER_SRGB_CAPABLE_EXT = libtischPINVOKE.GL_FRAMEBUFFER_SRGB_CAPABLE_EXT_get();
  public static readonly int GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV = libtischPINVOKE.GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV_get();
  public static readonly int GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV = libtischPINVOKE.GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV_get();
  public static readonly int GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV = libtischPINVOKE.GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV_get();
  public static readonly int GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV = libtischPINVOKE.GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV_get();
  public static readonly int GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV = libtischPINVOKE.GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV_get();
  public static readonly int GL_BACK_PRIMARY_COLOR_NV = libtischPINVOKE.GL_BACK_PRIMARY_COLOR_NV_get();
  public static readonly int GL_BACK_SECONDARY_COLOR_NV = libtischPINVOKE.GL_BACK_SECONDARY_COLOR_NV_get();
  public static readonly int GL_TEXTURE_COORD_NV = libtischPINVOKE.GL_TEXTURE_COORD_NV_get();
  public static readonly int GL_CLIP_DISTANCE_NV = libtischPINVOKE.GL_CLIP_DISTANCE_NV_get();
  public static readonly int GL_VERTEX_ID_NV = libtischPINVOKE.GL_VERTEX_ID_NV_get();
  public static readonly int GL_PRIMITIVE_ID_NV = libtischPINVOKE.GL_PRIMITIVE_ID_NV_get();
  public static readonly int GL_GENERIC_ATTRIB_NV = libtischPINVOKE.GL_GENERIC_ATTRIB_NV_get();
  public static readonly int GL_TRANSFORM_FEEDBACK_ATTRIBS_NV = libtischPINVOKE.GL_TRANSFORM_FEEDBACK_ATTRIBS_NV_get();
  public static readonly int GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV = libtischPINVOKE.GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV_get();
  public static readonly int GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV = libtischPINVOKE.GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV_get();
  public static readonly int GL_ACTIVE_VARYINGS_NV = libtischPINVOKE.GL_ACTIVE_VARYINGS_NV_get();
  public static readonly int GL_ACTIVE_VARYING_MAX_LENGTH_NV = libtischPINVOKE.GL_ACTIVE_VARYING_MAX_LENGTH_NV_get();
  public static readonly int GL_TRANSFORM_FEEDBACK_VARYINGS_NV = libtischPINVOKE.GL_TRANSFORM_FEEDBACK_VARYINGS_NV_get();
  public static readonly int GL_TRANSFORM_FEEDBACK_BUFFER_START_NV = libtischPINVOKE.GL_TRANSFORM_FEEDBACK_BUFFER_START_NV_get();
  public static readonly int GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV = libtischPINVOKE.GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV_get();
  public static readonly int GL_TRANSFORM_FEEDBACK_RECORD_NV = libtischPINVOKE.GL_TRANSFORM_FEEDBACK_RECORD_NV_get();
  public static readonly int GL_PRIMITIVES_GENERATED_NV = libtischPINVOKE.GL_PRIMITIVES_GENERATED_NV_get();
  public static readonly int GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV = libtischPINVOKE.GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV_get();
  public static readonly int GL_RASTERIZER_DISCARD_NV = libtischPINVOKE.GL_RASTERIZER_DISCARD_NV_get();
  public static readonly int GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_ATTRIBS_NV = libtischPINVOKE.GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_ATTRIBS_NV_get();
  public static readonly int GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV = libtischPINVOKE.GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV_get();
  public static readonly int GL_INTERLEAVED_ATTRIBS_NV = libtischPINVOKE.GL_INTERLEAVED_ATTRIBS_NV_get();
  public static readonly int GL_SEPARATE_ATTRIBS_NV = libtischPINVOKE.GL_SEPARATE_ATTRIBS_NV_get();
  public static readonly int GL_TRANSFORM_FEEDBACK_BUFFER_NV = libtischPINVOKE.GL_TRANSFORM_FEEDBACK_BUFFER_NV_get();
  public static readonly int GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV = libtischPINVOKE.GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV_get();
  public static readonly int GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT = libtischPINVOKE.GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT_get();
  public static readonly int GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT = libtischPINVOKE.GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT_get();
  public static readonly int GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT = libtischPINVOKE.GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT_get();
  public static readonly int GL_MAX_BINDABLE_UNIFORM_SIZE_EXT = libtischPINVOKE.GL_MAX_BINDABLE_UNIFORM_SIZE_EXT_get();
  public static readonly int GL_UNIFORM_BUFFER_EXT = libtischPINVOKE.GL_UNIFORM_BUFFER_EXT_get();
  public static readonly int GL_UNIFORM_BUFFER_BINDING_EXT = libtischPINVOKE.GL_UNIFORM_BUFFER_BINDING_EXT_get();
  public static readonly int GL_RGBA32UI_EXT = libtischPINVOKE.GL_RGBA32UI_EXT_get();
  public static readonly int GL_RGB32UI_EXT = libtischPINVOKE.GL_RGB32UI_EXT_get();
  public static readonly int GL_ALPHA32UI_EXT = libtischPINVOKE.GL_ALPHA32UI_EXT_get();
  public static readonly int GL_INTENSITY32UI_EXT = libtischPINVOKE.GL_INTENSITY32UI_EXT_get();
  public static readonly int GL_LUMINANCE32UI_EXT = libtischPINVOKE.GL_LUMINANCE32UI_EXT_get();
  public static readonly int GL_LUMINANCE_ALPHA32UI_EXT = libtischPINVOKE.GL_LUMINANCE_ALPHA32UI_EXT_get();
  public static readonly int GL_RGBA16UI_EXT = libtischPINVOKE.GL_RGBA16UI_EXT_get();
  public static readonly int GL_RGB16UI_EXT = libtischPINVOKE.GL_RGB16UI_EXT_get();
  public static readonly int GL_ALPHA16UI_EXT = libtischPINVOKE.GL_ALPHA16UI_EXT_get();
  public static readonly int GL_INTENSITY16UI_EXT = libtischPINVOKE.GL_INTENSITY16UI_EXT_get();
  public static readonly int GL_LUMINANCE16UI_EXT = libtischPINVOKE.GL_LUMINANCE16UI_EXT_get();
  public static readonly int GL_LUMINANCE_ALPHA16UI_EXT = libtischPINVOKE.GL_LUMINANCE_ALPHA16UI_EXT_get();
  public static readonly int GL_RGBA8UI_EXT = libtischPINVOKE.GL_RGBA8UI_EXT_get();
  public static readonly int GL_RGB8UI_EXT = libtischPINVOKE.GL_RGB8UI_EXT_get();
  public static readonly int GL_ALPHA8UI_EXT = libtischPINVOKE.GL_ALPHA8UI_EXT_get();
  public static readonly int GL_INTENSITY8UI_EXT = libtischPINVOKE.GL_INTENSITY8UI_EXT_get();
  public static readonly int GL_LUMINANCE8UI_EXT = libtischPINVOKE.GL_LUMINANCE8UI_EXT_get();
  public static readonly int GL_LUMINANCE_ALPHA8UI_EXT = libtischPINVOKE.GL_LUMINANCE_ALPHA8UI_EXT_get();
  public static readonly int GL_RGBA32I_EXT = libtischPINVOKE.GL_RGBA32I_EXT_get();
  public static readonly int GL_RGB32I_EXT = libtischPINVOKE.GL_RGB32I_EXT_get();
  public static readonly int GL_ALPHA32I_EXT = libtischPINVOKE.GL_ALPHA32I_EXT_get();
  public static readonly int GL_INTENSITY32I_EXT = libtischPINVOKE.GL_INTENSITY32I_EXT_get();
  public static readonly int GL_LUMINANCE32I_EXT = libtischPINVOKE.GL_LUMINANCE32I_EXT_get();
  public static readonly int GL_LUMINANCE_ALPHA32I_EXT = libtischPINVOKE.GL_LUMINANCE_ALPHA32I_EXT_get();
  public static readonly int GL_RGBA16I_EXT = libtischPINVOKE.GL_RGBA16I_EXT_get();
  public static readonly int GL_RGB16I_EXT = libtischPINVOKE.GL_RGB16I_EXT_get();
  public static readonly int GL_ALPHA16I_EXT = libtischPINVOKE.GL_ALPHA16I_EXT_get();
  public static readonly int GL_INTENSITY16I_EXT = libtischPINVOKE.GL_INTENSITY16I_EXT_get();
  public static readonly int GL_LUMINANCE16I_EXT = libtischPINVOKE.GL_LUMINANCE16I_EXT_get();
  public static readonly int GL_LUMINANCE_ALPHA16I_EXT = libtischPINVOKE.GL_LUMINANCE_ALPHA16I_EXT_get();
  public static readonly int GL_RGBA8I_EXT = libtischPINVOKE.GL_RGBA8I_EXT_get();
  public static readonly int GL_RGB8I_EXT = libtischPINVOKE.GL_RGB8I_EXT_get();
  public static readonly int GL_ALPHA8I_EXT = libtischPINVOKE.GL_ALPHA8I_EXT_get();
  public static readonly int GL_INTENSITY8I_EXT = libtischPINVOKE.GL_INTENSITY8I_EXT_get();
  public static readonly int GL_LUMINANCE8I_EXT = libtischPINVOKE.GL_LUMINANCE8I_EXT_get();
  public static readonly int GL_LUMINANCE_ALPHA8I_EXT = libtischPINVOKE.GL_LUMINANCE_ALPHA8I_EXT_get();
  public static readonly int GL_RED_INTEGER_EXT = libtischPINVOKE.GL_RED_INTEGER_EXT_get();
  public static readonly int GL_GREEN_INTEGER_EXT = libtischPINVOKE.GL_GREEN_INTEGER_EXT_get();
  public static readonly int GL_BLUE_INTEGER_EXT = libtischPINVOKE.GL_BLUE_INTEGER_EXT_get();
  public static readonly int GL_ALPHA_INTEGER_EXT = libtischPINVOKE.GL_ALPHA_INTEGER_EXT_get();
  public static readonly int GL_RGB_INTEGER_EXT = libtischPINVOKE.GL_RGB_INTEGER_EXT_get();
  public static readonly int GL_RGBA_INTEGER_EXT = libtischPINVOKE.GL_RGBA_INTEGER_EXT_get();
  public static readonly int GL_BGR_INTEGER_EXT = libtischPINVOKE.GL_BGR_INTEGER_EXT_get();
  public static readonly int GL_BGRA_INTEGER_EXT = libtischPINVOKE.GL_BGRA_INTEGER_EXT_get();
  public static readonly int GL_LUMINANCE_INTEGER_EXT = libtischPINVOKE.GL_LUMINANCE_INTEGER_EXT_get();
  public static readonly int GL_LUMINANCE_ALPHA_INTEGER_EXT = libtischPINVOKE.GL_LUMINANCE_ALPHA_INTEGER_EXT_get();
  public static readonly int GL_RGBA_INTEGER_MODE_EXT = libtischPINVOKE.GL_RGBA_INTEGER_MODE_EXT_get();
  public static readonly int GL_QUERY_WAIT_NV = libtischPINVOKE.GL_QUERY_WAIT_NV_get();
  public static readonly int GL_QUERY_NO_WAIT_NV = libtischPINVOKE.GL_QUERY_NO_WAIT_NV_get();
  public static readonly int GL_QUERY_BY_REGION_WAIT_NV = libtischPINVOKE.GL_QUERY_BY_REGION_WAIT_NV_get();
  public static readonly int GL_QUERY_BY_REGION_NO_WAIT_NV = libtischPINVOKE.GL_QUERY_BY_REGION_NO_WAIT_NV_get();
  public static readonly int GL_FRAME_NV = libtischPINVOKE.GL_FRAME_NV_get();
  public static readonly int GL_FIELDS_NV = libtischPINVOKE.GL_FIELDS_NV_get();
  public static readonly int GL_CURRENT_TIME_NV = libtischPINVOKE.GL_CURRENT_TIME_NV_get();
  public static readonly int GL_NUM_FILL_STREAMS_NV = libtischPINVOKE.GL_NUM_FILL_STREAMS_NV_get();
  public static readonly int GL_PRESENT_TIME_NV = libtischPINVOKE.GL_PRESENT_TIME_NV_get();
  public static readonly int GL_PRESENT_DURATION_NV = libtischPINVOKE.GL_PRESENT_DURATION_NV_get();
  public static readonly int GL_TRANSFORM_FEEDBACK_BUFFER_EXT = libtischPINVOKE.GL_TRANSFORM_FEEDBACK_BUFFER_EXT_get();
  public static readonly int GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT = libtischPINVOKE.GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT_get();
  public static readonly int GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT = libtischPINVOKE.GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT_get();
  public static readonly int GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT = libtischPINVOKE.GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT_get();
  public static readonly int GL_INTERLEAVED_ATTRIBS_EXT = libtischPINVOKE.GL_INTERLEAVED_ATTRIBS_EXT_get();
  public static readonly int GL_SEPARATE_ATTRIBS_EXT = libtischPINVOKE.GL_SEPARATE_ATTRIBS_EXT_get();
  public static readonly int GL_PRIMITIVES_GENERATED_EXT = libtischPINVOKE.GL_PRIMITIVES_GENERATED_EXT_get();
  public static readonly int GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT = libtischPINVOKE.GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT_get();
  public static readonly int GL_RASTERIZER_DISCARD_EXT = libtischPINVOKE.GL_RASTERIZER_DISCARD_EXT_get();
  public static readonly int GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT = libtischPINVOKE.GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT_get();
  public static readonly int GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT = libtischPINVOKE.GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT_get();
  public static readonly int GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT = libtischPINVOKE.GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT_get();
  public static readonly int GL_TRANSFORM_FEEDBACK_VARYINGS_EXT = libtischPINVOKE.GL_TRANSFORM_FEEDBACK_VARYINGS_EXT_get();
  public static readonly int GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT = libtischPINVOKE.GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT_get();
  public static readonly int GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT = libtischPINVOKE.GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT_get();
  public static readonly int GL_PROGRAM_MATRIX_EXT = libtischPINVOKE.GL_PROGRAM_MATRIX_EXT_get();
  public static readonly int GL_TRANSPOSE_PROGRAM_MATRIX_EXT = libtischPINVOKE.GL_TRANSPOSE_PROGRAM_MATRIX_EXT_get();
  public static readonly int GL_PROGRAM_MATRIX_STACK_DEPTH_EXT = libtischPINVOKE.GL_PROGRAM_MATRIX_STACK_DEPTH_EXT_get();
  public static readonly int GL_TEXTURE_SWIZZLE_R_EXT = libtischPINVOKE.GL_TEXTURE_SWIZZLE_R_EXT_get();
  public static readonly int GL_TEXTURE_SWIZZLE_G_EXT = libtischPINVOKE.GL_TEXTURE_SWIZZLE_G_EXT_get();
  public static readonly int GL_TEXTURE_SWIZZLE_B_EXT = libtischPINVOKE.GL_TEXTURE_SWIZZLE_B_EXT_get();
  public static readonly int GL_TEXTURE_SWIZZLE_A_EXT = libtischPINVOKE.GL_TEXTURE_SWIZZLE_A_EXT_get();
  public static readonly int GL_TEXTURE_SWIZZLE_RGBA_EXT = libtischPINVOKE.GL_TEXTURE_SWIZZLE_RGBA_EXT_get();
  public static readonly int GL_SAMPLE_POSITION_NV = libtischPINVOKE.GL_SAMPLE_POSITION_NV_get();
  public static readonly int GL_SAMPLE_MASK_NV = libtischPINVOKE.GL_SAMPLE_MASK_NV_get();
  public static readonly int GL_SAMPLE_MASK_VALUE_NV = libtischPINVOKE.GL_SAMPLE_MASK_VALUE_NV_get();
  public static readonly int GL_TEXTURE_BINDING_RENDERBUFFER_NV = libtischPINVOKE.GL_TEXTURE_BINDING_RENDERBUFFER_NV_get();
  public static readonly int GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV = libtischPINVOKE.GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV_get();
  public static readonly int GL_TEXTURE_RENDERBUFFER_NV = libtischPINVOKE.GL_TEXTURE_RENDERBUFFER_NV_get();
  public static readonly int GL_SAMPLER_RENDERBUFFER_NV = libtischPINVOKE.GL_SAMPLER_RENDERBUFFER_NV_get();
  public static readonly int GL_INT_SAMPLER_RENDERBUFFER_NV = libtischPINVOKE.GL_INT_SAMPLER_RENDERBUFFER_NV_get();
  public static readonly int GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV = libtischPINVOKE.GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV_get();
  public static readonly int GL_MAX_SAMPLE_MASK_WORDS_NV = libtischPINVOKE.GL_MAX_SAMPLE_MASK_WORDS_NV_get();
  public static readonly int GL_TRANSFORM_FEEDBACK_NV = libtischPINVOKE.GL_TRANSFORM_FEEDBACK_NV_get();
  public static readonly int GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV = libtischPINVOKE.GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV_get();
  public static readonly int GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV = libtischPINVOKE.GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV_get();
  public static readonly int GL_TRANSFORM_FEEDBACK_BINDING_NV = libtischPINVOKE.GL_TRANSFORM_FEEDBACK_BINDING_NV_get();
  public static readonly int GL_VBO_FREE_MEMORY_ATI = libtischPINVOKE.GL_VBO_FREE_MEMORY_ATI_get();
  public static readonly int GL_TEXTURE_FREE_MEMORY_ATI = libtischPINVOKE.GL_TEXTURE_FREE_MEMORY_ATI_get();
  public static readonly int GL_RENDERBUFFER_FREE_MEMORY_ATI = libtischPINVOKE.GL_RENDERBUFFER_FREE_MEMORY_ATI_get();
  public static readonly int GL_COUNTER_TYPE_AMD = libtischPINVOKE.GL_COUNTER_TYPE_AMD_get();
  public static readonly int GL_COUNTER_RANGE_AMD = libtischPINVOKE.GL_COUNTER_RANGE_AMD_get();
  public static readonly int GL_UNSIGNED_INT64_AMD = libtischPINVOKE.GL_UNSIGNED_INT64_AMD_get();
  public static readonly int GL_PERCENTAGE_AMD = libtischPINVOKE.GL_PERCENTAGE_AMD_get();
  public static readonly int GL_PERFMON_RESULT_AVAILABLE_AMD = libtischPINVOKE.GL_PERFMON_RESULT_AVAILABLE_AMD_get();
  public static readonly int GL_PERFMON_RESULT_SIZE_AMD = libtischPINVOKE.GL_PERFMON_RESULT_SIZE_AMD_get();
  public static readonly int GL_PERFMON_RESULT_AMD = libtischPINVOKE.GL_PERFMON_RESULT_AMD_get();
  public static readonly int GL_SAMPLER_BUFFER_AMD = libtischPINVOKE.GL_SAMPLER_BUFFER_AMD_get();
  public static readonly int GL_INT_SAMPLER_BUFFER_AMD = libtischPINVOKE.GL_INT_SAMPLER_BUFFER_AMD_get();
  public static readonly int GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD = libtischPINVOKE.GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD_get();
  public static readonly int GL_TESSELLATION_MODE_AMD = libtischPINVOKE.GL_TESSELLATION_MODE_AMD_get();
  public static readonly int GL_TESSELLATION_FACTOR_AMD = libtischPINVOKE.GL_TESSELLATION_FACTOR_AMD_get();
  public static readonly int GL_DISCRETE_AMD = libtischPINVOKE.GL_DISCRETE_AMD_get();
  public static readonly int GL_CONTINUOUS_AMD = libtischPINVOKE.GL_CONTINUOUS_AMD_get();
  public static readonly int GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT = libtischPINVOKE.GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT_get();
  public static readonly int GL_FIRST_VERTEX_CONVENTION_EXT = libtischPINVOKE.GL_FIRST_VERTEX_CONVENTION_EXT_get();
  public static readonly int GL_LAST_VERTEX_CONVENTION_EXT = libtischPINVOKE.GL_LAST_VERTEX_CONVENTION_EXT_get();
  public static readonly int GL_PROVOKING_VERTEX_EXT = libtischPINVOKE.GL_PROVOKING_VERTEX_EXT_get();
  public static readonly int GL_ALPHA_SNORM = libtischPINVOKE.GL_ALPHA_SNORM_get();
  public static readonly int GL_LUMINANCE_SNORM = libtischPINVOKE.GL_LUMINANCE_SNORM_get();
  public static readonly int GL_LUMINANCE_ALPHA_SNORM = libtischPINVOKE.GL_LUMINANCE_ALPHA_SNORM_get();
  public static readonly int GL_INTENSITY_SNORM = libtischPINVOKE.GL_INTENSITY_SNORM_get();
  public static readonly int GL_ALPHA8_SNORM = libtischPINVOKE.GL_ALPHA8_SNORM_get();
  public static readonly int GL_LUMINANCE8_SNORM = libtischPINVOKE.GL_LUMINANCE8_SNORM_get();
  public static readonly int GL_LUMINANCE8_ALPHA8_SNORM = libtischPINVOKE.GL_LUMINANCE8_ALPHA8_SNORM_get();
  public static readonly int GL_INTENSITY8_SNORM = libtischPINVOKE.GL_INTENSITY8_SNORM_get();
  public static readonly int GL_ALPHA16_SNORM = libtischPINVOKE.GL_ALPHA16_SNORM_get();
  public static readonly int GL_LUMINANCE16_SNORM = libtischPINVOKE.GL_LUMINANCE16_SNORM_get();
  public static readonly int GL_LUMINANCE16_ALPHA16_SNORM = libtischPINVOKE.GL_LUMINANCE16_ALPHA16_SNORM_get();
  public static readonly int GL_INTENSITY16_SNORM = libtischPINVOKE.GL_INTENSITY16_SNORM_get();
  public static readonly int GL_TEXTURE_RANGE_LENGTH_APPLE = libtischPINVOKE.GL_TEXTURE_RANGE_LENGTH_APPLE_get();
  public static readonly int GL_TEXTURE_RANGE_POINTER_APPLE = libtischPINVOKE.GL_TEXTURE_RANGE_POINTER_APPLE_get();
  public static readonly int GL_TEXTURE_STORAGE_HINT_APPLE = libtischPINVOKE.GL_TEXTURE_STORAGE_HINT_APPLE_get();
  public static readonly int GL_STORAGE_PRIVATE_APPLE = libtischPINVOKE.GL_STORAGE_PRIVATE_APPLE_get();
  public static readonly int GL_HALF_APPLE = libtischPINVOKE.GL_HALF_APPLE_get();
  public static readonly int GL_RGBA_FLOAT32_APPLE = libtischPINVOKE.GL_RGBA_FLOAT32_APPLE_get();
  public static readonly int GL_RGB_FLOAT32_APPLE = libtischPINVOKE.GL_RGB_FLOAT32_APPLE_get();
  public static readonly int GL_ALPHA_FLOAT32_APPLE = libtischPINVOKE.GL_ALPHA_FLOAT32_APPLE_get();
  public static readonly int GL_INTENSITY_FLOAT32_APPLE = libtischPINVOKE.GL_INTENSITY_FLOAT32_APPLE_get();
  public static readonly int GL_LUMINANCE_FLOAT32_APPLE = libtischPINVOKE.GL_LUMINANCE_FLOAT32_APPLE_get();
  public static readonly int GL_LUMINANCE_ALPHA_FLOAT32_APPLE = libtischPINVOKE.GL_LUMINANCE_ALPHA_FLOAT32_APPLE_get();
  public static readonly int GL_RGBA_FLOAT16_APPLE = libtischPINVOKE.GL_RGBA_FLOAT16_APPLE_get();
  public static readonly int GL_RGB_FLOAT16_APPLE = libtischPINVOKE.GL_RGB_FLOAT16_APPLE_get();
  public static readonly int GL_ALPHA_FLOAT16_APPLE = libtischPINVOKE.GL_ALPHA_FLOAT16_APPLE_get();
  public static readonly int GL_INTENSITY_FLOAT16_APPLE = libtischPINVOKE.GL_INTENSITY_FLOAT16_APPLE_get();
  public static readonly int GL_LUMINANCE_FLOAT16_APPLE = libtischPINVOKE.GL_LUMINANCE_FLOAT16_APPLE_get();
  public static readonly int GL_LUMINANCE_ALPHA_FLOAT16_APPLE = libtischPINVOKE.GL_LUMINANCE_ALPHA_FLOAT16_APPLE_get();
  public static readonly int GL_COLOR_FLOAT_APPLE = libtischPINVOKE.GL_COLOR_FLOAT_APPLE_get();
  public static readonly int GL_VERTEX_ATTRIB_MAP1_APPLE = libtischPINVOKE.GL_VERTEX_ATTRIB_MAP1_APPLE_get();
  public static readonly int GL_VERTEX_ATTRIB_MAP2_APPLE = libtischPINVOKE.GL_VERTEX_ATTRIB_MAP2_APPLE_get();
  public static readonly int GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE = libtischPINVOKE.GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE_get();
  public static readonly int GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE = libtischPINVOKE.GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE_get();
  public static readonly int GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE = libtischPINVOKE.GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE_get();
  public static readonly int GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE = libtischPINVOKE.GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE_get();
  public static readonly int GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE = libtischPINVOKE.GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE_get();
  public static readonly int GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE = libtischPINVOKE.GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE_get();
  public static readonly int GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE = libtischPINVOKE.GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE_get();
  public static readonly int GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE = libtischPINVOKE.GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE_get();
  public static readonly int GL_AUX_DEPTH_STENCIL_APPLE = libtischPINVOKE.GL_AUX_DEPTH_STENCIL_APPLE_get();
  public static readonly int GL_BUFFER_OBJECT_APPLE = libtischPINVOKE.GL_BUFFER_OBJECT_APPLE_get();
  public static readonly int GL_RELEASED_APPLE = libtischPINVOKE.GL_RELEASED_APPLE_get();
  public static readonly int GL_VOLATILE_APPLE = libtischPINVOKE.GL_VOLATILE_APPLE_get();
  public static readonly int GL_RETAINED_APPLE = libtischPINVOKE.GL_RETAINED_APPLE_get();
  public static readonly int GL_UNDEFINED_APPLE = libtischPINVOKE.GL_UNDEFINED_APPLE_get();
  public static readonly int GL_PURGEABLE_APPLE = libtischPINVOKE.GL_PURGEABLE_APPLE_get();
  public static readonly int GL_PACK_ROW_BYTES_APPLE = libtischPINVOKE.GL_PACK_ROW_BYTES_APPLE_get();
  public static readonly int GL_UNPACK_ROW_BYTES_APPLE = libtischPINVOKE.GL_UNPACK_ROW_BYTES_APPLE_get();
  public static readonly int GL_RGB_422_APPLE = libtischPINVOKE.GL_RGB_422_APPLE_get();
  public static readonly int GL_VIDEO_BUFFER_NV = libtischPINVOKE.GL_VIDEO_BUFFER_NV_get();
  public static readonly int GL_VIDEO_BUFFER_BINDING_NV = libtischPINVOKE.GL_VIDEO_BUFFER_BINDING_NV_get();
  public static readonly int GL_FIELD_UPPER_NV = libtischPINVOKE.GL_FIELD_UPPER_NV_get();
  public static readonly int GL_FIELD_LOWER_NV = libtischPINVOKE.GL_FIELD_LOWER_NV_get();
  public static readonly int GL_NUM_VIDEO_CAPTURE_STREAMS_NV = libtischPINVOKE.GL_NUM_VIDEO_CAPTURE_STREAMS_NV_get();
  public static readonly int GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV = libtischPINVOKE.GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV_get();
  public static readonly int GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV = libtischPINVOKE.GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV_get();
  public static readonly int GL_LAST_VIDEO_CAPTURE_STATUS_NV = libtischPINVOKE.GL_LAST_VIDEO_CAPTURE_STATUS_NV_get();
  public static readonly int GL_VIDEO_BUFFER_PITCH_NV = libtischPINVOKE.GL_VIDEO_BUFFER_PITCH_NV_get();
  public static readonly int GL_VIDEO_COLOR_CONVERSION_MATRIX_NV = libtischPINVOKE.GL_VIDEO_COLOR_CONVERSION_MATRIX_NV_get();
  public static readonly int GL_VIDEO_COLOR_CONVERSION_MAX_NV = libtischPINVOKE.GL_VIDEO_COLOR_CONVERSION_MAX_NV_get();
  public static readonly int GL_VIDEO_COLOR_CONVERSION_MIN_NV = libtischPINVOKE.GL_VIDEO_COLOR_CONVERSION_MIN_NV_get();
  public static readonly int GL_VIDEO_COLOR_CONVERSION_OFFSET_NV = libtischPINVOKE.GL_VIDEO_COLOR_CONVERSION_OFFSET_NV_get();
  public static readonly int GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV = libtischPINVOKE.GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV_get();
  public static readonly int GL_PARTIAL_SUCCESS_NV = libtischPINVOKE.GL_PARTIAL_SUCCESS_NV_get();
  public static readonly int GL_SUCCESS_NV = libtischPINVOKE.GL_SUCCESS_NV_get();
  public static readonly int GL_FAILURE_NV = libtischPINVOKE.GL_FAILURE_NV_get();
  public static readonly int GL_YCBYCR8_422_NV = libtischPINVOKE.GL_YCBYCR8_422_NV_get();
  public static readonly int GL_YCBAYCR8A_4224_NV = libtischPINVOKE.GL_YCBAYCR8A_4224_NV_get();
  public static readonly int GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV = libtischPINVOKE.GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV_get();
  public static readonly int GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV = libtischPINVOKE.GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV_get();
  public static readonly int GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV = libtischPINVOKE.GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV_get();
  public static readonly int GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV = libtischPINVOKE.GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV_get();
  public static readonly int GL_Z4Y12Z4CB12Z4CR12_444_NV = libtischPINVOKE.GL_Z4Y12Z4CB12Z4CR12_444_NV_get();
  public static readonly int GL_VIDEO_CAPTURE_FRAME_WIDTH_NV = libtischPINVOKE.GL_VIDEO_CAPTURE_FRAME_WIDTH_NV_get();
  public static readonly int GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV = libtischPINVOKE.GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV_get();
  public static readonly int GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV = libtischPINVOKE.GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV_get();
  public static readonly int GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV = libtischPINVOKE.GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV_get();
  public static readonly int GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV = libtischPINVOKE.GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV_get();
  public static readonly int GL_ACTIVE_PROGRAM_EXT = libtischPINVOKE.GL_ACTIVE_PROGRAM_EXT_get();
  public static readonly int GL_BUFFER_GPU_ADDRESS_NV = libtischPINVOKE.GL_BUFFER_GPU_ADDRESS_NV_get();
  public static readonly int GL_GPU_ADDRESS_NV = libtischPINVOKE.GL_GPU_ADDRESS_NV_get();
  public static readonly int GL_MAX_SHADER_BUFFER_ADDRESS_NV = libtischPINVOKE.GL_MAX_SHADER_BUFFER_ADDRESS_NV_get();
  public static readonly int GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV = libtischPINVOKE.GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV_get();
  public static readonly int GL_ELEMENT_ARRAY_UNIFIED_NV = libtischPINVOKE.GL_ELEMENT_ARRAY_UNIFIED_NV_get();
  public static readonly int GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV = libtischPINVOKE.GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV_get();
  public static readonly int GL_VERTEX_ARRAY_ADDRESS_NV = libtischPINVOKE.GL_VERTEX_ARRAY_ADDRESS_NV_get();
  public static readonly int GL_NORMAL_ARRAY_ADDRESS_NV = libtischPINVOKE.GL_NORMAL_ARRAY_ADDRESS_NV_get();
  public static readonly int GL_COLOR_ARRAY_ADDRESS_NV = libtischPINVOKE.GL_COLOR_ARRAY_ADDRESS_NV_get();
  public static readonly int GL_INDEX_ARRAY_ADDRESS_NV = libtischPINVOKE.GL_INDEX_ARRAY_ADDRESS_NV_get();
  public static readonly int GL_TEXTURE_COORD_ARRAY_ADDRESS_NV = libtischPINVOKE.GL_TEXTURE_COORD_ARRAY_ADDRESS_NV_get();
  public static readonly int GL_EDGE_FLAG_ARRAY_ADDRESS_NV = libtischPINVOKE.GL_EDGE_FLAG_ARRAY_ADDRESS_NV_get();
  public static readonly int GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV = libtischPINVOKE.GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV_get();
  public static readonly int GL_FOG_COORD_ARRAY_ADDRESS_NV = libtischPINVOKE.GL_FOG_COORD_ARRAY_ADDRESS_NV_get();
  public static readonly int GL_ELEMENT_ARRAY_ADDRESS_NV = libtischPINVOKE.GL_ELEMENT_ARRAY_ADDRESS_NV_get();
  public static readonly int GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV = libtischPINVOKE.GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV_get();
  public static readonly int GL_VERTEX_ARRAY_LENGTH_NV = libtischPINVOKE.GL_VERTEX_ARRAY_LENGTH_NV_get();
  public static readonly int GL_NORMAL_ARRAY_LENGTH_NV = libtischPINVOKE.GL_NORMAL_ARRAY_LENGTH_NV_get();
  public static readonly int GL_COLOR_ARRAY_LENGTH_NV = libtischPINVOKE.GL_COLOR_ARRAY_LENGTH_NV_get();
  public static readonly int GL_INDEX_ARRAY_LENGTH_NV = libtischPINVOKE.GL_INDEX_ARRAY_LENGTH_NV_get();
  public static readonly int GL_TEXTURE_COORD_ARRAY_LENGTH_NV = libtischPINVOKE.GL_TEXTURE_COORD_ARRAY_LENGTH_NV_get();
  public static readonly int GL_EDGE_FLAG_ARRAY_LENGTH_NV = libtischPINVOKE.GL_EDGE_FLAG_ARRAY_LENGTH_NV_get();
  public static readonly int GL_SECONDARY_COLOR_ARRAY_LENGTH_NV = libtischPINVOKE.GL_SECONDARY_COLOR_ARRAY_LENGTH_NV_get();
  public static readonly int GL_FOG_COORD_ARRAY_LENGTH_NV = libtischPINVOKE.GL_FOG_COORD_ARRAY_LENGTH_NV_get();
  public static readonly int GL_ELEMENT_ARRAY_LENGTH_NV = libtischPINVOKE.GL_ELEMENT_ARRAY_LENGTH_NV_get();
  public static readonly int GL_VERSION_1_2 = libtischPINVOKE.GL_VERSION_1_2_get();
  public static readonly int GL_VERSION_1_2_DEPRECATED = libtischPINVOKE.GL_VERSION_1_2_DEPRECATED_get();
  public static readonly int GL_VERSION_1_3 = libtischPINVOKE.GL_VERSION_1_3_get();
  public static readonly int GL_VERSION_1_3_DEPRECATED = libtischPINVOKE.GL_VERSION_1_3_DEPRECATED_get();
  public static readonly int GL_VERSION_1_4 = libtischPINVOKE.GL_VERSION_1_4_get();
  public static readonly int GL_VERSION_1_4_DEPRECATED = libtischPINVOKE.GL_VERSION_1_4_DEPRECATED_get();
  public static readonly int GL_VERSION_1_5 = libtischPINVOKE.GL_VERSION_1_5_get();
  public static readonly int GL_VERSION_2_0 = libtischPINVOKE.GL_VERSION_2_0_get();
  public static readonly int GL_VERSION_2_1 = libtischPINVOKE.GL_VERSION_2_1_get();
  public static readonly int GL_VERSION_3_0 = libtischPINVOKE.GL_VERSION_3_0_get();
  public static readonly int GL_VERSION_3_1 = libtischPINVOKE.GL_VERSION_3_1_get();
  public static readonly int GL_VERSION_3_2 = libtischPINVOKE.GL_VERSION_3_2_get();
  public static readonly int GL_ARB_multitexture = libtischPINVOKE.GL_ARB_multitexture_get();
  public static readonly int GL_ARB_transpose_matrix = libtischPINVOKE.GL_ARB_transpose_matrix_get();
  public static readonly int GL_ARB_multisample = libtischPINVOKE.GL_ARB_multisample_get();
  public static readonly int GL_ARB_texture_env_add = libtischPINVOKE.GL_ARB_texture_env_add_get();
  public static readonly int GL_ARB_texture_cube_map = libtischPINVOKE.GL_ARB_texture_cube_map_get();
  public static readonly int GL_ARB_texture_compression = libtischPINVOKE.GL_ARB_texture_compression_get();
  public static readonly int GL_ARB_texture_border_clamp = libtischPINVOKE.GL_ARB_texture_border_clamp_get();
  public static readonly int GL_ARB_point_parameters = libtischPINVOKE.GL_ARB_point_parameters_get();
  public static readonly int GL_ARB_vertex_blend = libtischPINVOKE.GL_ARB_vertex_blend_get();
  public static readonly int GL_ARB_matrix_palette = libtischPINVOKE.GL_ARB_matrix_palette_get();
  public static readonly int GL_ARB_texture_env_combine = libtischPINVOKE.GL_ARB_texture_env_combine_get();
  public static readonly int GL_ARB_texture_env_crossbar = libtischPINVOKE.GL_ARB_texture_env_crossbar_get();
  public static readonly int GL_ARB_texture_env_dot3 = libtischPINVOKE.GL_ARB_texture_env_dot3_get();
  public static readonly int GL_ARB_texture_mirrored_repeat = libtischPINVOKE.GL_ARB_texture_mirrored_repeat_get();
  public static readonly int GL_ARB_depth_texture = libtischPINVOKE.GL_ARB_depth_texture_get();
  public static readonly int GL_ARB_shadow = libtischPINVOKE.GL_ARB_shadow_get();
  public static readonly int GL_ARB_shadow_ambient = libtischPINVOKE.GL_ARB_shadow_ambient_get();
  public static readonly int GL_ARB_window_pos = libtischPINVOKE.GL_ARB_window_pos_get();
  public static readonly int GL_ARB_vertex_program = libtischPINVOKE.GL_ARB_vertex_program_get();
  public static readonly int GL_ARB_fragment_program = libtischPINVOKE.GL_ARB_fragment_program_get();
  public static readonly int GL_ARB_vertex_buffer_object = libtischPINVOKE.GL_ARB_vertex_buffer_object_get();
  public static readonly int GL_ARB_occlusion_query = libtischPINVOKE.GL_ARB_occlusion_query_get();
  public static readonly int GL_ARB_shader_objects = libtischPINVOKE.GL_ARB_shader_objects_get();
  public static readonly int GL_ARB_vertex_shader = libtischPINVOKE.GL_ARB_vertex_shader_get();
  public static readonly int GL_ARB_fragment_shader = libtischPINVOKE.GL_ARB_fragment_shader_get();
  public static readonly int GL_ARB_shading_language_100 = libtischPINVOKE.GL_ARB_shading_language_100_get();
  public static readonly int GL_ARB_texture_non_power_of_two = libtischPINVOKE.GL_ARB_texture_non_power_of_two_get();
  public static readonly int GL_ARB_point_sprite = libtischPINVOKE.GL_ARB_point_sprite_get();
  public static readonly int GL_ARB_fragment_program_shadow = libtischPINVOKE.GL_ARB_fragment_program_shadow_get();
  public static readonly int GL_ARB_draw_buffers = libtischPINVOKE.GL_ARB_draw_buffers_get();
  public static readonly int GL_ARB_texture_rectangle = libtischPINVOKE.GL_ARB_texture_rectangle_get();
  public static readonly int GL_ARB_color_buffer_float = libtischPINVOKE.GL_ARB_color_buffer_float_get();
  public static readonly int GL_ARB_half_float_pixel = libtischPINVOKE.GL_ARB_half_float_pixel_get();
  public static readonly int GL_ARB_texture_float = libtischPINVOKE.GL_ARB_texture_float_get();
  public static readonly int GL_ARB_pixel_buffer_object = libtischPINVOKE.GL_ARB_pixel_buffer_object_get();
  public static readonly int GL_ARB_depth_buffer_float = libtischPINVOKE.GL_ARB_depth_buffer_float_get();
  public static readonly int GL_ARB_draw_instanced = libtischPINVOKE.GL_ARB_draw_instanced_get();
  public static readonly int GL_ARB_framebuffer_object = libtischPINVOKE.GL_ARB_framebuffer_object_get();
  public static readonly int GL_ARB_framebuffer_sRGB = libtischPINVOKE.GL_ARB_framebuffer_sRGB_get();
  public static readonly int GL_ARB_geometry_shader4 = libtischPINVOKE.GL_ARB_geometry_shader4_get();
  public static readonly int GL_ARB_half_float_vertex = libtischPINVOKE.GL_ARB_half_float_vertex_get();
  public static readonly int GL_ARB_instanced_arrays = libtischPINVOKE.GL_ARB_instanced_arrays_get();
  public static readonly int GL_ARB_map_buffer_range = libtischPINVOKE.GL_ARB_map_buffer_range_get();
  public static readonly int GL_ARB_texture_buffer_object = libtischPINVOKE.GL_ARB_texture_buffer_object_get();
  public static readonly int GL_ARB_texture_compression_rgtc = libtischPINVOKE.GL_ARB_texture_compression_rgtc_get();
  public static readonly int GL_ARB_texture_rg = libtischPINVOKE.GL_ARB_texture_rg_get();
  public static readonly int GL_ARB_vertex_array_object = libtischPINVOKE.GL_ARB_vertex_array_object_get();
  public static readonly int GL_ARB_uniform_buffer_object = libtischPINVOKE.GL_ARB_uniform_buffer_object_get();
  public static readonly int GL_ARB_compatibility = libtischPINVOKE.GL_ARB_compatibility_get();
  public static readonly int GL_ARB_copy_buffer = libtischPINVOKE.GL_ARB_copy_buffer_get();
  public static readonly int GL_ARB_shader_texture_lod = libtischPINVOKE.GL_ARB_shader_texture_lod_get();
  public static readonly int GL_ARB_depth_clamp = libtischPINVOKE.GL_ARB_depth_clamp_get();
  public static readonly int GL_ARB_draw_elements_base_vertex = libtischPINVOKE.GL_ARB_draw_elements_base_vertex_get();
  public static readonly int GL_ARB_fragment_coord_conventions = libtischPINVOKE.GL_ARB_fragment_coord_conventions_get();
  public static readonly int GL_ARB_provoking_vertex = libtischPINVOKE.GL_ARB_provoking_vertex_get();
  public static readonly int GL_ARB_seamless_cube_map = libtischPINVOKE.GL_ARB_seamless_cube_map_get();
  public static readonly int GL_ARB_sync = libtischPINVOKE.GL_ARB_sync_get();
  public static readonly int GL_ARB_texture_multisample = libtischPINVOKE.GL_ARB_texture_multisample_get();
  public static readonly int GL_ARB_vertex_array_bgra = libtischPINVOKE.GL_ARB_vertex_array_bgra_get();
  public static readonly int GL_ARB_draw_buffers_blend = libtischPINVOKE.GL_ARB_draw_buffers_blend_get();
  public static readonly int GL_ARB_sample_shading = libtischPINVOKE.GL_ARB_sample_shading_get();
  public static readonly int GL_ARB_texture_cube_map_array = libtischPINVOKE.GL_ARB_texture_cube_map_array_get();
  public static readonly int GL_ARB_texture_gather = libtischPINVOKE.GL_ARB_texture_gather_get();
  public static readonly int GL_ARB_texture_query_lod = libtischPINVOKE.GL_ARB_texture_query_lod_get();
  public static readonly int GL_EXT_abgr = libtischPINVOKE.GL_EXT_abgr_get();
  public static readonly int GL_EXT_blend_color = libtischPINVOKE.GL_EXT_blend_color_get();
  public static readonly int GL_EXT_polygon_offset = libtischPINVOKE.GL_EXT_polygon_offset_get();
  public static readonly int GL_EXT_texture = libtischPINVOKE.GL_EXT_texture_get();
  public static readonly int GL_EXT_texture3D = libtischPINVOKE.GL_EXT_texture3D_get();
  public static readonly int GL_SGIS_texture_filter4 = libtischPINVOKE.GL_SGIS_texture_filter4_get();
  public static readonly int GL_EXT_subtexture = libtischPINVOKE.GL_EXT_subtexture_get();
  public static readonly int GL_EXT_copy_texture = libtischPINVOKE.GL_EXT_copy_texture_get();
  public static readonly int GL_EXT_histogram = libtischPINVOKE.GL_EXT_histogram_get();
  public static readonly int GL_EXT_convolution = libtischPINVOKE.GL_EXT_convolution_get();
  public static readonly int GL_SGI_color_matrix = libtischPINVOKE.GL_SGI_color_matrix_get();
  public static readonly int GL_SGI_color_table = libtischPINVOKE.GL_SGI_color_table_get();
  public static readonly int GL_SGIX_pixel_texture = libtischPINVOKE.GL_SGIX_pixel_texture_get();
  public static readonly int GL_SGIS_pixel_texture = libtischPINVOKE.GL_SGIS_pixel_texture_get();
  public static readonly int GL_SGIS_texture4D = libtischPINVOKE.GL_SGIS_texture4D_get();
  public static readonly int GL_SGI_texture_color_table = libtischPINVOKE.GL_SGI_texture_color_table_get();
  public static readonly int GL_EXT_cmyka = libtischPINVOKE.GL_EXT_cmyka_get();
  public static readonly int GL_EXT_texture_object = libtischPINVOKE.GL_EXT_texture_object_get();
  public static readonly int GL_SGIS_detail_texture = libtischPINVOKE.GL_SGIS_detail_texture_get();
  public static readonly int GL_SGIS_sharpen_texture = libtischPINVOKE.GL_SGIS_sharpen_texture_get();
  public static readonly int GL_EXT_packed_pixels = libtischPINVOKE.GL_EXT_packed_pixels_get();
  public static readonly int GL_SGIS_texture_lod = libtischPINVOKE.GL_SGIS_texture_lod_get();
  public static readonly int GL_SGIS_multisample = libtischPINVOKE.GL_SGIS_multisample_get();
  public static readonly int GL_EXT_rescale_normal = libtischPINVOKE.GL_EXT_rescale_normal_get();
  public static readonly int GL_EXT_vertex_array = libtischPINVOKE.GL_EXT_vertex_array_get();
  public static readonly int GL_EXT_misc_attribute = libtischPINVOKE.GL_EXT_misc_attribute_get();
  public static readonly int GL_SGIS_generate_mipmap = libtischPINVOKE.GL_SGIS_generate_mipmap_get();
  public static readonly int GL_SGIX_clipmap = libtischPINVOKE.GL_SGIX_clipmap_get();
  public static readonly int GL_SGIX_shadow = libtischPINVOKE.GL_SGIX_shadow_get();
  public static readonly int GL_SGIS_texture_edge_clamp = libtischPINVOKE.GL_SGIS_texture_edge_clamp_get();
  public static readonly int GL_SGIS_texture_border_clamp = libtischPINVOKE.GL_SGIS_texture_border_clamp_get();
  public static readonly int GL_EXT_blend_minmax = libtischPINVOKE.GL_EXT_blend_minmax_get();
  public static readonly int GL_EXT_blend_subtract = libtischPINVOKE.GL_EXT_blend_subtract_get();
  public static readonly int GL_EXT_blend_logic_op = libtischPINVOKE.GL_EXT_blend_logic_op_get();
  public static readonly int GL_SGIX_interlace = libtischPINVOKE.GL_SGIX_interlace_get();
  public static readonly int GL_SGIX_pixel_tiles = libtischPINVOKE.GL_SGIX_pixel_tiles_get();
  public static readonly int GL_SGIX_texture_select = libtischPINVOKE.GL_SGIX_texture_select_get();
  public static readonly int GL_SGIX_sprite = libtischPINVOKE.GL_SGIX_sprite_get();
  public static readonly int GL_SGIX_texture_multi_buffer = libtischPINVOKE.GL_SGIX_texture_multi_buffer_get();
  public static readonly int GL_EXT_point_parameters = libtischPINVOKE.GL_EXT_point_parameters_get();
  public static readonly int GL_SGIS_point_parameters = libtischPINVOKE.GL_SGIS_point_parameters_get();
  public static readonly int GL_SGIX_instruments = libtischPINVOKE.GL_SGIX_instruments_get();
  public static readonly int GL_SGIX_texture_scale_bias = libtischPINVOKE.GL_SGIX_texture_scale_bias_get();
  public static readonly int GL_SGIX_framezoom = libtischPINVOKE.GL_SGIX_framezoom_get();
  public static readonly int GL_SGIX_tag_sample_buffer = libtischPINVOKE.GL_SGIX_tag_sample_buffer_get();
  public static readonly int GL_SGIX_polynomial_ffd = libtischPINVOKE.GL_SGIX_polynomial_ffd_get();
  public static readonly int GL_SGIX_reference_plane = libtischPINVOKE.GL_SGIX_reference_plane_get();
  public static readonly int GL_SGIX_flush_raster = libtischPINVOKE.GL_SGIX_flush_raster_get();
  public static readonly int GL_SGIX_depth_texture = libtischPINVOKE.GL_SGIX_depth_texture_get();
  public static readonly int GL_SGIS_fog_function = libtischPINVOKE.GL_SGIS_fog_function_get();
  public static readonly int GL_SGIX_fog_offset = libtischPINVOKE.GL_SGIX_fog_offset_get();
  public static readonly int GL_HP_image_transform = libtischPINVOKE.GL_HP_image_transform_get();
  public static readonly int GL_HP_convolution_border_modes = libtischPINVOKE.GL_HP_convolution_border_modes_get();
  public static readonly int GL_SGIX_texture_add_env = libtischPINVOKE.GL_SGIX_texture_add_env_get();
  public static readonly int GL_EXT_color_subtable = libtischPINVOKE.GL_EXT_color_subtable_get();
  public static readonly int GL_PGI_vertex_hints = libtischPINVOKE.GL_PGI_vertex_hints_get();
  public static readonly int GL_PGI_misc_hints = libtischPINVOKE.GL_PGI_misc_hints_get();
  public static readonly int GL_EXT_paletted_texture = libtischPINVOKE.GL_EXT_paletted_texture_get();
  public static readonly int GL_EXT_clip_volume_hint = libtischPINVOKE.GL_EXT_clip_volume_hint_get();
  public static readonly int GL_SGIX_list_priority = libtischPINVOKE.GL_SGIX_list_priority_get();
  public static readonly int GL_SGIX_ir_instrument1 = libtischPINVOKE.GL_SGIX_ir_instrument1_get();
  public static readonly int GL_SGIX_calligraphic_fragment = libtischPINVOKE.GL_SGIX_calligraphic_fragment_get();
  public static readonly int GL_SGIX_texture_lod_bias = libtischPINVOKE.GL_SGIX_texture_lod_bias_get();
  public static readonly int GL_SGIX_shadow_ambient = libtischPINVOKE.GL_SGIX_shadow_ambient_get();
  public static readonly int GL_EXT_index_texture = libtischPINVOKE.GL_EXT_index_texture_get();
  public static readonly int GL_EXT_index_material = libtischPINVOKE.GL_EXT_index_material_get();
  public static readonly int GL_EXT_index_func = libtischPINVOKE.GL_EXT_index_func_get();
  public static readonly int GL_EXT_index_array_formats = libtischPINVOKE.GL_EXT_index_array_formats_get();
  public static readonly int GL_EXT_compiled_vertex_array = libtischPINVOKE.GL_EXT_compiled_vertex_array_get();
  public static readonly int GL_EXT_cull_vertex = libtischPINVOKE.GL_EXT_cull_vertex_get();
  public static readonly int GL_SGIX_ycrcb = libtischPINVOKE.GL_SGIX_ycrcb_get();
  public static readonly int GL_SGIX_fragment_lighting = libtischPINVOKE.GL_SGIX_fragment_lighting_get();
  public static readonly int GL_IBM_rasterpos_clip = libtischPINVOKE.GL_IBM_rasterpos_clip_get();
  public static readonly int GL_HP_texture_lighting = libtischPINVOKE.GL_HP_texture_lighting_get();
  public static readonly int GL_EXT_draw_range_elements = libtischPINVOKE.GL_EXT_draw_range_elements_get();
  public static readonly int GL_WIN_phong_shading = libtischPINVOKE.GL_WIN_phong_shading_get();
  public static readonly int GL_WIN_specular_fog = libtischPINVOKE.GL_WIN_specular_fog_get();
  public static readonly int GL_EXT_light_texture = libtischPINVOKE.GL_EXT_light_texture_get();
  public static readonly int GL_SGIX_blend_alpha_minmax = libtischPINVOKE.GL_SGIX_blend_alpha_minmax_get();
  public static readonly int GL_EXT_bgra = libtischPINVOKE.GL_EXT_bgra_get();
  public static readonly int GL_SGIX_async = libtischPINVOKE.GL_SGIX_async_get();
  public static readonly int GL_SGIX_async_pixel = libtischPINVOKE.GL_SGIX_async_pixel_get();
  public static readonly int GL_SGIX_async_histogram = libtischPINVOKE.GL_SGIX_async_histogram_get();
  public static readonly int GL_INTEL_parallel_arrays = libtischPINVOKE.GL_INTEL_parallel_arrays_get();
  public static readonly int GL_HP_occlusion_test = libtischPINVOKE.GL_HP_occlusion_test_get();
  public static readonly int GL_EXT_pixel_transform = libtischPINVOKE.GL_EXT_pixel_transform_get();
  public static readonly int GL_EXT_pixel_transform_color_table = libtischPINVOKE.GL_EXT_pixel_transform_color_table_get();
  public static readonly int GL_EXT_shared_texture_palette = libtischPINVOKE.GL_EXT_shared_texture_palette_get();
  public static readonly int GL_EXT_separate_specular_color = libtischPINVOKE.GL_EXT_separate_specular_color_get();
  public static readonly int GL_EXT_secondary_color = libtischPINVOKE.GL_EXT_secondary_color_get();
  public static readonly int GL_EXT_texture_perturb_normal = libtischPINVOKE.GL_EXT_texture_perturb_normal_get();
  public static readonly int GL_EXT_multi_draw_arrays = libtischPINVOKE.GL_EXT_multi_draw_arrays_get();
  public static readonly int GL_EXT_fog_coord = libtischPINVOKE.GL_EXT_fog_coord_get();
  public static readonly int GL_REND_screen_coordinates = libtischPINVOKE.GL_REND_screen_coordinates_get();
  public static readonly int GL_EXT_coordinate_frame = libtischPINVOKE.GL_EXT_coordinate_frame_get();
  public static readonly int GL_EXT_texture_env_combine = libtischPINVOKE.GL_EXT_texture_env_combine_get();
  public static readonly int GL_APPLE_specular_vector = libtischPINVOKE.GL_APPLE_specular_vector_get();
  public static readonly int GL_APPLE_transform_hint = libtischPINVOKE.GL_APPLE_transform_hint_get();
  public static readonly int GL_SGIX_fog_scale = libtischPINVOKE.GL_SGIX_fog_scale_get();
  public static readonly int GL_SUNX_constant_data = libtischPINVOKE.GL_SUNX_constant_data_get();
  public static readonly int GL_SUN_global_alpha = libtischPINVOKE.GL_SUN_global_alpha_get();
  public static readonly int GL_SUN_triangle_list = libtischPINVOKE.GL_SUN_triangle_list_get();
  public static readonly int GL_SUN_vertex = libtischPINVOKE.GL_SUN_vertex_get();
  public static readonly int GL_EXT_blend_func_separate = libtischPINVOKE.GL_EXT_blend_func_separate_get();
  public static readonly int GL_INGR_blend_func_separate = libtischPINVOKE.GL_INGR_blend_func_separate_get();
  public static readonly int GL_INGR_color_clamp = libtischPINVOKE.GL_INGR_color_clamp_get();
  public static readonly int GL_INGR_interlace_read = libtischPINVOKE.GL_INGR_interlace_read_get();
  public static readonly int GL_EXT_stencil_wrap = libtischPINVOKE.GL_EXT_stencil_wrap_get();
  public static readonly int GL_EXT_422_pixels = libtischPINVOKE.GL_EXT_422_pixels_get();
  public static readonly int GL_NV_texgen_reflection = libtischPINVOKE.GL_NV_texgen_reflection_get();
  public static readonly int GL_SUN_convolution_border_modes = libtischPINVOKE.GL_SUN_convolution_border_modes_get();
  public static readonly int GL_EXT_texture_env_add = libtischPINVOKE.GL_EXT_texture_env_add_get();
  public static readonly int GL_EXT_texture_lod_bias = libtischPINVOKE.GL_EXT_texture_lod_bias_get();
  public static readonly int GL_EXT_texture_filter_anisotropic = libtischPINVOKE.GL_EXT_texture_filter_anisotropic_get();
  public static readonly int GL_EXT_vertex_weighting = libtischPINVOKE.GL_EXT_vertex_weighting_get();
  public static readonly int GL_NV_light_max_exponent = libtischPINVOKE.GL_NV_light_max_exponent_get();
  public static readonly int GL_NV_vertex_array_range = libtischPINVOKE.GL_NV_vertex_array_range_get();
  public static readonly int GL_NV_register_combiners = libtischPINVOKE.GL_NV_register_combiners_get();
  public static readonly int GL_NV_fog_distance = libtischPINVOKE.GL_NV_fog_distance_get();
  public static readonly int GL_NV_texgen_emboss = libtischPINVOKE.GL_NV_texgen_emboss_get();
  public static readonly int GL_NV_blend_square = libtischPINVOKE.GL_NV_blend_square_get();
  public static readonly int GL_NV_texture_env_combine4 = libtischPINVOKE.GL_NV_texture_env_combine4_get();
  public static readonly int GL_MESA_resize_buffers = libtischPINVOKE.GL_MESA_resize_buffers_get();
  public static readonly int GL_MESA_window_pos = libtischPINVOKE.GL_MESA_window_pos_get();
  public static readonly int GL_IBM_cull_vertex = libtischPINVOKE.GL_IBM_cull_vertex_get();
  public static readonly int GL_IBM_multimode_draw_arrays = libtischPINVOKE.GL_IBM_multimode_draw_arrays_get();
  public static readonly int GL_IBM_vertex_array_lists = libtischPINVOKE.GL_IBM_vertex_array_lists_get();
  public static readonly int GL_SGIX_subsample = libtischPINVOKE.GL_SGIX_subsample_get();
  public static readonly int GL_SGIX_ycrcba = libtischPINVOKE.GL_SGIX_ycrcba_get();
  public static readonly int GL_SGIX_ycrcb_subsample = libtischPINVOKE.GL_SGIX_ycrcb_subsample_get();
  public static readonly int GL_SGIX_depth_pass_instrument = libtischPINVOKE.GL_SGIX_depth_pass_instrument_get();
  public static readonly int GL_3DFX_texture_compression_FXT1 = libtischPINVOKE.GL_3DFX_texture_compression_FXT1_get();
  public static readonly int GL_3DFX_multisample = libtischPINVOKE.GL_3DFX_multisample_get();
  public static readonly int GL_3DFX_tbuffer = libtischPINVOKE.GL_3DFX_tbuffer_get();
  public static readonly int GL_EXT_multisample = libtischPINVOKE.GL_EXT_multisample_get();
  public static readonly int GL_SGIX_vertex_preclip = libtischPINVOKE.GL_SGIX_vertex_preclip_get();
  public static readonly int GL_SGIX_convolution_accuracy = libtischPINVOKE.GL_SGIX_convolution_accuracy_get();
  public static readonly int GL_SGIX_resample = libtischPINVOKE.GL_SGIX_resample_get();
  public static readonly int GL_SGIS_point_line_texgen = libtischPINVOKE.GL_SGIS_point_line_texgen_get();
  public static readonly int GL_SGIS_texture_color_mask = libtischPINVOKE.GL_SGIS_texture_color_mask_get();
  public static readonly int GL_SGIX_igloo_interface = libtischPINVOKE.GL_SGIX_igloo_interface_get();
  public static readonly int GL_EXT_texture_env_dot3 = libtischPINVOKE.GL_EXT_texture_env_dot3_get();
  public static readonly int GL_ATI_texture_mirror_once = libtischPINVOKE.GL_ATI_texture_mirror_once_get();
  public static readonly int GL_NV_fence = libtischPINVOKE.GL_NV_fence_get();
  public static readonly int GL_NV_evaluators = libtischPINVOKE.GL_NV_evaluators_get();
  public static readonly int GL_NV_packed_depth_stencil = libtischPINVOKE.GL_NV_packed_depth_stencil_get();
  public static readonly int GL_NV_register_combiners2 = libtischPINVOKE.GL_NV_register_combiners2_get();
  public static readonly int GL_NV_texture_compression_vtc = libtischPINVOKE.GL_NV_texture_compression_vtc_get();
  public static readonly int GL_NV_texture_rectangle = libtischPINVOKE.GL_NV_texture_rectangle_get();
  public static readonly int GL_NV_texture_shader = libtischPINVOKE.GL_NV_texture_shader_get();
  public static readonly int GL_NV_texture_shader2 = libtischPINVOKE.GL_NV_texture_shader2_get();
  public static readonly int GL_NV_vertex_array_range2 = libtischPINVOKE.GL_NV_vertex_array_range2_get();
  public static readonly int GL_NV_vertex_program = libtischPINVOKE.GL_NV_vertex_program_get();
  public static readonly int GL_SGIX_texture_coordinate_clamp = libtischPINVOKE.GL_SGIX_texture_coordinate_clamp_get();
  public static readonly int GL_SGIX_scalebias_hint = libtischPINVOKE.GL_SGIX_scalebias_hint_get();
  public static readonly int GL_OML_interlace = libtischPINVOKE.GL_OML_interlace_get();
  public static readonly int GL_OML_subsample = libtischPINVOKE.GL_OML_subsample_get();
  public static readonly int GL_OML_resample = libtischPINVOKE.GL_OML_resample_get();
  public static readonly int GL_NV_copy_depth_to_color = libtischPINVOKE.GL_NV_copy_depth_to_color_get();
  public static readonly int GL_ATI_envmap_bumpmap = libtischPINVOKE.GL_ATI_envmap_bumpmap_get();
  public static readonly int GL_ATI_fragment_shader = libtischPINVOKE.GL_ATI_fragment_shader_get();
  public static readonly int GL_ATI_pn_triangles = libtischPINVOKE.GL_ATI_pn_triangles_get();
  public static readonly int GL_ATI_vertex_array_object = libtischPINVOKE.GL_ATI_vertex_array_object_get();
  public static readonly int GL_EXT_vertex_shader = libtischPINVOKE.GL_EXT_vertex_shader_get();
  public static readonly int GL_ATI_vertex_streams = libtischPINVOKE.GL_ATI_vertex_streams_get();
  public static readonly int GL_ATI_element_array = libtischPINVOKE.GL_ATI_element_array_get();
  public static readonly int GL_SUN_mesh_array = libtischPINVOKE.GL_SUN_mesh_array_get();
  public static readonly int GL_SUN_slice_accum = libtischPINVOKE.GL_SUN_slice_accum_get();
  public static readonly int GL_NV_multisample_filter_hint = libtischPINVOKE.GL_NV_multisample_filter_hint_get();
  public static readonly int GL_NV_depth_clamp = libtischPINVOKE.GL_NV_depth_clamp_get();
  public static readonly int GL_NV_occlusion_query = libtischPINVOKE.GL_NV_occlusion_query_get();
  public static readonly int GL_NV_point_sprite = libtischPINVOKE.GL_NV_point_sprite_get();
  public static readonly int GL_NV_texture_shader3 = libtischPINVOKE.GL_NV_texture_shader3_get();
  public static readonly int GL_NV_vertex_program1_1 = libtischPINVOKE.GL_NV_vertex_program1_1_get();
  public static readonly int GL_EXT_shadow_funcs = libtischPINVOKE.GL_EXT_shadow_funcs_get();
  public static readonly int GL_EXT_stencil_two_side = libtischPINVOKE.GL_EXT_stencil_two_side_get();
  public static readonly int GL_ATI_text_fragment_shader = libtischPINVOKE.GL_ATI_text_fragment_shader_get();
  public static readonly int GL_APPLE_client_storage = libtischPINVOKE.GL_APPLE_client_storage_get();
  public static readonly int GL_APPLE_element_array = libtischPINVOKE.GL_APPLE_element_array_get();
  public static readonly int GL_APPLE_fence = libtischPINVOKE.GL_APPLE_fence_get();
  public static readonly int GL_APPLE_vertex_array_object = libtischPINVOKE.GL_APPLE_vertex_array_object_get();
  public static readonly int GL_APPLE_vertex_array_range = libtischPINVOKE.GL_APPLE_vertex_array_range_get();
  public static readonly int GL_APPLE_ycbcr_422 = libtischPINVOKE.GL_APPLE_ycbcr_422_get();
  public static readonly int GL_S3_s3tc = libtischPINVOKE.GL_S3_s3tc_get();
  public static readonly int GL_ATI_draw_buffers = libtischPINVOKE.GL_ATI_draw_buffers_get();
  public static readonly int GL_ATI_pixel_format_float = libtischPINVOKE.GL_ATI_pixel_format_float_get();
  public static readonly int GL_ATI_texture_env_combine3 = libtischPINVOKE.GL_ATI_texture_env_combine3_get();
  public static readonly int GL_ATI_texture_float = libtischPINVOKE.GL_ATI_texture_float_get();
  public static readonly int GL_NV_float_buffer = libtischPINVOKE.GL_NV_float_buffer_get();
  public static readonly int GL_NV_fragment_program = libtischPINVOKE.GL_NV_fragment_program_get();
  public static readonly int GL_NV_half_float = libtischPINVOKE.GL_NV_half_float_get();
  public static readonly int GL_NV_pixel_data_range = libtischPINVOKE.GL_NV_pixel_data_range_get();
  public static readonly int GL_NV_primitive_restart = libtischPINVOKE.GL_NV_primitive_restart_get();
  public static readonly int GL_NV_texture_expand_normal = libtischPINVOKE.GL_NV_texture_expand_normal_get();
  public static readonly int GL_NV_vertex_program2 = libtischPINVOKE.GL_NV_vertex_program2_get();
  public static readonly int GL_ATI_map_object_buffer = libtischPINVOKE.GL_ATI_map_object_buffer_get();
  public static readonly int GL_ATI_separate_stencil = libtischPINVOKE.GL_ATI_separate_stencil_get();
  public static readonly int GL_ATI_vertex_attrib_array_object = libtischPINVOKE.GL_ATI_vertex_attrib_array_object_get();
  public static readonly int GL_OES_read_format = libtischPINVOKE.GL_OES_read_format_get();
  public static readonly int GL_EXT_depth_bounds_test = libtischPINVOKE.GL_EXT_depth_bounds_test_get();
  public static readonly int GL_EXT_texture_mirror_clamp = libtischPINVOKE.GL_EXT_texture_mirror_clamp_get();
  public static readonly int GL_EXT_blend_equation_separate = libtischPINVOKE.GL_EXT_blend_equation_separate_get();
  public static readonly int GL_MESA_pack_invert = libtischPINVOKE.GL_MESA_pack_invert_get();
  public static readonly int GL_MESA_ycbcr_texture = libtischPINVOKE.GL_MESA_ycbcr_texture_get();
  public static readonly int GL_EXT_pixel_buffer_object = libtischPINVOKE.GL_EXT_pixel_buffer_object_get();
  public static readonly int GL_NV_fragment_program_option = libtischPINVOKE.GL_NV_fragment_program_option_get();
  public static readonly int GL_NV_fragment_program2 = libtischPINVOKE.GL_NV_fragment_program2_get();
  public static readonly int GL_NV_vertex_program2_option = libtischPINVOKE.GL_NV_vertex_program2_option_get();
  public static readonly int GL_NV_vertex_program3 = libtischPINVOKE.GL_NV_vertex_program3_get();
  public static readonly int GL_EXT_framebuffer_object = libtischPINVOKE.GL_EXT_framebuffer_object_get();
  public static readonly int GL_GREMEDY_string_marker = libtischPINVOKE.GL_GREMEDY_string_marker_get();
  public static readonly int GL_EXT_packed_depth_stencil = libtischPINVOKE.GL_EXT_packed_depth_stencil_get();
  public static readonly int GL_EXT_stencil_clear_tag = libtischPINVOKE.GL_EXT_stencil_clear_tag_get();
  public static readonly int GL_EXT_texture_sRGB = libtischPINVOKE.GL_EXT_texture_sRGB_get();
  public static readonly int GL_EXT_framebuffer_blit = libtischPINVOKE.GL_EXT_framebuffer_blit_get();
  public static readonly int GL_EXT_framebuffer_multisample = libtischPINVOKE.GL_EXT_framebuffer_multisample_get();
  public static readonly int GL_MESAX_texture_stack = libtischPINVOKE.GL_MESAX_texture_stack_get();
  public static readonly int GL_EXT_timer_query = libtischPINVOKE.GL_EXT_timer_query_get();
  public static readonly int GL_EXT_gpu_program_parameters = libtischPINVOKE.GL_EXT_gpu_program_parameters_get();
  public static readonly int GL_APPLE_flush_buffer_range = libtischPINVOKE.GL_APPLE_flush_buffer_range_get();
  public static readonly int GL_NV_gpu_program4 = libtischPINVOKE.GL_NV_gpu_program4_get();
  public static readonly int GL_NV_geometry_program4 = libtischPINVOKE.GL_NV_geometry_program4_get();
  public static readonly int GL_EXT_geometry_shader4 = libtischPINVOKE.GL_EXT_geometry_shader4_get();
  public static readonly int GL_NV_vertex_program4 = libtischPINVOKE.GL_NV_vertex_program4_get();
  public static readonly int GL_EXT_gpu_shader4 = libtischPINVOKE.GL_EXT_gpu_shader4_get();
  public static readonly int GL_EXT_draw_instanced = libtischPINVOKE.GL_EXT_draw_instanced_get();
  public static readonly int GL_EXT_packed_float = libtischPINVOKE.GL_EXT_packed_float_get();
  public static readonly int GL_EXT_texture_array = libtischPINVOKE.GL_EXT_texture_array_get();
  public static readonly int GL_EXT_texture_buffer_object = libtischPINVOKE.GL_EXT_texture_buffer_object_get();
  public static readonly int GL_EXT_texture_compression_latc = libtischPINVOKE.GL_EXT_texture_compression_latc_get();
  public static readonly int GL_EXT_texture_compression_rgtc = libtischPINVOKE.GL_EXT_texture_compression_rgtc_get();
  public static readonly int GL_EXT_texture_shared_exponent = libtischPINVOKE.GL_EXT_texture_shared_exponent_get();
  public static readonly int GL_NV_depth_buffer_float = libtischPINVOKE.GL_NV_depth_buffer_float_get();
  public static readonly int GL_NV_fragment_program4 = libtischPINVOKE.GL_NV_fragment_program4_get();
  public static readonly int GL_NV_framebuffer_multisample_coverage = libtischPINVOKE.GL_NV_framebuffer_multisample_coverage_get();
  public static readonly int GL_EXT_framebuffer_sRGB = libtischPINVOKE.GL_EXT_framebuffer_sRGB_get();
  public static readonly int GL_NV_geometry_shader4 = libtischPINVOKE.GL_NV_geometry_shader4_get();
  public static readonly int GL_NV_parameter_buffer_object = libtischPINVOKE.GL_NV_parameter_buffer_object_get();
  public static readonly int GL_EXT_draw_buffers2 = libtischPINVOKE.GL_EXT_draw_buffers2_get();
  public static readonly int GL_NV_transform_feedback = libtischPINVOKE.GL_NV_transform_feedback_get();
  public static readonly int GL_EXT_bindable_uniform = libtischPINVOKE.GL_EXT_bindable_uniform_get();
  public static readonly int GL_EXT_texture_integer = libtischPINVOKE.GL_EXT_texture_integer_get();
  public static readonly int GL_GREMEDY_frame_terminator = libtischPINVOKE.GL_GREMEDY_frame_terminator_get();
  public static readonly int GL_NV_conditional_render = libtischPINVOKE.GL_NV_conditional_render_get();
  public static readonly int GL_NV_present_video = libtischPINVOKE.GL_NV_present_video_get();
  public static readonly int GL_EXT_transform_feedback = libtischPINVOKE.GL_EXT_transform_feedback_get();
  public static readonly int GL_EXT_direct_state_access = libtischPINVOKE.GL_EXT_direct_state_access_get();
  public static readonly int GL_EXT_vertex_array_bgra = libtischPINVOKE.GL_EXT_vertex_array_bgra_get();
  public static readonly int GL_EXT_texture_swizzle = libtischPINVOKE.GL_EXT_texture_swizzle_get();
  public static readonly int GL_NV_explicit_multisample = libtischPINVOKE.GL_NV_explicit_multisample_get();
  public static readonly int GL_NV_transform_feedback2 = libtischPINVOKE.GL_NV_transform_feedback2_get();
  public static readonly int GL_ATI_meminfo = libtischPINVOKE.GL_ATI_meminfo_get();
  public static readonly int GL_AMD_performance_monitor = libtischPINVOKE.GL_AMD_performance_monitor_get();
  public static readonly int GL_AMD_texture_texture4 = libtischPINVOKE.GL_AMD_texture_texture4_get();
  public static readonly int GL_AMD_vertex_shader_tesselator = libtischPINVOKE.GL_AMD_vertex_shader_tesselator_get();
  public static readonly int GL_EXT_provoking_vertex = libtischPINVOKE.GL_EXT_provoking_vertex_get();
  public static readonly int GL_EXT_texture_snorm = libtischPINVOKE.GL_EXT_texture_snorm_get();
  public static readonly int GL_AMD_draw_buffers_blend = libtischPINVOKE.GL_AMD_draw_buffers_blend_get();
  public static readonly int GL_APPLE_texture_range = libtischPINVOKE.GL_APPLE_texture_range_get();
  public static readonly int GL_APPLE_float_pixels = libtischPINVOKE.GL_APPLE_float_pixels_get();
  public static readonly int GL_APPLE_vertex_program_evaluators = libtischPINVOKE.GL_APPLE_vertex_program_evaluators_get();
  public static readonly int GL_APPLE_aux_depth_stencil = libtischPINVOKE.GL_APPLE_aux_depth_stencil_get();
  public static readonly int GL_APPLE_object_purgeable = libtischPINVOKE.GL_APPLE_object_purgeable_get();
  public static readonly int GL_APPLE_row_bytes = libtischPINVOKE.GL_APPLE_row_bytes_get();
  public static readonly int GL_APPLE_rgb_422 = libtischPINVOKE.GL_APPLE_rgb_422_get();
  public static readonly int GL_NV_video_capture = libtischPINVOKE.GL_NV_video_capture_get();
  public static readonly int GL_NV_copy_image = libtischPINVOKE.GL_NV_copy_image_get();
  public static readonly int GL_EXT_separate_shader_objects = libtischPINVOKE.GL_EXT_separate_shader_objects_get();
  public static readonly int GL_NV_parameter_buffer_object2 = libtischPINVOKE.GL_NV_parameter_buffer_object2_get();
  public static readonly int GL_NV_shader_buffer_load = libtischPINVOKE.GL_NV_shader_buffer_load_get();
  public static readonly int GL_NV_vertex_buffer_unified_memory = libtischPINVOKE.GL_NV_vertex_buffer_unified_memory_get();
  public static readonly int GL_NV_texture_barrier = libtischPINVOKE.GL_NV_texture_barrier_get();
  public static readonly int DEFAULT_TEXTURE_TARGET = libtischPINVOKE.DEFAULT_TEXTURE_TARGET_get();
  public static readonly int TISCH_TILE_MOVE = libtischPINVOKE.TISCH_TILE_MOVE_get();
  public static readonly int TISCH_TILE_SCALE = libtischPINVOKE.TISCH_TILE_SCALE_get();
  public static readonly int TISCH_TILE_ROTATE = libtischPINVOKE.TISCH_TILE_ROTATE_get();
}
