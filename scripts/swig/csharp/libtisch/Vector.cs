/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.36
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class Vector : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Vector(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Vector obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Vector() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        libtischPINVOKE.delete_Vector(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public Vector(double _x, double _y, double _z) : this(libtischPINVOKE.new_Vector__SWIG_0(_x, _y, _z), true) {
  }

  public Vector(double _x, double _y) : this(libtischPINVOKE.new_Vector__SWIG_1(_x, _y), true) {
  }

  public Vector(double _x) : this(libtischPINVOKE.new_Vector__SWIG_2(_x), true) {
  }

  public Vector() : this(libtischPINVOKE.new_Vector__SWIG_3(), true) {
  }

  public void normalize() {
    libtischPINVOKE.Vector_normalize(swigCPtr);
  }

  public void set(double _x, double _y, double _z) {
    libtischPINVOKE.Vector_set__SWIG_0(swigCPtr, _x, _y, _z);
  }

  public void set(double _x, double _y) {
    libtischPINVOKE.Vector_set__SWIG_1(swigCPtr, _x, _y);
  }

  public void set(double _x) {
    libtischPINVOKE.Vector_set__SWIG_2(swigCPtr, _x);
  }

  public void set() {
    libtischPINVOKE.Vector_set__SWIG_3(swigCPtr);
  }

  public double length() {
    double ret = libtischPINVOKE.Vector_length(swigCPtr);
    return ret;
  }

  public void rotate(double angle) {
    libtischPINVOKE.Vector_rotate(swigCPtr, angle);
  }

  public IntVector round() {
    IntVector ret = new IntVector(libtischPINVOKE.Vector_round(swigCPtr), true);
    return ret;
  }

  public double x {
    set {
      libtischPINVOKE.Vector_x_set(swigCPtr, value);
    } 
    get {
      double ret = libtischPINVOKE.Vector_x_get(swigCPtr);
      return ret;
    } 
  }

  public double y {
    set {
      libtischPINVOKE.Vector_y_set(swigCPtr, value);
    } 
    get {
      double ret = libtischPINVOKE.Vector_y_get(swigCPtr);
      return ret;
    } 
  }

  public double z {
    set {
      libtischPINVOKE.Vector_z_set(swigCPtr, value);
    } 
    get {
      double ret = libtischPINVOKE.Vector_z_get(swigCPtr);
      return ret;
    } 
  }

}
