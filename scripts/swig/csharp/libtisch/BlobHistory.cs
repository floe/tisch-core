/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.36
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class BlobHistory : dequeBasicBlob {
  private HandleRef swigCPtr;

  internal BlobHistory(IntPtr cPtr, bool cMemoryOwn) : base(libtischPINVOKE.BlobHistoryUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(BlobHistory obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~BlobHistory() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        libtischPINVOKE.delete_BlobHistory(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public BlobHistory(int _maxlen) : this(libtischPINVOKE.new_BlobHistory__SWIG_0(_maxlen), true) {
  }

  public BlobHistory() : this(libtischPINVOKE.new_BlobHistory__SWIG_1(), true) {
  }

  public void add(BasicBlob val) {
    libtischPINVOKE.BlobHistory_add(swigCPtr, BasicBlob.getCPtr(val));
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public Vector avg {
    set {
      libtischPINVOKE.BlobHistory_avg_set(swigCPtr, Vector.getCPtr(value));
    } 
    get {
      IntPtr cPtr = libtischPINVOKE.BlobHistory_avg_get(swigCPtr);
      Vector ret = (cPtr == IntPtr.Zero) ? null : new Vector(cPtr, false);
      return ret;
    } 
  }

  public Vector stddev {
    set {
      libtischPINVOKE.BlobHistory_stddev_set(swigCPtr, Vector.getCPtr(value));
    } 
    get {
      IntPtr cPtr = libtischPINVOKE.BlobHistory_stddev_get(swigCPtr);
      Vector ret = (cPtr == IntPtr.Zero) ? null : new Vector(cPtr, false);
      return ret;
    } 
  }

  public Vector pos {
    set {
      libtischPINVOKE.BlobHistory_pos_set(swigCPtr, Vector.getCPtr(value));
    } 
    get {
      IntPtr cPtr = libtischPINVOKE.BlobHistory_pos_get(swigCPtr);
      Vector ret = (cPtr == IntPtr.Zero) ? null : new Vector(cPtr, false);
      return ret;
    } 
  }

  public BasicBlob first {
    set {
      libtischPINVOKE.BlobHistory_first_set(swigCPtr, BasicBlob.getCPtr(value));
    } 
    get {
      IntPtr cPtr = libtischPINVOKE.BlobHistory_first_get(swigCPtr);
      BasicBlob ret = (cPtr == IntPtr.Zero) ? null : new BasicBlob(cPtr, false);
      return ret;
    } 
  }

  public int recent {
    set {
      libtischPINVOKE.BlobHistory_recent_set(swigCPtr, value);
    } 
    get {
      int ret = libtischPINVOKE.BlobHistory_recent_get(swigCPtr);
      return ret;
    } 
  }

  public int newblob {
    set {
      libtischPINVOKE.BlobHistory_newblob_set(swigCPtr, value);
    } 
    get {
      int ret = libtischPINVOKE.BlobHistory_newblob_get(swigCPtr);
      return ret;
    } 
  }

}
