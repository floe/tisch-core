/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.36
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class Container : Tile {
  private HandleRef swigCPtr;

  internal Container(IntPtr cPtr, bool cMemoryOwn) : base(libtischPINVOKE.ContainerUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Container obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Container() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        libtischPINVOKE.delete_Container(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public Container(int w, int h, int x, int y, double angle, RGBATexture tex, int mode) : this(libtischPINVOKE.new_Container__SWIG_0(w, h, x, y, angle, RGBATexture.getCPtr(tex), mode), true) {
  }

  public Container(int w, int h, int x, int y, double angle, RGBATexture tex) : this(libtischPINVOKE.new_Container__SWIG_1(w, h, x, y, angle, RGBATexture.getCPtr(tex)), true) {
  }

  public Container(int w, int h, int x, int y, double angle) : this(libtischPINVOKE.new_Container__SWIG_2(w, h, x, y, angle), true) {
  }

  public Container(int w, int h, int x, int y) : this(libtischPINVOKE.new_Container__SWIG_3(w, h, x, y), true) {
  }

  public void add(Widget widget) {
    libtischPINVOKE.Container_add(swigCPtr, Widget.getCPtr(widget));
  }

  public override void raise(Widget widget) {
    libtischPINVOKE.Container_raise__SWIG_0(swigCPtr, Widget.getCPtr(widget));
  }

  public override void raise() {
    libtischPINVOKE.Container_raise__SWIG_1(swigCPtr);
  }

  public void remove(Widget widget) {
    libtischPINVOKE.Container_remove(swigCPtr, Widget.getCPtr(widget));
  }

  public override void draw() {
    libtischPINVOKE.Container_draw(swigCPtr);
  }

  public override void doUpdate(Widget target, SWIGTYPE_p_std__ostream ost) {
    libtischPINVOKE.Container_doUpdate__SWIG_0(swigCPtr, Widget.getCPtr(target), SWIGTYPE_p_std__ostream.getCPtr(ost));
  }

  public override void doUpdate(Widget target) {
    libtischPINVOKE.Container_doUpdate__SWIG_1(swigCPtr, Widget.getCPtr(target));
  }

  public override void doUpdate() {
    libtischPINVOKE.Container_doUpdate__SWIG_2(swigCPtr);
  }

  public override void tap(Vector vec, int id) {
    libtischPINVOKE.Container_tap(swigCPtr, Vector.getCPtr(vec), id);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

}
