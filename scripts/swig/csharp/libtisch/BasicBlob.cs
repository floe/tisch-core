/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.36
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class BasicBlob : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal BasicBlob(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(BasicBlob obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~BasicBlob() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        libtischPINVOKE.delete_BasicBlob(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public BasicBlob() : this(libtischPINVOKE.new_BasicBlob(), true) {
  }

  public int size {
    set {
      libtischPINVOKE.BasicBlob_size_set(swigCPtr, value);
    } 
    get {
      int ret = libtischPINVOKE.BasicBlob_size_get(swigCPtr);
      return ret;
    } 
  }

  public int id {
    set {
      libtischPINVOKE.BasicBlob_id_set(swigCPtr, value);
    } 
    get {
      int ret = libtischPINVOKE.BasicBlob_id_get(swigCPtr);
      return ret;
    } 
  }

  public int pid {
    set {
      libtischPINVOKE.BasicBlob_pid_set(swigCPtr, value);
    } 
    get {
      int ret = libtischPINVOKE.BasicBlob_pid_get(swigCPtr);
      return ret;
    } 
  }

  public int tracked {
    set {
      libtischPINVOKE.BasicBlob_tracked_set(swigCPtr, value);
    } 
    get {
      int ret = libtischPINVOKE.BasicBlob_tracked_get(swigCPtr);
      return ret;
    } 
  }

  public byte value {
    set {
      libtischPINVOKE.BasicBlob_value_set(swigCPtr, value);
    } 
    get {
      byte ret = libtischPINVOKE.BasicBlob_value_get(swigCPtr);
      return ret;
    } 
  }

  public Vector pos {
    set {
      libtischPINVOKE.BasicBlob_pos_set(swigCPtr, Vector.getCPtr(value));
    } 
    get {
      IntPtr cPtr = libtischPINVOKE.BasicBlob_pos_get(swigCPtr);
      Vector ret = (cPtr == IntPtr.Zero) ? null : new Vector(cPtr, false);
      return ret;
    } 
  }

  public Vector speed {
    set {
      libtischPINVOKE.BasicBlob_speed_set(swigCPtr, Vector.getCPtr(value));
    } 
    get {
      IntPtr cPtr = libtischPINVOKE.BasicBlob_speed_get(swigCPtr);
      Vector ret = (cPtr == IntPtr.Zero) ? null : new Vector(cPtr, false);
      return ret;
    } 
  }

  public Vector peak {
    set {
      libtischPINVOKE.BasicBlob_peak_set(swigCPtr, Vector.getCPtr(value));
    } 
    get {
      IntPtr cPtr = libtischPINVOKE.BasicBlob_peak_get(swigCPtr);
      Vector ret = (cPtr == IntPtr.Zero) ? null : new Vector(cPtr, false);
      return ret;
    } 
  }

  public Vector axis1 {
    set {
      libtischPINVOKE.BasicBlob_axis1_set(swigCPtr, Vector.getCPtr(value));
    } 
    get {
      IntPtr cPtr = libtischPINVOKE.BasicBlob_axis1_get(swigCPtr);
      Vector ret = (cPtr == IntPtr.Zero) ? null : new Vector(cPtr, false);
      return ret;
    } 
  }

  public Vector axis2 {
    set {
      libtischPINVOKE.BasicBlob_axis2_set(swigCPtr, Vector.getCPtr(value));
    } 
    get {
      IntPtr cPtr = libtischPINVOKE.BasicBlob_axis2_get(swigCPtr);
      Vector ret = (cPtr == IntPtr.Zero) ? null : new Vector(cPtr, false);
      return ret;
    } 
  }

}
