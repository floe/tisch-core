/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.36
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class mapStringFeatureBaseP : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal mapStringFeatureBaseP(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(mapStringFeatureBaseP obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~mapStringFeatureBaseP() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        libtischPINVOKE.delete_mapStringFeatureBaseP(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public mapStringFeatureBaseP() : this(libtischPINVOKE.new_mapStringFeatureBaseP__SWIG_0(), true) {
  }

  public mapStringFeatureBaseP(mapStringFeatureBaseP arg0) : this(libtischPINVOKE.new_mapStringFeatureBaseP__SWIG_1(mapStringFeatureBaseP.getCPtr(arg0)), true) {
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint size() {
    uint ret = libtischPINVOKE.mapStringFeatureBaseP_size(swigCPtr);
    return ret;
  }

  public bool empty() {
    bool ret = libtischPINVOKE.mapStringFeatureBaseP_empty(swigCPtr);
    return ret;
  }

  public void clear() {
    libtischPINVOKE.mapStringFeatureBaseP_clear(swigCPtr);
  }

  public FeatureBase get(string key) {
    IntPtr cPtr = libtischPINVOKE.mapStringFeatureBaseP_get(swigCPtr, key);
    FeatureBase ret = (cPtr == IntPtr.Zero) ? null : new FeatureBase(cPtr, false);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set(string key, FeatureBase x) {
    libtischPINVOKE.mapStringFeatureBaseP_set(swigCPtr, key, FeatureBase.getCPtr(x));
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public void del(string key) {
    libtischPINVOKE.mapStringFeatureBaseP_del(swigCPtr, key);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool has_key(string key) {
    bool ret = libtischPINVOKE.mapStringFeatureBaseP_has_key(swigCPtr, key);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
