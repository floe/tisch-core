/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.36
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class mapIntBlobHistory : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal mapIntBlobHistory(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(mapIntBlobHistory obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~mapIntBlobHistory() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        libtischPINVOKE.delete_mapIntBlobHistory(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public mapIntBlobHistory() : this(libtischPINVOKE.new_mapIntBlobHistory__SWIG_0(), true) {
  }

  public mapIntBlobHistory(mapIntBlobHistory arg0) : this(libtischPINVOKE.new_mapIntBlobHistory__SWIG_1(mapIntBlobHistory.getCPtr(arg0)), true) {
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint size() {
    uint ret = libtischPINVOKE.mapIntBlobHistory_size(swigCPtr);
    return ret;
  }

  public bool empty() {
    bool ret = libtischPINVOKE.mapIntBlobHistory_empty(swigCPtr);
    return ret;
  }

  public void clear() {
    libtischPINVOKE.mapIntBlobHistory_clear(swigCPtr);
  }

  public BlobHistory get(int key) {
    BlobHistory ret = new BlobHistory(libtischPINVOKE.mapIntBlobHistory_get(swigCPtr, key), false);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set(int key, BlobHistory x) {
    libtischPINVOKE.mapIntBlobHistory_set(swigCPtr, key, BlobHistory.getCPtr(x));
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public void del(int key) {
    libtischPINVOKE.mapIntBlobHistory_del(swigCPtr, key);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool has_key(int key) {
    bool ret = libtischPINVOKE.mapIntBlobHistory_has_key(swigCPtr, key);
    return ret;
  }

}
