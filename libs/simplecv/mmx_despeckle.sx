/*
	void mmxdespeckle( unsigned char* in, unsigned char* out, ASMINT linecnt, ASMINT stride, unsigned char thresh )

	register usage:
		mm0,1,2: previous,current,next row
		mm3: 8 * 1 (LSB bitmask)
		mm4: neighbor count accumulator
		mm5: temporary register
		mm6: 8 * (neighbor count threshold)

		esi: data (in)
		edi: result (out)
		eax: count = linecnt * stride / input index (0)
		ebx: count
		edx: stride
		ecx: thresh / output index
*/

; .intel_syntax noprefix
; .globl mmx_despeckle
; .hidden mmx_despeckle
; mmx_despeckle:

push pbx

mov pbx, pax   /* move count to ebx */
xor pax, pax   /* set index to 0    */

movd mm6, ecx  /* generate threshold values */
punpcklbw mm6, mm6
punpcklbw mm6, mm6
punpcklbw mm6, mm6

mov  ecx, 1  /* generate bitmask with LSB set */
movd mm3, ecx
punpcklbw mm3, mm3
punpcklbw mm3, mm3
punpcklbw mm3, mm3

movq mm0, [psi+pax] /* preload first row */
pand mm0, mm3
add pax, pdx

mov pcx, pax /* reuse threshold register as output index */

movq mm1, [psi+pax] /* preload second row */
pand mm1, mm3
add pax, pdx

mmx_despeckle_loop:

	movq mm2, [psi+pax] /* load next row */
	pand mm2, mm3

	pxor mm4, mm4  /* clear the accumulator */

	paddb mm4, mm0 /* add 8 neighborhood values */
	paddb mm4, mm2

	movq mm5, mm0
	psrlq mm5, 8
	paddb mm4, mm5

	movq mm5, mm0
	psllq mm5, 8
	paddb mm4, mm5

	movq mm5, mm1
	psrlq mm5, 8
	paddb mm4, mm5

	movq mm5, mm1
	psllq mm5, 8
	paddb mm4, mm5

	movq mm5, mm2
	psrlq mm5, 8
	paddb mm4, mm5

	movq mm5, mm2
	psllq mm5, 8
	paddb mm4, mm5

	pcmpgtb mm4, mm6 /* compare accumulator against threshold */

	psrlq mm4, 8 /* shift results (6 inner bytes) to the right  */
	             /* 2 junk bytes are overwritten by next column */

	movq [pdi+pcx+1], mm4 /* store back to saved location + 1 */
	add pcx, pdx

	movq mm0, mm1 /* cycle previous/current/next row values */
	movq mm1, mm2

	add pax, pdx  /* next loop iteration? */
	cmp pax, pbx
	jb mmx_despeckle_loop

pop pbx
emms

; ret

