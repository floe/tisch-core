/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class Tile : Button {
  private HandleRef swigCPtr;

  internal Tile(IntPtr cPtr, bool cMemoryOwn) : base(libtischPINVOKE.TileUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Tile obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Tile() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          libtischPINVOKE.delete_Tile(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public Tile(int _w, int _h, int _x, int _y, double angle, RGBATexture _tex, int _mode) : this(libtischPINVOKE.new_Tile__SWIG_0(_w, _h, _x, _y, angle, libtischPINVOKE.getCPtrAddRef(_tex), _mode), true) {
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  public Tile(int _w, int _h, int _x, int _y, double angle, RGBATexture _tex) : this(libtischPINVOKE.new_Tile__SWIG_1(_w, _h, _x, _y, angle, libtischPINVOKE.getCPtrAddRef(_tex)), true) {
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  public Tile(int _w, int _h, int _x, int _y, double angle) : this(libtischPINVOKE.new_Tile__SWIG_2(_w, _h, _x, _y, angle), true) {
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  public Tile(int _w, int _h, int _x, int _y) : this(libtischPINVOKE.new_Tile__SWIG_3(_w, _h, _x, _y), true) {
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  public Tile(int _w, int _h, int _x) : this(libtischPINVOKE.new_Tile__SWIG_4(_w, _h, _x), true) {
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  public Tile(int _w, int _h) : this(libtischPINVOKE.new_Tile__SWIG_5(_w, _h), true) {
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  public override void action(Gesture gesture) {
    if (this.GetType() == typeof(Tile)) libtischPINVOKE.Tile_action(swigCPtr, Gesture.getCPtr(gesture)); else libtischPINVOKE.Tile_actionSwigExplicitTile(swigCPtr, Gesture.getCPtr(gesture));
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void tap(Vector pos, int id) {
    if (this.GetType() == typeof(Tile)) libtischPINVOKE.Tile_tap(swigCPtr, Vector.getCPtr(pos), id); else libtischPINVOKE.Tile_tapSwigExplicitTile(swigCPtr, Vector.getCPtr(pos), id);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void paint(bool update_stencil) {
    if (this.GetType() == typeof(Tile)) libtischPINVOKE.Tile_paint__SWIG_0(swigCPtr, update_stencil); else libtischPINVOKE.Tile_paintSwigExplicitTile__SWIG_0(swigCPtr, update_stencil);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void paint() {
    if (this.GetType() == typeof(Tile)) libtischPINVOKE.Tile_paint__SWIG_1(swigCPtr); else libtischPINVOKE.Tile_paintSwigExplicitTile__SWIG_1(swigCPtr);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void apply(Vector delta) {
    if (this.GetType() == typeof(Tile)) libtischPINVOKE.Tile_apply(swigCPtr, Vector.getCPtr(delta)); else libtischPINVOKE.Tile_applySwigExplicitTile(swigCPtr, Vector.getCPtr(delta));
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  protected int mode {
    set {
      libtischPINVOKE.Tile_mode_set(swigCPtr, value);
      if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = libtischPINVOKE.Tile_mode_get(swigCPtr);
      if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  protected int slide {
    set {
      libtischPINVOKE.Tile_slide_set(swigCPtr, value);
      if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = libtischPINVOKE.Tile_slide_get(swigCPtr);
      if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  protected Vector vel {
    set {
      libtischPINVOKE.Tile_vel_set(swigCPtr, Vector.getCPtr(value));
      if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      IntPtr cPtr = libtischPINVOKE.Tile_vel_get(swigCPtr);
      Vector ret = (cPtr == IntPtr.Zero) ? null : new Vector(cPtr, false);
      if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("outline", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateTile_0(SwigDirectoroutline);
    if (SwigDerivedClassHasMethod("update", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateTile_1(SwigDirectorupdate__SWIG_0);
    if (SwigDerivedClassHasMethod("update", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateTile_2(SwigDirectorupdate__SWIG_1);
    if (SwigDerivedClassHasMethod("doUpdate", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateTile_3(SwigDirectordoUpdate__SWIG_0);
    if (SwigDerivedClassHasMethod("doUpdate", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateTile_4(SwigDirectordoUpdate__SWIG_1);
    if (SwigDerivedClassHasMethod("raise", swigMethodTypes5))
      swigDelegate5 = new SwigDelegateTile_5(SwigDirectorraise__SWIG_0);
    if (SwigDerivedClassHasMethod("raise", swigMethodTypes6))
      swigDelegate6 = new SwigDelegateTile_6(SwigDirectorraise__SWIG_1);
    if (SwigDerivedClassHasMethod("lower", swigMethodTypes7))
      swigDelegate7 = new SwigDelegateTile_7(SwigDirectorlower__SWIG_0);
    if (SwigDerivedClassHasMethod("lower", swigMethodTypes8))
      swigDelegate8 = new SwigDelegateTile_8(SwigDirectorlower__SWIG_1);
    if (SwigDerivedClassHasMethod("draw", swigMethodTypes9))
      swigDelegate9 = new SwigDelegateTile_9(SwigDirectordraw);
    if (SwigDerivedClassHasMethod("action", swigMethodTypes10))
      swigDelegate10 = new SwigDelegateTile_10(SwigDirectoraction);
    if (SwigDerivedClassHasMethod("enter", swigMethodTypes11))
      swigDelegate11 = new SwigDelegateTile_11(SwigDirectorenter__SWIG_0);
    if (SwigDerivedClassHasMethod("enter", swigMethodTypes12))
      swigDelegate12 = new SwigDelegateTile_12(SwigDirectorenter__SWIG_1);
    if (SwigDerivedClassHasMethod("paint", swigMethodTypes13))
      swigDelegate13 = new SwigDelegateTile_13(SwigDirectorpaint__SWIG_0);
    if (SwigDerivedClassHasMethod("paint", swigMethodTypes14))
      swigDelegate14 = new SwigDelegateTile_14(SwigDirectorpaint__SWIG_1);
    if (SwigDerivedClassHasMethod("tap", swigMethodTypes15))
      swigDelegate15 = new SwigDelegateTile_15(SwigDirectortap);
    if (SwigDerivedClassHasMethod("release", swigMethodTypes16))
      swigDelegate16 = new SwigDelegateTile_16(SwigDirectorrelease);
    if (SwigDerivedClassHasMethod("apply", swigMethodTypes17))
      swigDelegate17 = new SwigDelegateTile_17(SwigDirectorapply);
    libtischPINVOKE.Tile_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5, swigDelegate6, swigDelegate7, swigDelegate8, swigDelegate9, swigDelegate10, swigDelegate11, swigDelegate12, swigDelegate13, swigDelegate14, swigDelegate15, swigDelegate16, swigDelegate17);
  }

  private bool SwigDerivedClassHasMethod(string methodName, Type[] methodTypes) {
    System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(Tile));
    return hasDerivedMethod;
  }

  private void SwigDirectoroutline() {
    outline();
  }

  private void SwigDirectorupdate__SWIG_0(IntPtr target) {
    update((target == IntPtr.Zero) ? null : new Widget(target, false));
  }

  private void SwigDirectorupdate__SWIG_1() {
    update();
  }

  private void SwigDirectordoUpdate__SWIG_0(IntPtr target) {
    doUpdate((target == IntPtr.Zero) ? null : new Widget(target, false));
  }

  private void SwigDirectordoUpdate__SWIG_1() {
    doUpdate();
  }

  private void SwigDirectorraise__SWIG_0(IntPtr widget) {
    raise((widget == IntPtr.Zero) ? null : new Widget(widget, false));
  }

  private void SwigDirectorraise__SWIG_1() {
    raise();
  }

  private void SwigDirectorlower__SWIG_0(IntPtr widget) {
    lower((widget == IntPtr.Zero) ? null : new Widget(widget, false));
  }

  private void SwigDirectorlower__SWIG_1() {
    lower();
  }

  private void SwigDirectordraw() {
    draw();
  }

  private void SwigDirectoraction(IntPtr gesture) {
    action((gesture == IntPtr.Zero) ? null : new Gesture(gesture, false));
  }

  private void SwigDirectorenter__SWIG_0(double z) {
    enter(z);
  }

  private void SwigDirectorenter__SWIG_1() {
    enter();
  }

  private void SwigDirectorpaint__SWIG_0(bool update_stencil) {
    paint(update_stencil);
  }

  private void SwigDirectorpaint__SWIG_1() {
    paint();
  }

  private void SwigDirectortap(IntPtr pos, int id) {
    tap(new Vector(pos, false), id);
  }

  private void SwigDirectorrelease() {
    release();
  }

  private void SwigDirectorapply(IntPtr delta) {
    apply(new Vector(delta, false));
  }

  public delegate void SwigDelegateTile_0();
  public delegate void SwigDelegateTile_1(IntPtr target);
  public delegate void SwigDelegateTile_2();
  public delegate void SwigDelegateTile_3(IntPtr target);
  public delegate void SwigDelegateTile_4();
  public delegate void SwigDelegateTile_5(IntPtr widget);
  public delegate void SwigDelegateTile_6();
  public delegate void SwigDelegateTile_7(IntPtr widget);
  public delegate void SwigDelegateTile_8();
  public delegate void SwigDelegateTile_9();
  public delegate void SwigDelegateTile_10(IntPtr gesture);
  public delegate void SwigDelegateTile_11(double z);
  public delegate void SwigDelegateTile_12();
  public delegate void SwigDelegateTile_13(bool update_stencil);
  public delegate void SwigDelegateTile_14();
  public delegate void SwigDelegateTile_15(IntPtr pos, int id);
  public delegate void SwigDelegateTile_16();
  public delegate void SwigDelegateTile_17(IntPtr delta);

  private SwigDelegateTile_0 swigDelegate0;
  private SwigDelegateTile_1 swigDelegate1;
  private SwigDelegateTile_2 swigDelegate2;
  private SwigDelegateTile_3 swigDelegate3;
  private SwigDelegateTile_4 swigDelegate4;
  private SwigDelegateTile_5 swigDelegate5;
  private SwigDelegateTile_6 swigDelegate6;
  private SwigDelegateTile_7 swigDelegate7;
  private SwigDelegateTile_8 swigDelegate8;
  private SwigDelegateTile_9 swigDelegate9;
  private SwigDelegateTile_10 swigDelegate10;
  private SwigDelegateTile_11 swigDelegate11;
  private SwigDelegateTile_12 swigDelegate12;
  private SwigDelegateTile_13 swigDelegate13;
  private SwigDelegateTile_14 swigDelegate14;
  private SwigDelegateTile_15 swigDelegate15;
  private SwigDelegateTile_16 swigDelegate16;
  private SwigDelegateTile_17 swigDelegate17;

  private static Type[] swigMethodTypes0 = new Type[] {  };
  private static Type[] swigMethodTypes1 = new Type[] { typeof(Widget) };
  private static Type[] swigMethodTypes2 = new Type[] {  };
  private static Type[] swigMethodTypes3 = new Type[] { typeof(Widget) };
  private static Type[] swigMethodTypes4 = new Type[] {  };
  private static Type[] swigMethodTypes5 = new Type[] { typeof(Widget) };
  private static Type[] swigMethodTypes6 = new Type[] {  };
  private static Type[] swigMethodTypes7 = new Type[] { typeof(Widget) };
  private static Type[] swigMethodTypes8 = new Type[] {  };
  private static Type[] swigMethodTypes9 = new Type[] {  };
  private static Type[] swigMethodTypes10 = new Type[] { typeof(Gesture) };
  private static Type[] swigMethodTypes11 = new Type[] { typeof(double) };
  private static Type[] swigMethodTypes12 = new Type[] {  };
  private static Type[] swigMethodTypes13 = new Type[] { typeof(bool) };
  private static Type[] swigMethodTypes14 = new Type[] {  };
  private static Type[] swigMethodTypes15 = new Type[] { typeof(Vector), typeof(int) };
  private static Type[] swigMethodTypes16 = new Type[] {  };
  private static Type[] swigMethodTypes17 = new Type[] { typeof(Vector) };
}
