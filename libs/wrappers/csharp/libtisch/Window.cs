/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class Window : GLUTWindow {
  private HandleRef swigCPtr;

  internal Window(IntPtr cPtr, bool cMemoryOwn) : base(libtischPINVOKE.WindowUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Window obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Window() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          libtischPINVOKE.delete_Window(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public Window(int w, int h, string title, int use_mouse) : this(libtischPINVOKE.new_Window__SWIG_0(w, h, title, use_mouse), true) {
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  public Window(int w, int h, string title) : this(libtischPINVOKE.new_Window__SWIG_1(w, h, title), true) {
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  public override void idle() {
    if (this.GetType() == typeof(Window)) libtischPINVOKE.Window_idle(swigCPtr); else libtischPINVOKE.Window_idleSwigExplicitWindow(swigCPtr);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void display() {
    if (this.GetType() == typeof(Window)) libtischPINVOKE.Window_display(swigCPtr); else libtischPINVOKE.Window_displaySwigExplicitWindow(swigCPtr);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void reshape(int w, int h) {
    if (this.GetType() == typeof(Window)) libtischPINVOKE.Window_reshape(swigCPtr, w, h); else libtischPINVOKE.Window_reshapeSwigExplicitWindow(swigCPtr, w, h);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void keyboard(int key, int x, int y) {
    if (this.GetType() == typeof(Window)) libtischPINVOKE.Window_keyboard(swigCPtr, key, x, y); else libtischPINVOKE.Window_keyboardSwigExplicitWindow(swigCPtr, key, x, y);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void mouse(int num, int button, int state, int x, int y) {
    if (this.GetType() == typeof(Window)) libtischPINVOKE.Window_mouse(swigCPtr, num, button, state, x, y); else libtischPINVOKE.Window_mouseSwigExplicitWindow(swigCPtr, num, button, state, x, y);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void motion(int num, int x, int y) {
    if (this.GetType() == typeof(Window)) libtischPINVOKE.Window_motion(swigCPtr, num, x, y); else libtischPINVOKE.Window_motionSwigExplicitWindow(swigCPtr, num, x, y);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void passive(int num, int x, int y) {
    if (this.GetType() == typeof(Window)) libtischPINVOKE.Window_passive(swigCPtr, num, x, y); else libtischPINVOKE.Window_passiveSwigExplicitWindow(swigCPtr, num, x, y);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void entry(int num, int state) {
    if (this.GetType() == typeof(Window)) libtischPINVOKE.Window_entry(swigCPtr, num, state); else libtischPINVOKE.Window_entrySwigExplicitWindow(swigCPtr, num, state);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public new void add(Widget w, int back) {
    libtischPINVOKE.Window_add__SWIG_0(swigCPtr, libtischPINVOKE.getCPtrAddRef(w), back);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public new void add(Widget w) {
    libtischPINVOKE.Window_add__SWIG_1(swigCPtr, libtischPINVOKE.getCPtrAddRef(w));
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public new void remove(Widget widget, int unreg) {
    libtischPINVOKE.Window_remove__SWIG_0(swigCPtr, libtischPINVOKE.getCPtrAddRef(widget), unreg);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public new void remove(Widget widget) {
    libtischPINVOKE.Window_remove__SWIG_1(swigCPtr, libtischPINVOKE.getCPtrAddRef(widget));
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public new void update(Widget target) {
    if (this.GetType() == typeof(Window)) libtischPINVOKE.Window_update__SWIG_0(swigCPtr, libtischPINVOKE.getCPtrAddRef(target)); else libtischPINVOKE.Window_updateSwigExplicitWindow__SWIG_0(swigCPtr, libtischPINVOKE.getCPtrAddRef(target));
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public new void update() {
    if (this.GetType() == typeof(Window)) libtischPINVOKE.Window_update__SWIG_1(swigCPtr); else libtischPINVOKE.Window_updateSwigExplicitWindow__SWIG_1(swigCPtr);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public new void adjust(int w, int h) {
    libtischPINVOKE.Window_adjust(swigCPtr, w, h);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public new void usePeak() {
    libtischPINVOKE.Window_usePeak(swigCPtr);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("idle", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateWindow_0(SwigDirectoridle);
    if (SwigDerivedClassHasMethod("display", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateWindow_1(SwigDirectordisplay);
    if (SwigDerivedClassHasMethod("reshape", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateWindow_2(SwigDirectorreshape);
    if (SwigDerivedClassHasMethod("keyboard", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateWindow_3(SwigDirectorkeyboard);
    if (SwigDerivedClassHasMethod("mouse", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateWindow_4(SwigDirectormouse);
    if (SwigDerivedClassHasMethod("passive", swigMethodTypes5))
      swigDelegate5 = new SwigDelegateWindow_5(SwigDirectorpassive);
    if (SwigDerivedClassHasMethod("motion", swigMethodTypes6))
      swigDelegate6 = new SwigDelegateWindow_6(SwigDirectormotion);
    if (SwigDerivedClassHasMethod("entry", swigMethodTypes7))
      swigDelegate7 = new SwigDelegateWindow_7(SwigDirectorentry);
    if (SwigDerivedClassHasMethod("update", swigMethodTypes8))
      swigDelegate8 = new SwigDelegateWindow_8(SwigDirectorupdate__SWIG_0);
    if (SwigDerivedClassHasMethod("update", swigMethodTypes9))
      swigDelegate9 = new SwigDelegateWindow_9(SwigDirectorupdate__SWIG_1);
    libtischPINVOKE.Window_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5, swigDelegate6, swigDelegate7, swigDelegate8, swigDelegate9);
  }

  private bool SwigDerivedClassHasMethod(string methodName, Type[] methodTypes) {
    System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(Window));
    return hasDerivedMethod;
  }

  private void SwigDirectoridle() {
    idle();
  }

  private void SwigDirectordisplay() {
    display();
  }

  private void SwigDirectorreshape(int w, int h) {
    reshape(w, h);
  }

  private void SwigDirectorkeyboard(int key, int x, int y) {
    keyboard(key, x, y);
  }

  private void SwigDirectormouse(int num, int button, int state, int x, int y) {
    mouse(num, button, state, x, y);
  }

  private void SwigDirectorpassive(int num, int x, int y) {
    passive(num, x, y);
  }

  private void SwigDirectormotion(int num, int x, int y) {
    motion(num, x, y);
  }

  private void SwigDirectorentry(int num, int state) {
    entry(num, state);
  }

  private void SwigDirectorupdate__SWIG_0(IntPtr target) {
    update((target == IntPtr.Zero) ? null : new Widget(target, false));
  }

  private void SwigDirectorupdate__SWIG_1() {
    update();
  }

  public delegate void SwigDelegateWindow_0();
  public delegate void SwigDelegateWindow_1();
  public delegate void SwigDelegateWindow_2(int w, int h);
  public delegate void SwigDelegateWindow_3(int key, int x, int y);
  public delegate void SwigDelegateWindow_4(int num, int button, int state, int x, int y);
  public delegate void SwigDelegateWindow_5(int num, int x, int y);
  public delegate void SwigDelegateWindow_6(int num, int x, int y);
  public delegate void SwigDelegateWindow_7(int num, int state);
  public delegate void SwigDelegateWindow_8(IntPtr target);
  public delegate void SwigDelegateWindow_9();

  private SwigDelegateWindow_0 swigDelegate0;
  private SwigDelegateWindow_1 swigDelegate1;
  private SwigDelegateWindow_2 swigDelegate2;
  private SwigDelegateWindow_3 swigDelegate3;
  private SwigDelegateWindow_4 swigDelegate4;
  private SwigDelegateWindow_5 swigDelegate5;
  private SwigDelegateWindow_6 swigDelegate6;
  private SwigDelegateWindow_7 swigDelegate7;
  private SwigDelegateWindow_8 swigDelegate8;
  private SwigDelegateWindow_9 swigDelegate9;

  private static Type[] swigMethodTypes0 = new Type[] {  };
  private static Type[] swigMethodTypes1 = new Type[] {  };
  private static Type[] swigMethodTypes2 = new Type[] { typeof(int), typeof(int) };
  private static Type[] swigMethodTypes3 = new Type[] { typeof(int), typeof(int), typeof(int) };
  private static Type[] swigMethodTypes4 = new Type[] { typeof(int), typeof(int), typeof(int), typeof(int), typeof(int) };
  private static Type[] swigMethodTypes5 = new Type[] { typeof(int), typeof(int), typeof(int) };
  private static Type[] swigMethodTypes6 = new Type[] { typeof(int), typeof(int), typeof(int) };
  private static Type[] swigMethodTypes7 = new Type[] { typeof(int), typeof(int) };
  private static Type[] swigMethodTypes8 = new Type[] { typeof(Widget) };
  private static Type[] swigMethodTypes9 = new Type[] {  };
}
