/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class Checkbox : Button {
  private HandleRef swigCPtr;

  internal Checkbox(IntPtr cPtr, bool cMemoryOwn) : base(libtischPINVOKE.CheckboxUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Checkbox obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Checkbox() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          libtischPINVOKE.delete_Checkbox(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public Checkbox(int _w, int _h, int _x, int _y, double angle, RGBATexture _tex) : this(libtischPINVOKE.new_Checkbox__SWIG_0(_w, _h, _x, _y, angle, libtischPINVOKE.getCPtrAddRef(_tex)), true) {
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public Checkbox(int _w, int _h, int _x, int _y, double angle) : this(libtischPINVOKE.new_Checkbox__SWIG_1(_w, _h, _x, _y, angle), true) {
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public Checkbox(int _w, int _h, int _x, int _y) : this(libtischPINVOKE.new_Checkbox__SWIG_2(_w, _h, _x, _y), true) {
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public Checkbox(int _w, int _h, int _x) : this(libtischPINVOKE.new_Checkbox__SWIG_3(_w, _h, _x), true) {
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public Checkbox(int _w, int _h) : this(libtischPINVOKE.new_Checkbox__SWIG_4(_w, _h), true) {
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void draw() {
    libtischPINVOKE.Checkbox_draw(swigCPtr);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void tap(Vector pos, int id) {
    libtischPINVOKE.Checkbox_tap(swigCPtr, Vector.getCPtr(pos), id);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public int get() {
    int ret = libtischPINVOKE.Checkbox_get(swigCPtr);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set(int _checked) {
    libtischPINVOKE.Checkbox_set(swigCPtr, _checked);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

}
