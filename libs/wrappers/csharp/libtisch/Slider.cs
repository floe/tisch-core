/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class Slider : Widget {
  private HandleRef swigCPtr;

  internal Slider(IntPtr cPtr, bool cMemoryOwn) : base(libtischPINVOKE.Slider_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Slider obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Slider() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          libtischPINVOKE.delete_Slider(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public Slider(int _w, int _h, int _x, int _y, double angle, RGBATexture _tex) : this(libtischPINVOKE.new_Slider__SWIG_0(_w, _h, _x, _y, angle, libtischPINVOKE.getCPtrAddRef(_tex)), true) {
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  public Slider(int _w, int _h, int _x, int _y, double angle) : this(libtischPINVOKE.new_Slider__SWIG_1(_w, _h, _x, _y, angle), true) {
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  public Slider(int _w, int _h, int _x, int _y) : this(libtischPINVOKE.new_Slider__SWIG_2(_w, _h, _x, _y), true) {
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  public Slider(int _w, int _h, int _x) : this(libtischPINVOKE.new_Slider__SWIG_3(_w, _h, _x), true) {
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  public Slider(int _w, int _h) : this(libtischPINVOKE.new_Slider__SWIG_4(_w, _h), true) {
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  public override void action(Gesture gesture) {
    if (SwigDerivedClassHasMethod("action", swigMethodTypes10)) libtischPINVOKE.Slider_actionSwigExplicitSlider(swigCPtr, Gesture.getCPtr(gesture)); else libtischPINVOKE.Slider_action(swigCPtr, Gesture.getCPtr(gesture));
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void draw() {
    if (SwigDerivedClassHasMethod("draw", swigMethodTypes9)) libtischPINVOKE.Slider_drawSwigExplicitSlider(swigCPtr); else libtischPINVOKE.Slider_draw(swigCPtr);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public double getpos() {
    double ret = libtischPINVOKE.Slider_getpos(swigCPtr);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  protected double pos {
    set {
      libtischPINVOKE.Slider_pos_set(swigCPtr, value);
      if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      double ret = libtischPINVOKE.Slider_pos_get(swigCPtr);
      if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("outline", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateSlider_0(SwigDirectoroutline);
    if (SwigDerivedClassHasMethod("update", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateSlider_1(SwigDirectorupdate__SWIG_0);
    if (SwigDerivedClassHasMethod("update", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateSlider_2(SwigDirectorupdate__SWIG_1);
    if (SwigDerivedClassHasMethod("doUpdate", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateSlider_3(SwigDirectordoUpdate__SWIG_0);
    if (SwigDerivedClassHasMethod("doUpdate", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateSlider_4(SwigDirectordoUpdate__SWIG_1);
    if (SwigDerivedClassHasMethod("raise", swigMethodTypes5))
      swigDelegate5 = new SwigDelegateSlider_5(SwigDirectorraise__SWIG_0);
    if (SwigDerivedClassHasMethod("raise", swigMethodTypes6))
      swigDelegate6 = new SwigDelegateSlider_6(SwigDirectorraise__SWIG_1);
    if (SwigDerivedClassHasMethod("lower", swigMethodTypes7))
      swigDelegate7 = new SwigDelegateSlider_7(SwigDirectorlower__SWIG_0);
    if (SwigDerivedClassHasMethod("lower", swigMethodTypes8))
      swigDelegate8 = new SwigDelegateSlider_8(SwigDirectorlower__SWIG_1);
    if (SwigDerivedClassHasMethod("draw", swigMethodTypes9))
      swigDelegate9 = new SwigDelegateSlider_9(SwigDirectordraw);
    if (SwigDerivedClassHasMethod("action", swigMethodTypes10))
      swigDelegate10 = new SwigDelegateSlider_10(SwigDirectoraction);
    if (SwigDerivedClassHasMethod("enter", swigMethodTypes11))
      swigDelegate11 = new SwigDelegateSlider_11(SwigDirectorenter__SWIG_0);
    if (SwigDerivedClassHasMethod("enter", swigMethodTypes12))
      swigDelegate12 = new SwigDelegateSlider_12(SwigDirectorenter__SWIG_1);
    if (SwigDerivedClassHasMethod("paint", swigMethodTypes13))
      swigDelegate13 = new SwigDelegateSlider_13(SwigDirectorpaint__SWIG_0);
    if (SwigDerivedClassHasMethod("paint", swigMethodTypes14))
      swigDelegate14 = new SwigDelegateSlider_14(SwigDirectorpaint__SWIG_1);
    libtischPINVOKE.Slider_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5, swigDelegate6, swigDelegate7, swigDelegate8, swigDelegate9, swigDelegate10, swigDelegate11, swigDelegate12, swigDelegate13, swigDelegate14);
  }

  private bool SwigDerivedClassHasMethod(string methodName, Type[] methodTypes) {
    System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(Slider));
    return hasDerivedMethod;
  }

  private void SwigDirectoroutline() {
    outline();
  }

  private void SwigDirectorupdate__SWIG_0(IntPtr target) {
    update((target == IntPtr.Zero) ? null : new Widget(target, false));
  }

  private void SwigDirectorupdate__SWIG_1() {
    update();
  }

  private void SwigDirectordoUpdate__SWIG_0(IntPtr target) {
    doUpdate((target == IntPtr.Zero) ? null : new Widget(target, false));
  }

  private void SwigDirectordoUpdate__SWIG_1() {
    doUpdate();
  }

  private void SwigDirectorraise__SWIG_0(IntPtr widget) {
    raise((widget == IntPtr.Zero) ? null : new Widget(widget, false));
  }

  private void SwigDirectorraise__SWIG_1() {
    raise();
  }

  private void SwigDirectorlower__SWIG_0(IntPtr widget) {
    lower((widget == IntPtr.Zero) ? null : new Widget(widget, false));
  }

  private void SwigDirectorlower__SWIG_1() {
    lower();
  }

  private void SwigDirectordraw() {
    draw();
  }

  private void SwigDirectoraction(IntPtr gesture) {
    action((gesture == IntPtr.Zero) ? null : new Gesture(gesture, false));
  }

  private void SwigDirectorenter__SWIG_0(double z) {
    enter(z);
  }

  private void SwigDirectorenter__SWIG_1() {
    enter();
  }

  private void SwigDirectorpaint__SWIG_0(bool update_stencil) {
    paint(update_stencil);
  }

  private void SwigDirectorpaint__SWIG_1() {
    paint();
  }

  public delegate void SwigDelegateSlider_0();
  public delegate void SwigDelegateSlider_1(IntPtr target);
  public delegate void SwigDelegateSlider_2();
  public delegate void SwigDelegateSlider_3(IntPtr target);
  public delegate void SwigDelegateSlider_4();
  public delegate void SwigDelegateSlider_5(IntPtr widget);
  public delegate void SwigDelegateSlider_6();
  public delegate void SwigDelegateSlider_7(IntPtr widget);
  public delegate void SwigDelegateSlider_8();
  public delegate void SwigDelegateSlider_9();
  public delegate void SwigDelegateSlider_10(IntPtr gesture);
  public delegate void SwigDelegateSlider_11(double z);
  public delegate void SwigDelegateSlider_12();
  public delegate void SwigDelegateSlider_13(bool update_stencil);
  public delegate void SwigDelegateSlider_14();

  private SwigDelegateSlider_0 swigDelegate0;
  private SwigDelegateSlider_1 swigDelegate1;
  private SwigDelegateSlider_2 swigDelegate2;
  private SwigDelegateSlider_3 swigDelegate3;
  private SwigDelegateSlider_4 swigDelegate4;
  private SwigDelegateSlider_5 swigDelegate5;
  private SwigDelegateSlider_6 swigDelegate6;
  private SwigDelegateSlider_7 swigDelegate7;
  private SwigDelegateSlider_8 swigDelegate8;
  private SwigDelegateSlider_9 swigDelegate9;
  private SwigDelegateSlider_10 swigDelegate10;
  private SwigDelegateSlider_11 swigDelegate11;
  private SwigDelegateSlider_12 swigDelegate12;
  private SwigDelegateSlider_13 swigDelegate13;
  private SwigDelegateSlider_14 swigDelegate14;

  private static Type[] swigMethodTypes0 = new Type[] {  };
  private static Type[] swigMethodTypes1 = new Type[] { typeof(Widget) };
  private static Type[] swigMethodTypes2 = new Type[] {  };
  private static Type[] swigMethodTypes3 = new Type[] { typeof(Widget) };
  private static Type[] swigMethodTypes4 = new Type[] {  };
  private static Type[] swigMethodTypes5 = new Type[] { typeof(Widget) };
  private static Type[] swigMethodTypes6 = new Type[] {  };
  private static Type[] swigMethodTypes7 = new Type[] { typeof(Widget) };
  private static Type[] swigMethodTypes8 = new Type[] {  };
  private static Type[] swigMethodTypes9 = new Type[] {  };
  private static Type[] swigMethodTypes10 = new Type[] { typeof(Gesture) };
  private static Type[] swigMethodTypes11 = new Type[] { typeof(double) };
  private static Type[] swigMethodTypes12 = new Type[] {  };
  private static Type[] swigMethodTypes13 = new Type[] { typeof(bool) };
  private static Type[] swigMethodTypes14 = new Type[] {  };
}
