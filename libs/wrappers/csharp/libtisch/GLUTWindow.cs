/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class GLUTWindow : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal GLUTWindow(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(GLUTWindow obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~GLUTWindow() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          libtischPINVOKE.delete_GLUTWindow(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public GLUTWindow(int w, int h, string title, int mode) : this(libtischPINVOKE.new_GLUTWindow__SWIG_0(w, h, title, mode), true) {
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public GLUTWindow(int w, int h, string title) : this(libtischPINVOKE.new_GLUTWindow__SWIG_1(w, h, title), true) {
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public void show(SWIGTYPE_p_RGBImage img, int x, int y) {
    libtischPINVOKE.GLUTWindow_show__SWIG_0(swigCPtr, SWIGTYPE_p_RGBImage.getCPtr(img), x, y);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public void show(SWIGTYPE_p_ShortImage img, int x, int y) {
    libtischPINVOKE.GLUTWindow_show__SWIG_1(swigCPtr, SWIGTYPE_p_ShortImage.getCPtr(img), x, y);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public void show(SWIGTYPE_p_IntensityImage img, int x, int y) {
    libtischPINVOKE.GLUTWindow_show__SWIG_2(swigCPtr, SWIGTYPE_p_IntensityImage.getCPtr(img), x, y);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public void print(string text, int x, int y) {
    libtischPINVOKE.GLUTWindow_print(swigCPtr, text, x, y);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public void drawRectangleBackground(int x, int y, int size_x, int size_y, int border) {
    libtischPINVOKE.GLUTWindow_drawRectangleBackground(swigCPtr, x, y, size_x, size_y, border);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public void drawPolygon(SWIGTYPE_p_std__vectorT__VectorT_int_t_p_t points, bool invert, int height) {
    libtischPINVOKE.GLUTWindow_drawPolygon__SWIG_0(swigCPtr, SWIGTYPE_p_std__vectorT__VectorT_int_t_p_t.getCPtr(points), invert, height);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public void drawPolygon(SWIGTYPE_p_std__vectorT__VectorT_int_t_p_t points, bool invert) {
    libtischPINVOKE.GLUTWindow_drawPolygon__SWIG_1(swigCPtr, SWIGTYPE_p_std__vectorT__VectorT_int_t_p_t.getCPtr(points), invert);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public void drawPolygon(SWIGTYPE_p_std__vectorT__VectorT_int_t_p_t points) {
    libtischPINVOKE.GLUTWindow_drawPolygon__SWIG_2(swigCPtr, SWIGTYPE_p_std__vectorT__VectorT_int_t_p_t.getCPtr(points));
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public void title(string text) {
    libtischPINVOKE.GLUTWindow_title(swigCPtr, text);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public void clear(float red, float green, float blue, float alpha) {
    libtischPINVOKE.GLUTWindow_clear__SWIG_0(swigCPtr, red, green, blue, alpha);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public void clear(float red, float green, float blue) {
    libtischPINVOKE.GLUTWindow_clear__SWIG_1(swigCPtr, red, green, blue);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public void clear(float red, float green) {
    libtischPINVOKE.GLUTWindow_clear__SWIG_2(swigCPtr, red, green);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public void clear(float red) {
    libtischPINVOKE.GLUTWindow_clear__SWIG_3(swigCPtr, red);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public void clear() {
    libtischPINVOKE.GLUTWindow_clear__SWIG_4(swigCPtr);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public void mode2D() {
    libtischPINVOKE.GLUTWindow_mode2D(swigCPtr);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public void swap() {
    libtischPINVOKE.GLUTWindow_swap(swigCPtr);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public void run() {
    libtischPINVOKE.GLUTWindow_run(swigCPtr);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public int getWidth() {
    int ret = libtischPINVOKE.GLUTWindow_getWidth(swigCPtr);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getHeight() {
    int ret = libtischPINVOKE.GLUTWindow_getHeight(swigCPtr);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void idle() {
    libtischPINVOKE.GLUTWindow_idle(swigCPtr);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void display() {
    libtischPINVOKE.GLUTWindow_display(swigCPtr);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void reshape(int w, int h) {
    libtischPINVOKE.GLUTWindow_reshape(swigCPtr, w, h);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void keyboard(int key, int x, int y) {
    libtischPINVOKE.GLUTWindow_keyboard(swigCPtr, key, x, y);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void mouse(int num, int button, int state, int x, int y) {
    libtischPINVOKE.GLUTWindow_mouse(swigCPtr, num, button, state, x, y);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void passive(int num, int x, int y) {
    libtischPINVOKE.GLUTWindow_passive(swigCPtr, num, x, y);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void motion(int num, int x, int y) {
    libtischPINVOKE.GLUTWindow_motion(swigCPtr, num, x, y);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void entry(int num, int state) {
    libtischPINVOKE.GLUTWindow_entry(swigCPtr, num, state);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

}
