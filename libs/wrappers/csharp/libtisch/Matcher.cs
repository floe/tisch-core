/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class Matcher : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Matcher(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Matcher obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Matcher() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          libtischPINVOKE.delete_Matcher(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public virtual void request_update(int id) {
    libtischPINVOKE.Matcher_request_update(swigCPtr, id);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void trigger_gesture(int id, Gesture g) {
    libtischPINVOKE.Matcher_trigger_gesture(swigCPtr, id, Gesture.getCPtr(g));
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void process_blob(BasicBlob blob) {
    libtischPINVOKE.Matcher_process_blob(swigCPtr, BasicBlob.getCPtr(blob));
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void process_gestures() {
    libtischPINVOKE.Matcher_process_gestures(swigCPtr);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public void load_defaults(uint set) {
    libtischPINVOKE.Matcher_load_defaults__SWIG_0(swigCPtr, set);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public void load_defaults() {
    libtischPINVOKE.Matcher_load_defaults__SWIG_1(swigCPtr);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_void run() {
    IntPtr cPtr = libtischPINVOKE.Matcher_run(swigCPtr);
    SWIGTYPE_p_void ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void update(uint id, Region r) {
    libtischPINVOKE.Matcher_update(swigCPtr, id, Region.getCPtr(r));
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public void remove(uint id) {
    libtischPINVOKE.Matcher_remove(swigCPtr, id);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public void raise(uint id) {
    libtischPINVOKE.Matcher_raise(swigCPtr, id);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public void lower(uint id) {
    libtischPINVOKE.Matcher_lower(swigCPtr, id);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public void peakmode(bool _use_peak) {
    libtischPINVOKE.Matcher_peakmode(swigCPtr, _use_peak);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public void clear() {
    libtischPINVOKE.Matcher_clear(swigCPtr);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

}
