/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class smartPtrFeatureBase : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal smartPtrFeatureBase(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(smartPtrFeatureBase obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~smartPtrFeatureBase() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          libtischPINVOKE.delete_smartPtrFeatureBase(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public smartPtrFeatureBase(FeatureBase p) : this(libtischPINVOKE.new_smartPtrFeatureBase__SWIG_0(FeatureBase.getCPtr(p)), true) {
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public smartPtrFeatureBase() : this(libtischPINVOKE.new_smartPtrFeatureBase__SWIG_1(), true) {
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public smartPtrFeatureBase(smartPtrFeatureBase r) : this(libtischPINVOKE.new_smartPtrFeatureBase__SWIG_2(smartPtrFeatureBase.getCPtr(r)), true) {
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public smartPtrFeatureBase assign(smartPtrFeatureBase r) {
    smartPtrFeatureBase ret = new smartPtrFeatureBase(libtischPINVOKE.smartPtrFeatureBase_assign(swigCPtr, smartPtrFeatureBase.getCPtr(r)), false);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public FeatureBase __ref__() {
    FeatureBase ret = new FeatureBase(libtischPINVOKE.smartPtrFeatureBase___ref__(swigCPtr), false);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public FeatureBase __deref__() {
    IntPtr cPtr = libtischPINVOKE.smartPtrFeatureBase___deref__(swigCPtr);
    FeatureBase ret = (cPtr == IntPtr.Zero) ? null : new FeatureBase(cPtr, false);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public FeatureBase get() {
    IntPtr cPtr = libtischPINVOKE.smartPtrFeatureBase_get(swigCPtr);
    FeatureBase ret = (cPtr == IntPtr.Zero) ? null : new FeatureBase(cPtr, false);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool unique() {
    bool ret = libtischPINVOKE.smartPtrFeatureBase_unique(swigCPtr);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string name() {
    string ret = libtischPINVOKE.smartPtrFeatureBase_name(swigCPtr);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public FeatureBase clone() {
    IntPtr cPtr = libtischPINVOKE.smartPtrFeatureBase_clone(swigCPtr);
    FeatureBase ret = (cPtr == IntPtr.Zero) ? null : new FeatureBase(cPtr, false);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void load(InputState state) {
    libtischPINVOKE.smartPtrFeatureBase_load(swigCPtr, InputState.getCPtr(state));
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public int next() {
    int ret = libtischPINVOKE.smartPtrFeatureBase_next(swigCPtr);
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void serialize(SWIGTYPE_p_std__ostream s) {
    libtischPINVOKE.smartPtrFeatureBase_serialize(swigCPtr, SWIGTYPE_p_std__ostream.getCPtr(s));
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public void unserialize(SWIGTYPE_p_std__istream s) {
    libtischPINVOKE.smartPtrFeatureBase_unserialize(swigCPtr, SWIGTYPE_p_std__istream.getCPtr(s));
    if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
  }

  public int has_result {
    set {
      libtischPINVOKE.smartPtrFeatureBase_has_result_set(swigCPtr, value);
      if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = libtischPINVOKE.smartPtrFeatureBase_has_result_get(swigCPtr);
      if (libtischPINVOKE.SWIGPendingException.Pending) throw libtischPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

}
