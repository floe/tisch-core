/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_libtisch_WRAP_H_
#define SWIG_libtisch_WRAP_H_

class SwigDirector_FeatureBase : public FeatureBase, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_FeatureBase(JNIEnv *jenv, unsigned int _tf = 0);
    virtual ~SwigDirector_FeatureBase();
    virtual char const *name() const;
    virtual FeatureBase *clone() const;
    virtual void load(InputState &state);
    virtual int next();
    virtual void serialize(std::ostream &s);
    virtual void unserialize(std::istream &s);
    using FeatureBase::typeflags;
public:
    bool swig_overrides(int n) {
      return (n < 6 ? swig_override[n] : false);
    }
protected:
    bool swig_override[6];
};

class SwigDirector_Widget : public Widget, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_Widget(JNIEnv *jenv, int _w, int _h, int _x = 0, int _y = 0, double _angle = 0.0, RGBATexture *_tex = 0, unsigned int _regflags = (((unsigned int) 1 << INPUT_TYPE_COUNT) -1));
    virtual ~SwigDirector_Widget();
    virtual void outline();
    virtual void update(Widget *target = 0);
    virtual void doUpdate(Widget *target = 0);
    virtual void raise(Widget *widget = 0);
    virtual void lower(Widget *widget = 0);
    virtual void draw();
    virtual void action(Gesture *gesture);
    virtual void enter(double z = 0.0);
    virtual void paint(bool update_stencil = false);
    using Widget::unregister;
    using Widget::mytex;
    using Widget::mycolor;
    using Widget::parent;
    using Widget::m_model;
public:
    bool swig_overrides(int n) {
      return (n < 15 ? swig_override[n] : false);
    }
protected:
    bool swig_override[15];
};

class SwigDirector_Label : public Label, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_Label(JNIEnv *jenv, char const *text, int _w, int _h, int _x = 0, int _y = 0, double angle = 0.0, int center = 0, int snip = 0, RGBATexture *_tex = 0);
    virtual ~SwigDirector_Label();
    virtual void outline();
    virtual void update(Widget *target = 0);
    virtual void doUpdate(Widget *target = 0);
    virtual void raise(Widget *widget = 0);
    virtual void lower(Widget *widget = 0);
    virtual void draw();
    virtual void action(Gesture *gesture);
    virtual void enter(double z = 0.0);
    virtual void paint(bool update_stencil = false);
    using Label::text;
    using Label::center;
    using Label::snip;
public:
    bool swig_overrides(int n) {
      return (n < 15 ? swig_override[n] : false);
    }
protected:
    bool swig_override[15];
};

class SwigDirector_Button : public Button, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_Button(JNIEnv *jenv, int _w, int _h, int _x = 0, int _y = 0, double angle = 0.0, RGBATexture *_tex = 0);
    virtual ~SwigDirector_Button();
    virtual void outline();
    virtual void update(Widget *target = 0);
    virtual void doUpdate(Widget *target = 0);
    virtual void raise(Widget *widget = 0);
    virtual void lower(Widget *widget = 0);
    virtual void draw();
    virtual void action(Gesture *gesture);
    virtual void enter(double z = 0.0);
    virtual void paint(bool update_stencil = false);
    virtual void tap(Vector pos, int id);
    virtual void release();
    using Button::active;
public:
    bool swig_overrides(int n) {
      return (n < 17 ? swig_override[n] : false);
    }
protected:
    bool swig_override[17];
};

class SwigDirector_Tile : public Tile, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_Tile(JNIEnv *jenv, int _w, int _h, int _x = 0, int _y = 0, double angle = 0.0, RGBATexture *_tex = 0, int _mode = 0xFF);
    virtual ~SwigDirector_Tile();
    virtual void outline();
    virtual void update(Widget *target = 0);
    virtual void doUpdate(Widget *target = 0);
    virtual void raise(Widget *widget = 0);
    virtual void lower(Widget *widget = 0);
    virtual void draw();
    virtual void action(Gesture *gesture);
    virtual void enter(double z = 0.0);
    virtual void paint(bool update_stencil = false);
    virtual void tap(Vector pos, int id);
    virtual void release();
    virtual void apply(Vector delta);
    using Tile::mode;
    using Tile::slide;
    using Tile::vel;
public:
    bool swig_overrides(int n) {
      return (n < 18 ? swig_override[n] : false);
    }
protected:
    bool swig_override[18];
};

class SwigDirector_Container : public Container, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_Container(JNIEnv *jenv, int w, int h, int x, int y, double angle = 0.0, RGBATexture *tex = 0, int mode = 32);
    virtual ~SwigDirector_Container();
    virtual void outline();
    virtual void update(Widget *target = 0);
    virtual void doUpdate(Widget *target = 0);
    virtual void raise(Widget *widget = 0);
    virtual void lower(Widget *widget = 0);
    virtual void draw();
    virtual void action(Gesture *gesture);
    virtual void enter(double z = 0.0);
    virtual void paint(bool update_stencil = false);
    virtual void tap(Vector vec, int id);
    virtual void release();
    virtual void apply(Vector delta);
    using Container::totalHeight;
    using Container::widgets;
    using Container::locked;
public:
    bool swig_overrides(int n) {
      return (n < 18 ? swig_override[n] : false);
    }
protected:
    bool swig_override[18];
};

class SwigDirector_Slider : public Slider, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_Slider(JNIEnv *jenv, int _w, int _h, int _x = 0, int _y = 0, double angle = 0.0, RGBATexture *_tex = 0);
    virtual ~SwigDirector_Slider();
    virtual void outline();
    virtual void update(Widget *target = 0);
    virtual void doUpdate(Widget *target = 0);
    virtual void raise(Widget *widget = 0);
    virtual void lower(Widget *widget = 0);
    virtual void draw();
    virtual void action(Gesture *gesture);
    virtual void enter(double z = 0.0);
    virtual void paint(bool update_stencil = false);
    using Slider::pos;
public:
    bool swig_overrides(int n) {
      return (n < 15 ? swig_override[n] : false);
    }
protected:
    bool swig_override[15];
};

class SwigDirector_Dial : public Dial, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_Dial(JNIEnv *jenv, int _r, int _x = 0, int _y = 0, double _angle = 0.0, RGBATexture *_tex = 0);
    virtual ~SwigDirector_Dial();
    virtual void outline();
    virtual void update(Widget *target = 0);
    virtual void doUpdate(Widget *target = 0);
    virtual void raise(Widget *widget = 0);
    virtual void lower(Widget *widget = 0);
    virtual void draw();
    virtual void action(Gesture *gesture);
    virtual void enter(double z = 0.0);
    virtual void paint(bool update_stencil = false);
    using Dial::k_angle;
    using Dial::k_lower;
    using Dial::k_upper;
    using Dial::oldpos;
public:
    bool swig_overrides(int n) {
      return (n < 15 ? swig_override[n] : false);
    }
protected:
    bool swig_override[15];
};

class SwigDirector_MasterContainer : public MasterContainer, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_MasterContainer(JNIEnv *jenv, int w, int h, int defaults = 1);
    virtual ~SwigDirector_MasterContainer();
    virtual void outline();
    virtual void update(Widget *target = 0);
    virtual void doUpdate(Widget *target = 0);
    virtual void raise(Widget *widget = 0);
    virtual void lower(Widget *widget = 0);
    virtual void draw();
    virtual void action(Gesture *gesture);
    virtual void enter(double z = 0.0);
    virtual void paint(bool update_stencil = false);
    virtual void tap(Vector vec, int id);
    virtual void release();
    virtual void apply(Vector delta);
    using MasterContainer::matcher;
    using MasterContainer::input;
    using MasterContainer::inthread;
public:
    bool swig_overrides(int n) {
      return (n < 18 ? swig_override[n] : false);
    }
protected:
    bool swig_override[18];
};

class SwigDirector_Window : public Window, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_Window(JNIEnv *jenv, int w, int h, std::string title, int use_mouse = 0);
    virtual ~SwigDirector_Window();
    virtual void idle();
    virtual void display();
    virtual void reshape(int w, int h);
    virtual void keyboard(int key, int x, int y);
    virtual void mouse(int num, int button, int state, int x, int y);
    virtual void passive(int num, int x, int y);
    virtual void motion(int num, int x, int y);
    virtual void entry(int num, int state);
    virtual void update(Widget *target = 0);
public:
    bool swig_overrides(int n) {
      return (n < 10 ? swig_override[n] : false);
    }
protected:
    bool swig_override[10];
};


#endif
