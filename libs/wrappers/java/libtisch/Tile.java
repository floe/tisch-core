/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package libtisch;

public class Tile extends Button {
  private long swigCPtr;

  protected Tile(long cPtr, boolean cMemoryOwn) {
    super(libtischJNI.SWIGTileUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Tile obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libtischJNI.delete_Tile(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  protected void swigDirectorDisconnect() {
    swigCMemOwn = false;
    delete();
  }

  public void swigReleaseOwnership() {
    swigCMemOwn = false;
    libtischJNI.Tile_change_ownership(this, swigCPtr, false);
  }

  public void swigTakeOwnership() {
    swigCMemOwn = true;
    libtischJNI.Tile_change_ownership(this, swigCPtr, true);
  }

  public Tile(int _w, int _h, int _x, int _y, double angle, RGBATexture _tex, int _mode) {
    this(libtischJNI.new_Tile__SWIG_0(_w, _h, _x, _y, angle, libtischJNI.getCPtrAddRef(_tex), _tex, _mode), true);
    libtischJNI.Tile_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

  public Tile(int _w, int _h, int _x, int _y, double angle, RGBATexture _tex) {
    this(libtischJNI.new_Tile__SWIG_1(_w, _h, _x, _y, angle, libtischJNI.getCPtrAddRef(_tex), _tex), true);
    libtischJNI.Tile_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

  public Tile(int _w, int _h, int _x, int _y, double angle) {
    this(libtischJNI.new_Tile__SWIG_2(_w, _h, _x, _y, angle), true);
    libtischJNI.Tile_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

  public Tile(int _w, int _h, int _x, int _y) {
    this(libtischJNI.new_Tile__SWIG_3(_w, _h, _x, _y), true);
    libtischJNI.Tile_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

  public Tile(int _w, int _h, int _x) {
    this(libtischJNI.new_Tile__SWIG_4(_w, _h, _x), true);
    libtischJNI.Tile_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

  public Tile(int _w, int _h) {
    this(libtischJNI.new_Tile__SWIG_5(_w, _h), true);
    libtischJNI.Tile_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

  public void action(Gesture gesture) {
    if (getClass() == Tile.class) libtischJNI.Tile_action(swigCPtr, this, Gesture.getCPtr(gesture), gesture); else libtischJNI.Tile_actionSwigExplicitTile(swigCPtr, this, Gesture.getCPtr(gesture), gesture);
  }

  public void tap(Vector pos, int id) {
    if (getClass() == Tile.class) libtischJNI.Tile_tap(swigCPtr, this, Vector.getCPtr(pos), pos, id); else libtischJNI.Tile_tapSwigExplicitTile(swigCPtr, this, Vector.getCPtr(pos), pos, id);
  }

  public void paint(boolean update_stencil) {
    if (getClass() == Tile.class) libtischJNI.Tile_paint__SWIG_0(swigCPtr, this, update_stencil); else libtischJNI.Tile_paintSwigExplicitTile__SWIG_0(swigCPtr, this, update_stencil);
  }

  public void paint() {
    if (getClass() == Tile.class) libtischJNI.Tile_paint__SWIG_1(swigCPtr, this); else libtischJNI.Tile_paintSwigExplicitTile__SWIG_1(swigCPtr, this);
  }

  public void apply(Vector delta) {
    if (getClass() == Tile.class) libtischJNI.Tile_apply(swigCPtr, this, Vector.getCPtr(delta), delta); else libtischJNI.Tile_applySwigExplicitTile(swigCPtr, this, Vector.getCPtr(delta), delta);
  }

  protected void setMode(int value) {
    libtischJNI.Tile_mode_set(swigCPtr, this, value);
  }

  protected int getMode() {
    return libtischJNI.Tile_mode_get(swigCPtr, this);
  }

  protected void setSlide(int value) {
    libtischJNI.Tile_slide_set(swigCPtr, this, value);
  }

  protected int getSlide() {
    return libtischJNI.Tile_slide_get(swigCPtr, this);
  }

  protected void setVel(Vector value) {
    libtischJNI.Tile_vel_set(swigCPtr, this, Vector.getCPtr(value), value);
  }

  protected Vector getVel() {
    long cPtr = libtischJNI.Tile_vel_get(swigCPtr, this);
    return (cPtr == 0) ? null : new Vector(cPtr, false);
  }

}
