/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package libtisch;

public class Dial extends Widget {
  private long swigCPtr;

  protected Dial(long cPtr, boolean cMemoryOwn) {
    super(libtischJNI.SWIGDialUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Dial obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libtischJNI.delete_Dial(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  protected void swigDirectorDisconnect() {
    swigCMemOwn = false;
    delete();
  }

  public void swigReleaseOwnership() {
    swigCMemOwn = false;
    libtischJNI.Dial_change_ownership(this, swigCPtr, false);
  }

  public void swigTakeOwnership() {
    swigCMemOwn = true;
    libtischJNI.Dial_change_ownership(this, swigCPtr, true);
  }

  public Dial(int _r, int _x, int _y, double _angle, RGBATexture _tex) {
    this(libtischJNI.new_Dial__SWIG_0(_r, _x, _y, _angle, libtischJNI.getCPtrAddRef(_tex), _tex), true);
    libtischJNI.Dial_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

  public Dial(int _r, int _x, int _y, double _angle) {
    this(libtischJNI.new_Dial__SWIG_1(_r, _x, _y, _angle), true);
    libtischJNI.Dial_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

  public Dial(int _r, int _x, int _y) {
    this(libtischJNI.new_Dial__SWIG_2(_r, _x, _y), true);
    libtischJNI.Dial_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

  public Dial(int _r, int _x) {
    this(libtischJNI.new_Dial__SWIG_3(_r, _x), true);
    libtischJNI.Dial_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

  public Dial(int _r) {
    this(libtischJNI.new_Dial__SWIG_4(_r), true);
    libtischJNI.Dial_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

  public void draw() {
    if (getClass() == Dial.class) libtischJNI.Dial_draw(swigCPtr, this); else libtischJNI.Dial_drawSwigExplicitDial(swigCPtr, this);
  }

  public void action(Gesture gesture) {
    if (getClass() == Dial.class) libtischJNI.Dial_action(swigCPtr, this, Gesture.getCPtr(gesture), gesture); else libtischJNI.Dial_actionSwigExplicitDial(swigCPtr, this, Gesture.getCPtr(gesture), gesture);
  }

  public void outline() {
    if (getClass() == Dial.class) libtischJNI.Dial_outline(swigCPtr, this); else libtischJNI.Dial_outlineSwigExplicitDial(swigCPtr, this);
  }

  public double get() {
    return libtischJNI.Dial_get(swigCPtr, this);
  }

  public void set(double _angle, double _lower, double _upper) {
    libtischJNI.Dial_set(swigCPtr, this, _angle, _lower, _upper);
  }

  protected void setK_angle(double value) {
    libtischJNI.Dial_k_angle_set(swigCPtr, this, value);
  }

  protected double getK_angle() {
    return libtischJNI.Dial_k_angle_get(swigCPtr, this);
  }

  protected void setK_lower(double value) {
    libtischJNI.Dial_k_lower_set(swigCPtr, this, value);
  }

  protected double getK_lower() {
    return libtischJNI.Dial_k_lower_get(swigCPtr, this);
  }

  protected void setK_upper(double value) {
    libtischJNI.Dial_k_upper_set(swigCPtr, this, value);
  }

  protected double getK_upper() {
    return libtischJNI.Dial_k_upper_get(swigCPtr, this);
  }

  protected void setOldpos(Vector value) {
    libtischJNI.Dial_oldpos_set(swigCPtr, this, Vector.getCPtr(value), value);
  }

  protected Vector getOldpos() {
    long cPtr = libtischJNI.Dial_oldpos_get(swigCPtr, this);
    return (cPtr == 0) ? null : new Vector(cPtr, false);
  }

}
