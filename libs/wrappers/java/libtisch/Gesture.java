/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package libtisch;

public class Gesture extends vectorSmartPtrFeatureBase {
  private long swigCPtr;

  public Gesture(long cPtr, boolean cMemoryOwn) {
    super(libtischJNI.Gesture_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(Gesture obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libtischJNI.delete_Gesture(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public Gesture() {
    this(libtischJNI.new_Gesture__SWIG_0(), true);
  }

  public Gesture(String _name, int _flags) {
    this(libtischJNI.new_Gesture__SWIG_1(_name, _flags), true);
  }

  public Gesture(String _name) {
    this(libtischJNI.new_Gesture__SWIG_2(_name), true);
  }

  public Gesture(Gesture g) {
    this(libtischJNI.new_Gesture__SWIG_3(Gesture.getCPtr(g), g), true);
  }

  public Gesture assign(Gesture g) {
    return new Gesture(libtischJNI.Gesture_assign(swigCPtr, this, Gesture.getCPtr(g), g), false);
  }

  public void load(InputState state) {
    libtischJNI.Gesture_load(swigCPtr, this, InputState.getCPtr(state), state);
  }

  public void check() {
    libtischJNI.Gesture_check(swigCPtr, this);
  }

  public int next() {
    return libtischJNI.Gesture_next(swigCPtr, this);
  }

  public int match() {
    return libtischJNI.Gesture_match(swigCPtr, this);
  }

  public String name() {
    return libtischJNI.Gesture_name(swigCPtr, this);
  }

  public int flags() {
    return libtischJNI.Gesture_flags(swigCPtr, this);
  }

}
